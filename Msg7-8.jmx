<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Msg7-8" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Msg7-8" enabled="true">
        <stringProp name="TestPlan.comments">Msg7-8</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables-Global" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="env" elementType="Argument">
              <stringProp name="Argument.name">env</stringProp>
              <stringProp name="Argument.value">153.77.180.130</stringProp>
              <stringProp name="Argument.desc">Environment name to be used in the Endpoint URL</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dataFolder" elementType="Argument">
              <stringProp name="Argument.name">dataFolder</stringProp>
              <stringProp name="Argument.value">C:\JmeterAutomation\Test Data\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="RetailerID" elementType="Argument">
              <stringProp name="Argument.name">RetailerID</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="RetailerUserID" elementType="Argument">
              <stringProp name="Argument.name">RetailerUserID</stringProp>
              <stringProp name="Argument.value">TestRetailerPK</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="RetailerPassword" elementType="Argument">
              <stringProp name="Argument.name">RetailerPassword</stringProp>
              <stringProp name="Argument.value">Abcd1234</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CurrDate1" elementType="Argument">
              <stringProp name="Argument.name">CurrDate1</stringProp>
              <stringProp name="Argument.value">${__groovy(new Date().format(&apos;yyyy-MM-dd&apos;),)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CurrDate" elementType="Argument">
              <stringProp name="Argument.name">CurrDate</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="transID" elementType="Argument">
              <stringProp name="Argument.name">transID</stringProp>
              <stringProp name="Argument.value">${__Random(5000000,6000000)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="transID1" elementType="Argument">
              <stringProp name="Argument.name">transID1</stringProp>
              <stringProp name="Argument.value">${__Random(5000000,6000000)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="today" elementType="Argument">
              <stringProp name="Argument.name">today</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AccountID" elementType="Argument">
              <stringProp name="Argument.name">AccountID</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="transID2" elementType="Argument">
              <stringProp name="Argument.name">transID2</stringProp>
              <stringProp name="Argument.value">${__Random(5000000,6000000)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="transID3" elementType="Argument">
              <stringProp name="Argument.name">transID3</stringProp>
              <stringProp name="Argument.value">${__Random(5000000,6000000)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="MPDBName" elementType="Argument">
              <stringProp name="Argument.name">MPDBName</stringProp>
              <stringProp name="Argument.value">MP_LMS</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PromotionDBName" elementType="Argument">
              <stringProp name="Argument.name">PromotionDBName</stringProp>
              <stringProp name="Argument.value">Promotion_LMS_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-Loyalty DB" enabled="true">
          <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://153.77.180.130;databaseName=Loyalty_LMS_1</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="username">sa</stringProp>
          <stringProp name="password">Abcd1234@</stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-Promotion DB" enabled="true">
          <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://153.77.180.130;databaseName=Promotion_LMS_1</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="username">sa</stringProp>
          <stringProp name="password">Abcd1234@</stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration - Host DB" enabled="true">
          <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Host</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://153.77.180.130;databaseName=HOST_LMS_1</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Abcd1234@</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">sa</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-LoyaltyOnlineDB" enabled="true">
          <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="dataSource">MS_Driver_Connection_Pool_LoyaltyOnline</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://153.77.180.130;databaseName=LoyaltyOnline_LMS_1</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="username">sa</stringProp>
          <stringProp name="password">Abcd1234@</stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request Login" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:UserLogin&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_UserName&gt;${RetailerUserID}&lt;/hql:in_UserName&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_Password&gt;${RetailerPassword}&lt;/hql:in_Password&gt;&#xd;
      &lt;/hql:UserLogin&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/Authorization/Login.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">${session}</stringProp>
            <stringProp name="XPathExtractor.refname">session</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_SessionKey</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - New card1" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
declare @BarcodeId int
declare @Value nvarchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

select top 1 @Value = btl.Value, @BarcodeId = btl.BarcodeId 
from CRM_ClubCard cc
inner join [Promotion_LMS_1].dbo.BarcodeTemplateLine btl
on cc.Matrixmemberid= btl.Matrixmemberid and btl.AttributeId=1 and cc.BarcodeId = btl.BarcodeId and cc.ClubCardId like &apos;&apos;+ (btl.[Value])+&apos;%&apos;
where cc.matrixmemberid = @matrixmemberid 
ORDER BY newid()

select  (select  max(cast(ClubCardId as numeric)) from CRM_ClubCard where matrixmemberid = @matrixmemberid and BarcodeId=@BarcodeId and ClubCardId like &apos;&apos;+ (@Value)+&apos;%&apos;)+1 as CardID


</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">CardID, MatrixMemberid</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - Create Member1" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:SaveDemographic&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_ClubCardId&gt;${CardID_1}&lt;/hql:in_ClubCardId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_HouseHold&gt;&lt;![CDATA[&lt;HouseHold BuyingUnitInternalKey=&quot;0&quot; Country=&quot;100&quot; State=&quot;0&quot; City=&quot;&quot; Street1=&quot;&quot; Street2=&quot;&quot; PostalCode=&quot;&quot; PhonePrefix=&quot;+1&quot; HomePhone=&quot;9160962222&quot; SendEmail=&quot;false&quot; County=&quot;&quot; HouseName=&quot;&quot;&gt;&lt;Members&gt;&lt;Member MemberInternalKey=&quot;0&quot; IsMainMember=&quot;true&quot; LastName=&quot;jmeter1&quot; FirstName=&quot;new1&quot; AdditionalFirstName=&quot;&quot; AdditionalLastName=&quot;&quot; MiddleInitial=&quot;&quot; DriversLicense=&quot;&quot; NationalInsuranceNumber=&quot;&quot; Remarks=&quot;&quot; MobilePhoneNumber=&quot;9985991111&quot; WorkPhoneNumber=&quot;&quot; Gender=&quot;0&quot; Passport=&quot;&quot; StartDate=&quot;${today}T00:00:00&quot; RedemptionPrivileges=&quot;0&quot; LanguageId=&quot;0&quot; PostOption=&quot;1&quot; NumberOfFamilyMembers=&quot;1&quot; Anonimity=&quot;0&quot; SpouseLastName=&quot;&quot; MemberStatus=&quot;1&quot; ReceiptLayoutId=&quot;0&quot; AdressNormalizationUpdate=&quot;N&quot; UpdatedDate=&quot;${today}T00:00:00&quot; CompanyName=&quot;&quot; EMailAddress=&quot;&quot; ProcessingPrevention=&quot;false&quot; ReceiptType=&quot;0&quot;&gt;&lt;Cards&gt;&lt;Card Id=&quot;${CardID_1}&quot; CardStatus=&quot;1&quot; IssueDate=&quot;${today}T00:00:00&quot; ExpirationDate=&quot;2056-12-31T00:00:00&quot; BarcodeId=&quot;16&quot;/&gt;&lt;/Cards&gt;&lt;MemberAttributes&gt;&lt;Attribute Id=&quot;2400&quot; Value=&quot;0123786&quot; DataType=&quot;String&quot;/&gt;&lt;/MemberAttributes&gt;&lt;MemberAdditionalAddress Country=&quot;0&quot; State=&quot;0&quot; City=&quot;&quot; Street1=&quot;&quot; Street2=&quot;&quot; PostalCode=&quot;&quot; Remarks=&quot;&quot;/&gt;&lt;PrivacySettings OptInConsent=&quot;false&quot;/&gt;&lt;/Member&gt;&lt;/Members&gt;&lt;/HouseHold&gt;]]&gt;&#xd;
         &lt;/hql:in_HouseHold&gt;&#xd;
      &lt;/hql:SaveDemographic&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Extract MemberInternalKey,BuyingUnitInternalKey" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select MemberInternalKey, BuyingUnitInternalKey  from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${CardID_1}&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">MemberInternalKey, BuyingUnitInternalKey</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Barcode1, DocumentId, Prefix " enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--RedemptionSegmentation = &apos;1&apos; for samehousehold
--RedemptionSegmentation = &apos;2&apos; for any customer

Declare @matrixmemberid varchar(50)
declare @BarcodeId int
declare @DocumentId int
declare @Value varchar(50)

set @matrixmemberid = (select MatrixMemberId from [${MPDBName}].[dbo].[RetailerCode] where RetailerID= &apos;${RetailerID}&apos;)

select top 1 @Value = btl.Value, @BarcodeId = btl.BarcodeId, @DocumentId = ld.businessid from CRM_LoyaltyDocuments ld
inner join [${PromotionDBName}].dbo.BarcodeTemplateLine btl
on ld.Matrixmemberid= btl.Matrixmemberid and btl.AttributeId=1 and ld.BarcodeId = btl.BarcodeId and ld.BusinessId is NOT NULL and ld.Barcode like &apos;&apos;+ (btl.[Value])+&apos;%&apos;
where ld.matrixmemberid = @matrixmemberid and btl.BarCodeId in (select BarCodeId from [Promotion_LMS_1].dbo.BarcodeTemplateHeader where RedemptionSegmentation = &apos;2&apos; and matrixMemberId=@matrixmemberid)
ORDER BY newid()

select @matrixmemberid as matrixmemberid, @BarcodeId as BarcodeId, @DocumentId as DocumentId, @Value as Value, (select max(cast(Barcode as decimal(38,0))) from CRM_LoyaltyDocuments where matrixmemberid= @matrixmemberid and BarcodeId= @BarcodeId and BusinessId= @DocumentId
and Barcode like (@Value)+&apos;%&apos;)+1 as Barcode</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">MatrixMemberid1,BarcodeId1,DocumentId1,Prefix1,Barcode1</stringProp>
          <stringProp name="resultVariable">resultSet1</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-MSG3_4_5 " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:tem=&quot;http://tempuri.org/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;tem:StoreData&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;tem:messageHandlerApplication&gt;StoreInLoyalty&lt;/tem:messageHandlerApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;tem:chain&gt;${RetailerID}&lt;/tem:chain&gt;                                                                                &#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;tem:branch&gt;1&lt;/tem:branch&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;tem:messageData&gt;&lt;![CDATA[&lt;?xml version=&quot;1.0&quot;?&gt;&#xd;
&lt;Root&gt;&#xd;
	&lt;Customer MsgType=&quot;3&quot; LPEVer=&quot;5.0.0.0.1&quot; StoreID=&quot;1&quot; PosID=&quot;1&quot; TransID=&quot;${transID}&quot; BusinessDate=&quot;${CurrDate}&quot; StartDateTime=&quot;${CurrDate}T13:41:22.000&quot; CashierID=&quot;1&quot; TicketTotal=&quot;100.00&quot; HomeStore=&quot;0&quot; FileSource=&quot;1&quot;&gt;&#xd;
		&lt;LoyaltyInfo CardID=&quot;${CardID_1}&quot; ServerDate=&quot;${CurrDate}&quot; MemberEffectiveDate=&quot;${CurrDate}T10:37:00&quot;&gt;&#xd;
			&lt;Accounts&gt;&#xd;
				&lt;Acc ID=&quot;${AccountID}&quot; EarnValue=&quot;1.0000&quot;/&gt;&#xd;
			&lt;/Accounts&gt;&#xd;
		&lt;/LoyaltyInfo&gt;&#xd;
	&lt;/Customer&gt;&#xd;
	&lt;Documents MsgType=&quot;4&quot; LPEVer=&quot;5.0.0.0.1&quot; StoreID=&quot;1&quot; BusinessDate=&quot;${CurrDate}&quot; TillId=&quot;1&quot; TransactionNumber=&quot;${transID}&quot; ExternalReferenceId=&quot;${transID}&quot; StartDateTime=&quot;${CurrDate}T13:41:22.000&quot; EndDateTime=&quot;2056-12-12T13:41:23.000&quot; CashierId=&quot;1&quot; TicketTotal=&quot;100.00&quot;&gt;&#xd;
		&lt;CustomerInfo&gt;&#xd;
			&lt;ClubCard&gt;${CardID_1}&lt;/ClubCard&gt;&#xd;
			&lt;HomeStore&gt;0&lt;/HomeStore&gt;&#xd;
		&lt;/CustomerInfo&gt;		&#xd;
		&lt;Document&gt;&#xd;
			&lt;Details&gt;&#xd;
				&lt;Action&gt;0&lt;/Action&gt;&#xd;
				&lt;Barcode&gt;${Barcode1_1}&lt;/Barcode&gt;&#xd;
				&lt;ID&gt;${DocumentId1_1}&lt;/ID&gt;&#xd;
				&lt;BarcodeProgrammingId&gt;${BarcodeId1_1}&lt;/BarcodeProgrammingId&gt;&#xd;
				&lt;IsUnique&gt;0&lt;/IsUnique&gt;&#xd;
				&lt;TriggerPromotionId&gt;55&lt;/TriggerPromotionId&gt;&#xd;
				&lt;Value&gt;1.00&lt;/Value&gt;&#xd;
				&lt;Qty&gt;1&lt;/Qty&gt;&#xd;
				&lt;TenderGroup&gt;1&lt;/TenderGroup&gt;&#xd;
				&lt;Type&gt;3&lt;/Type&gt;&#xd;
			&lt;/Details&gt;&#xd;
			&lt;ValidationRules&gt;&#xd;
				&lt;StartDate&gt;${CurrDate}&lt;/StartDate&gt;&#xd;
				&lt;EndDate&gt;2056-12-12&lt;/EndDate&gt;&#xd;
				&lt;RedemptionType&gt;1&lt;/RedemptionType&gt;&#xd;
				&lt;RedemptionLocation&gt;2&lt;/RedemptionLocation&gt;&#xd;
				&lt;RedemptionMode&gt;2&lt;/RedemptionMode&gt;&#xd;
			&lt;/ValidationRules&gt;&#xd;
		&lt;/Document&gt;&#xd;
	&lt;/Documents&gt;&#xd;
	&lt;biztalk_1&gt;&#xd;
		&lt;body&gt;&#xd;
			&lt;ActiveStore_SalesTransaction_1.70&gt;&#xd;
				&lt;StoreID&gt;1&lt;/StoreID&gt;&#xd;
				&lt;BusinessDate&gt;${CurrDate}&lt;/BusinessDate&gt;&#xd;
				&lt;ServerDate/&gt;&#xd;
				&lt;TransactionNumber&gt;${transID}&lt;/TransactionNumber&gt;&#xd;
				&lt;ExternalReferenceId&gt;${transID}&lt;/ExternalReferenceId&gt;&#xd;
				&lt;TillID&gt;1&lt;/TillID&gt;&#xd;
				&lt;StartDateTime&gt;${CurrDate}T13:41:22.000&lt;/StartDateTime&gt;&#xd;
				&lt;EndDateTime&gt;2056-12-12T13:41:23.000&lt;/EndDateTime&gt;&#xd;
				&lt;CashierID&gt;1&lt;/CashierID&gt;&#xd;
				&lt;OfflineFlag&gt;0&lt;/OfflineFlag&gt;&#xd;
				&lt;RetroactiveFlag&gt;0&lt;/RetroactiveFlag&gt;&#xd;
				&lt;Total&gt;&#xd;
					&lt;TotalAmount&gt;100.00&lt;/TotalAmount&gt;&#xd;
				&lt;/Total&gt;&#xd;
				&lt;TransactionDetail&gt;&#xd;
					&lt;SequenceNumber&gt;1&lt;/SequenceNumber&gt;&#xd;
					&lt;TransactionDetailGroup&gt;&#xd;
						&lt;TransactionDetailLine&gt;&#xd;
							&lt;TimingType&gt;3&lt;/TimingType&gt;&#xd;
							&lt;DeferredID&gt;0&lt;/DeferredID&gt;&#xd;
							&lt;Amount&gt;1.000000&lt;/Amount&gt;&#xd;
							&lt;PromotionID&gt;55&lt;/PromotionID&gt;&#xd;
							&lt;MarkdownItemID&gt;4560&lt;/MarkdownItemID&gt;&#xd;
							&lt;MarkdownDepartmentID&gt;2&lt;/MarkdownDepartmentID&gt;&#xd;
							&lt;AllocatedQty&gt;2&lt;/AllocatedQty&gt;&#xd;
							&lt;TriggeredQty&gt;2&lt;/TriggeredQty&gt;&#xd;
							&lt;RedeemedQty&gt;1&lt;/RedeemedQty&gt;&#xd;
							&lt;RewardAmount&gt;100&lt;/RewardAmount&gt;&#xd;
							&lt;TransactionDetailLineTax&gt;&#xd;
								&lt;TaxId&gt;1&lt;/TaxId&gt;&#xd;
								&lt;TaxAmount&gt;0&lt;/TaxAmount&gt;&#xd;
								&lt;TaxableAmount&gt;0&lt;/TaxableAmount&gt;&#xd;
								&lt;TaxPercent&gt;0&lt;/TaxPercent&gt;&#xd;
							&lt;/TransactionDetailLineTax&gt;&#xd;
						&lt;/TransactionDetailLine&gt;&#xd;
					&lt;/TransactionDetailGroup&gt;&#xd;
				&lt;/TransactionDetail&gt;&#xd;
				&lt;PromotionSummary&gt;&#xd;
					&lt;RedeemedPromotionId&gt;55&lt;/RedeemedPromotionId&gt;&#xd;
					&lt;RedeemedQuantity&gt;1&lt;/RedeemedQuantity&gt;&#xd;
					&lt;RedeemedTriggerCouponId&gt;0&lt;/RedeemedTriggerCouponId&gt;&#xd;
					&lt;RedeemedTriggerCouponQty&gt;0&lt;/RedeemedTriggerCouponQty&gt;&#xd;
					&lt;AdditionalAllocatedItems&gt;&#xd;
						&lt;AdditionalAllocatedItem&gt;&#xd;
							&lt;ItemID&gt;1&lt;/ItemID&gt;&#xd;
							&lt;DepartmentID&gt;2&lt;/DepartmentID&gt;&#xd;
							&lt;AllocatedQty&gt;2&lt;/AllocatedQty&gt;&#xd;
							&lt;TriggeredQty&gt;2&lt;/TriggeredQty&gt;&#xd;
						&lt;/AdditionalAllocatedItem&gt;&#xd;
					&lt;/AdditionalAllocatedItems&gt;&#xd;
					&lt;Vouchers&gt;&#xd;
						&lt;Voucher&gt;&#xd;
							&lt;ID&gt;6041770250015&lt;/ID&gt;&#xd;
							&lt;Value&gt;0.00&lt;/Value&gt;&#xd;
							&lt;Qty&gt;1&lt;/Qty&gt;&#xd;
						&lt;/Voucher&gt;&#xd;
					&lt;/Vouchers&gt;&#xd;
				&lt;/PromotionSummary&gt;&#xd;
				&lt;CustomerInfo Rejected=&quot;0&quot;&gt;&#xd;
					&lt;ClubCard&gt;${CardID_1}&lt;/ClubCard&gt;&#xd;
					&lt;ClubId&gt;0&lt;/ClubId&gt;&#xd;
				&lt;/CustomerInfo&gt;&#xd;
			&lt;/ActiveStore_SalesTransaction_1.70&gt;&#xd;
		&lt;/body&gt;&#xd;
	&lt;/biztalk_1&gt;&#xd;
&lt;/Root&gt;]]&gt;&#xd;
         &lt;/tem:messageData&gt;&#xd;
      &lt;/tem:StoreData&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">RetalixCommGty_LMS_1/SOAP/StoreAndForwardMessageService.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Not Unique coupon</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="822800553">&lt;StoreDataResult&gt;true&lt;/StoreDataResult&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that msg3 displayed in DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

if exists(select  e.AccountId from CRM_POSTran a
inner join CRM_POSAccountsActivity b
on a.POSTranInternalKey = b.PosTranInternalKey
inner join CRM_BuyingUnitAccountsActivity c
on b.BuyingUnitInternalKey = c.BuyingUnitInternalKey
inner join CRM_MemberAccountsActivity d
on b.BuyingUnitInternalKey = d.BuyingUnitInternalKey
inner join CRM_AccumulatedAccounts e
on b.AccountInternalKey = e.AccountInternalKey
where a.ClubCardId=&apos;${CardID_1}&apos;
and a.MatrixMemberId = @matrixmemberid)
select &apos;Message 3 upload scc&apos;
else
select &apos;Message 3 NOT upload scc&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">Step4</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-57589990">Message 3 upload scc</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that msg4 displayed in DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

If exists (SELECT        CRM_LoyaltyDocuments.Barcode                     
FROM            CRM_Member INNER JOIN
                         CRM_LoyaltyDocuments ON CRM_Member.BuyingUnitInternalKey = CRM_LoyaltyDocuments.IssuedBuyingUnitInternalKey INNER JOIN
                         CRM_Clubcard ON CRM_Member.MemberInternalKey = CRM_Clubcard.MemberInternalKey
WHERE        (CRM_Clubcard.MatrixMemberId = @matrixmemberid) AND (CRM_Clubcard.ClubCardId = &apos;${CardID_1}&apos;) AND (CRM_LoyaltyDocuments.Barcode = &apos;${Barcode1_1}&apos;))
select &apos;Message 4 upload scc&apos;
else
select &apos;Message 4 NOT upload scc&apos;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">Barcode</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">Step4</stringProp>
        </JDBCSampler>
        <hashTree>
          <CompareAssertion guiclass="TestBeanGUI" testclass="CompareAssertion" testname="Compare Assertion" enabled="true">
            <boolProp name="compareContent">true</boolProp>
            <longProp name="compareTime">-1</longProp>
            <collectionProp name="stringsToSkip">
              <elementProp name="" elementType="SubstitutionElement">
                <stringProp name="regex">Barcode</stringProp>
                <stringProp name="substitute">&apos;${Barcode1_1}&apos;</stringProp>
              </elementProp>
            </collectionProp>
          </CompareAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="71492729">Message 4 upload scc</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Extract DocumentInternalKey1 for member1" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

SELECT        CRM_LoyaltyDocuments.DocumentInternalKey, CRM_Clubcard.MatrixMemberId, CRM_Clubcard.ClubCardId, CRM_LoyaltyDocuments.Barcode
FROM            CRM_Member INNER JOIN
                         CRM_LoyaltyDocuments ON CRM_Member.BuyingUnitInternalKey = CRM_LoyaltyDocuments.IssuedBuyingUnitInternalKey INNER JOIN
                         CRM_Clubcard ON CRM_Member.MemberInternalKey = CRM_Clubcard.MemberInternalKey
WHERE        (CRM_Clubcard.MatrixMemberId = @matrixmemberid) AND (CRM_Clubcard.ClubCardId = &apos;${CardID_1}&apos;) AND (CRM_LoyaltyDocuments.Barcode = &apos;${Barcode1_1}&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">DocumentInternalKey1</stringProp>
          <stringProp name="resultVariable">resultSet1</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">2000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-MSG1_2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:web=&quot;http://www.retalix.com/rema/webservices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;web:GetMemberData&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_RetailerId&gt;${RetailerID}&lt;/web:in_RetailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_XML&gt;&lt;![CDATA[&lt;Log&gt;&#xd;
         &lt;Customer xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; MsgType=&quot;1&quot; RetailerId=&quot;${RetailerID}&quot; StoreID=&quot;1&quot; ClientID=&quot;11&quot; TransID=&quot;${transID}&quot; BusinessDate=&quot;${CurrDate}&quot; LPEVer=&quot;5.0.0.0.1&quot; StartDateTime=&quot;${CurrDate}T13:41:22&quot; TicketIdentifier=&quot;1598322271&quot;&gt;&#xd;
         &lt;LoyaltyInfo CardID=&quot;${CardID_1}&quot; CardIDType=&quot;P&quot;/&gt;&#xd;
         &lt;/Customer&gt;&lt;/Log&gt;]]&gt;&lt;/web:in_XML&gt;&#xd;
      &lt;/web:GetMemberData&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/CRM/MemberServiceOnline.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">MSG1_2</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="147801392">MsgType=&quot;2&quot;</stringProp>
              <stringProp name="1896930921">CardID=&quot;${CardID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that MSG2 was updated in LoyaltyOnLine" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
declare @BarcodeId int

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

IF exists (SELECT    COUNT(btl.Barcode) AS counter
FROM            [LoyaltyOnline_LMS_1].dbo.CRM_OL_BuyingUnitData ld
INNER JOIN  [Loyalty_LMS_1].dbo.CRM_LoyaltyDocuments btl 
ON ld.BuyingUnitInternalKey = btl.IssuedBuyingUnitInternalKey
WHERE        btl.Barcode = &apos;${Barcode1_1}&apos;)
select &apos;Message 2 was updated in DB&apos;
else
select &apos;Message 2 was NOT updated in DB&apos;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">Barcode</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">verify that  MSG2 was updated in LoyaltyOnLine</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="802970262">Message 2 was updated in DB</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Back MSG7_8 with barcode" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:web=&quot;http://www.retalix.com/rema/webservices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;web:Validate&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_RetailerId&gt;${RetailerID}&lt;/web:in_RetailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_XML&gt;&lt;![CDATA[&lt;Customer MsgType=&quot;7&quot; LPEVer=&quot;5.0.0.0.1&quot; StoreID=&quot;1&quot; PosID=&quot;1&quot; TransID=&quot;${transID}&quot; BusinessDate=&quot;${CurrDate}&quot;&gt;&#xd;
         &lt;LoyaltyInfo CardID=&quot;${CardID_1}&quot; CardIDType=&quot;P&quot;&gt;&#xd;
         &lt;Documents&gt;&lt;Document DocumentBarcode=&quot;${Barcode1_1}&quot; IsUnique=&quot;0&quot; DocumentType=&quot;3&quot; RedemptionType=&quot;1&quot;/&gt;&#xd;
         &lt;/Documents&gt;&lt;/LoyaltyInfo&gt;&lt;/Customer&gt;]]&gt;&lt;/web:in_XML&gt;&#xd;
      &lt;/web:Validate&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/LoyaltyDocuments.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Barcode exist</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="147801578">MsgType=&quot;8&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">text expected return MSG 8 with document</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that Barcode exist in MSG8" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

declare @a nvarchar(128)
if exists (select top 1 a.Barcode AS Barcode_MSG8 from CRM_LoyaltyDocuments a 
inner join CRM_Clubcard b
on a.MatrixMemberId = b.MatrixMemberId
where b.ClubCardId = &apos;${CardID_1}&apos;
and a.Barcode= &apos;${Barcode1_1}&apos;
order by a.DocumentInternalKey desc)
BEGIN
set  @a =( select  top 1 a.Barcode AS Barcode_MSG8 from CRM_LoyaltyDocuments a 
inner join CRM_Clubcard b
on a.MatrixMemberId = b.MatrixMemberId
where b.ClubCardId = &apos;${CardID_1}&apos;
and a.Barcode= &apos;${Barcode1_1}&apos;
order by a.DocumentInternalKey desc)
select (&apos;Barcode &apos;+&apos;${Barcode1_1} exist in MSG8 &apos; )
END
 ELSE		
   BEGIN
     select &apos;barcode NOT exist in message8&apos;;
   END	
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">Barcode</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">Step4</stringProp>
        </JDBCSampler>
        <hashTree>
          <CompareAssertion guiclass="TestBeanGUI" testclass="CompareAssertion" testname="Compare Assertion" enabled="true">
            <boolProp name="compareContent">true</boolProp>
            <longProp name="compareTime">-1</longProp>
            <collectionProp name="stringsToSkip">
              <elementProp name="" elementType="SubstitutionElement">
                <stringProp name="regex">Barcode</stringProp>
                <stringProp name="substitute">&apos;${Barcode1_1}&apos;</stringProp>
              </elementProp>
            </collectionProp>
          </CompareAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="519353065">exist in MSG8</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Back MSG7_8 without barcode" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:web=&quot;http://www.retalix.com/rema/webservices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;web:Validate&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_RetailerId&gt;${RetailerID}&lt;/web:in_RetailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_XML&gt;&lt;![CDATA[&lt;Customer MsgType=&quot;7&quot; LPEVer=&quot;5.0.0.0.1&quot; StoreID=&quot;1&quot; PosID=&quot;1&quot; TransID=&quot;${transID}&quot; BusinessDate=&quot;${CurrDate}&quot;&gt;&#xd;
         &lt;LoyaltyInfo CardID=&quot;${CardID_1}&quot; CardIDType=&quot;P&quot;&gt;&#xd;
         &lt;Documents&gt;&lt;Document DocumentBarcode=&quot;${Barcode1_1}3&quot; IsUnique=&quot;0&quot; DocumentType=&quot;3&quot; RedemptionType=&quot;1&quot;/&gt;&#xd;
         &lt;/Documents&gt;&lt;/LoyaltyInfo&gt;&lt;/Customer&gt;]]&gt;&lt;/web:in_XML&gt;&#xd;
      &lt;/web:Validate&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/LoyaltyDocuments.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Barcode not exist</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1694104103">DocumentInternalKey</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">text expected not to contain document</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that Barcode NOT exist in MSG8" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

declare @a nvarchar(128)
if exists (select top 1 a.Barcode AS Barcode_MSG8 from CRM_LoyaltyDocuments a 
inner join CRM_Clubcard b
on a.MatrixMemberId = b.MatrixMemberId
where b.ClubCardId = &apos;${CardID_1}&apos;
and a.Barcode= &apos;${Barcode1_1}3&apos;
order by a.DocumentInternalKey desc)
BEGIN
set  @a =( select  top 1 a.Barcode AS Barcode_MSG8 from CRM_LoyaltyDocuments a 
inner join CRM_Clubcard b
on a.MatrixMemberId = b.MatrixMemberId
where b.ClubCardId = &apos;${CardID_1}&apos;
and a.Barcode= &apos;${Barcode1_1}3}&apos;
order by a.DocumentInternalKey desc)
select (&apos;Barcode &apos;+&apos;${Barcode1_1}3 &apos;+@a +&apos; NOT exist in MSG8 &apos; )
END
 ELSE		
   BEGIN
     select &apos;barcode NOT exist in message 8&apos;;
   END	
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">Barcode</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">Step4</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-939593254">barcode NOT exist in message 8</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Barcode2, DocumentId, Prefix " enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--RedemptionSegmentation = &apos;1&apos; for samehousehold
--RedemptionSegmentation = &apos;2&apos; for any customer

Declare @matrixmemberid varchar(50)
declare @BarcodeId int
declare @DocumentId int
declare @Value varchar(50)

set @matrixmemberid = (select MatrixMemberId from [${MPDBName}].[dbo].[RetailerCode] where RetailerID= &apos;${RetailerID}&apos;)

select top 1 @Value = btl.Value, @BarcodeId = btl.BarcodeId, @DocumentId = ld.businessid from CRM_LoyaltyDocuments ld
inner join [${PromotionDBName}].dbo.BarcodeTemplateLine btl
on ld.Matrixmemberid= btl.Matrixmemberid and btl.AttributeId=1 and ld.BarcodeId = btl.BarcodeId and ld.BusinessId is NOT NULL and ld.Barcode like &apos;&apos;+ (btl.[Value])+&apos;%&apos;
where ld.matrixmemberid = @matrixmemberid and btl.BarCodeId in (select BarCodeId from [Promotion_LMS_1].dbo.BarcodeTemplateHeader where RedemptionSegmentation = &apos;2&apos; and matrixMemberId=@matrixmemberid)
ORDER BY newid()

select @matrixmemberid as matrixmemberid, @BarcodeId as BarcodeId, @DocumentId as DocumentId, @Value as Value, (select max(cast(Barcode as decimal(38,0))) from CRM_LoyaltyDocuments where matrixmemberid= @matrixmemberid and BarcodeId= @BarcodeId and BusinessId= @DocumentId
and Barcode like (@Value)+&apos;%&apos;)+1 as Barcode</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">MatrixMemberid1,BarcodeId1,DocumentId1,Prefix1,Barcode2</stringProp>
          <stringProp name="resultVariable">resultSet1</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-MSG4 without CardID" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:tem=&quot;http://tempuri.org/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;tem:StoreData&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;tem:messageHandlerApplication&gt;StoreInLoyalty&lt;/tem:messageHandlerApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;tem:chain&gt;${RetailerID}&lt;/tem:chain&gt;                                                                                &#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;tem:branch&gt;1&lt;/tem:branch&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;tem:messageData&gt;&lt;![CDATA[&lt;?xml version=&quot;1.0&quot;?&gt;&#xd;
&lt;Root&gt;	&#xd;
	&lt;Documents MsgType=&quot;4&quot; LPEVer=&quot;5.0.0.0.1&quot; StoreID=&quot;1&quot; BusinessDate=&quot;${CurrDate}&quot; TillId=&quot;1&quot; TransactionNumber=&quot;${transID1}&quot; ExternalReferenceId=&quot;${transID}&quot; StartDateTime=&quot;${CurrDate}T13:41:22.000&quot; EndDateTime=&quot;2056-12-12T13:41:23.000&quot; CashierId=&quot;1&quot; TicketTotal=&quot;100.00&quot;&gt;				&#xd;
		&lt;Document&gt;&#xd;
			&lt;Details&gt;&#xd;
				&lt;Action&gt;0&lt;/Action&gt;&#xd;
				&lt;Barcode&gt;${Barcode2_1}&lt;/Barcode&gt;&#xd;
				&lt;ID&gt;${DocumentId1_1}&lt;/ID&gt;&#xd;
				&lt;BarcodeProgrammingId&gt;${BarcodeId1_1}&lt;/BarcodeProgrammingId&gt;&#xd;
				&lt;IsUnique&gt;1&lt;/IsUnique&gt;&#xd;
				&lt;TriggerPromotionId&gt;55&lt;/TriggerPromotionId&gt;&#xd;
				&lt;Value&gt;1.00&lt;/Value&gt;&#xd;
				&lt;Qty&gt;1&lt;/Qty&gt;&#xd;
				&lt;TenderGroup&gt;1&lt;/TenderGroup&gt;&#xd;
				&lt;Type&gt;3&lt;/Type&gt;&#xd;
			&lt;/Details&gt;&#xd;
			&lt;ValidationRules&gt;&#xd;
				&lt;StartDate&gt;${CurrDate}&lt;/StartDate&gt;&#xd;
				&lt;EndDate&gt;2056-12-12&lt;/EndDate&gt;&#xd;
				&lt;RedemptionType&gt;2&lt;/RedemptionType&gt;&#xd;
				&lt;RedemptionLocation&gt;2&lt;/RedemptionLocation&gt;&#xd;
				&lt;RedemptionMode&gt;2&lt;/RedemptionMode&gt;&#xd;
			&lt;/ValidationRules&gt;&#xd;
		&lt;/Document&gt;&#xd;
	&lt;/Documents&gt;	&#xd;
&lt;/Root&gt;]]&gt;&#xd;
         &lt;/tem:messageData&gt;&#xd;
      &lt;/tem:StoreData&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">RetalixCommGty_LMS_1/SOAP/StoreAndForwardMessageService.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Unique coupon</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="822800553">&lt;StoreDataResult&gt;true&lt;/StoreDataResult&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">2000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - CardID=-1" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

SELECT CRM_Clubcard.ClubCardId, CRM_LoyaltyDocuments.Barcode
FROM  CRM_Clubcard INNER JOIN
      CRM_LoyaltyDocuments ON CRM_Clubcard.ClubInternalKey = CRM_LoyaltyDocuments.ClubInternalKey
WHERE  (CRM_LoyaltyDocuments.matrixmemberid = @matrixmemberid) AND (CRM_Clubcard.ClubCardId = &apos;-1&apos;) AND (CRM_LoyaltyDocuments.Barcode = &apos;${Barcode2_1}&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ClubCardId2</stringProp>
          <stringProp name="resultVariable">resultSet2</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">verify that   unique coupon was loaded to card -1 </stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ClubCardId2</stringProp>
            <stringProp name="RegexExtractor.regex">ClubCardId2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ClubCardId2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1444">-1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">unique coupon was loaded to card -1 </stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">2000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-MSG7_8 with CardID=-1" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:web=&quot;http://www.retalix.com/rema/webservices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;web:Validate&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_RetailerId&gt;${RetailerID}&lt;/web:in_RetailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_XML&gt;&lt;![CDATA[&lt;Customer MsgType=&quot;7&quot; LPEVer=&quot;5.0.0.0.1&quot; StoreID=&quot;1&quot; PosID=&quot;1&quot; TransID=&quot;${transID1}&quot; BusinessDate=&quot;${CurrDate}&quot;&gt;&#xd;
         &lt;LoyaltyInfo CardID=&quot;-1&quot; CardIDType=&quot;P&quot;&gt;&#xd;
         &lt;Documents&gt;&lt;Document DocumentBarcode=&quot;${Barcode2_1}&quot; IsUnique=&quot;1&quot; DocumentType=&quot;3&quot; RedemptionType=&quot;2&quot;/&gt;&#xd;
         &lt;/Documents&gt;&lt;/LoyaltyInfo&gt;&lt;/Customer&gt;]]&gt;&lt;/web:in_XML&gt;&#xd;
      &lt;/web:Validate&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/LoyaltyDocuments.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">MSG7_8</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="147801578">MsgType=&quot;8&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">text expected return MSG 8 with document</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that Barcode exist in MSG8 wit cardid=-1" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

declare @a nvarchar(128)
if exists (select top 1 a.Barcode AS Barcode_MSG8 from CRM_LoyaltyDocuments a 
inner join CRM_Clubcard b
on a.MatrixMemberId = b.MatrixMemberId
where b.ClubCardId = &apos;-1&apos;
and a.Barcode= &apos;${Barcode2_1}&apos;
order by a.DocumentInternalKey desc)
BEGIN
set  @a =( select  top 1 a.Barcode AS Barcode_MSG8 from CRM_LoyaltyDocuments a 
inner join CRM_Clubcard b
on a.MatrixMemberId = b.MatrixMemberId
where b.ClubCardId = &apos;-1&apos;
and a.Barcode= &apos;${Barcode2_1}&apos;
order by a.DocumentInternalKey desc)
select (&apos;Barcode &apos;+&apos;${Barcode2_1} exist in MSG8 with Cardid=-1&apos; )
END
 ELSE		
   BEGIN
     select &apos;barcode NOT exist in message8 with Cardid=-1&apos;;
   END	
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">Barcode</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">Step4</stringProp>
        </JDBCSampler>
        <hashTree>
          <CompareAssertion guiclass="TestBeanGUI" testclass="CompareAssertion" testname="Compare Assertion" enabled="true">
            <boolProp name="compareContent">true</boolProp>
            <longProp name="compareTime">-1</longProp>
            <collectionProp name="stringsToSkip">
              <elementProp name="" elementType="SubstitutionElement">
                <stringProp name="regex">Barcode</stringProp>
                <stringProp name="substitute">&apos;${Barcode2_1}&apos;</stringProp>
              </elementProp>
            </collectionProp>
          </CompareAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1305046451">exist in MSG8 with Cardid=-1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - New card2" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
declare @BarcodeId int
declare @Value nvarchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

select top 1 @Value = btl.Value, @BarcodeId = btl.BarcodeId 
from CRM_ClubCard cc
inner join [Promotion_LMS_1].dbo.BarcodeTemplateLine btl
on cc.Matrixmemberid= btl.Matrixmemberid and btl.AttributeId=1 and cc.BarcodeId = btl.BarcodeId and cc.ClubCardId like &apos;&apos;+ (btl.[Value])+&apos;%&apos;
where cc.matrixmemberid = @matrixmemberid 
ORDER BY newid()

select  (select  max(cast(ClubCardId as numeric)) from CRM_ClubCard where matrixmemberid = @matrixmemberid and BarcodeId=@BarcodeId and ClubCardId like &apos;&apos;+ (@Value)+&apos;%&apos;)+1 as CardID2


</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">CardID2, MatrixMemberid</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - Create Member2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:SaveDemographic&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_ClubCardId&gt;${CardID2_1}&lt;/hql:in_ClubCardId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_HouseHold&gt;&lt;![CDATA[&lt;HouseHold BuyingUnitInternalKey=&quot;0&quot; Country=&quot;100&quot; State=&quot;0&quot; City=&quot;&quot; Street1=&quot;&quot; Street2=&quot;&quot; PostalCode=&quot;&quot; PhonePrefix=&quot;+1&quot; HomePhone=&quot;9160962222&quot; SendEmail=&quot;false&quot; County=&quot;&quot; HouseName=&quot;&quot;&gt;&lt;Members&gt;&lt;Member MemberInternalKey=&quot;0&quot; IsMainMember=&quot;true&quot; LastName=&quot;jmeter2&quot; FirstName=&quot;new2&quot; AdditionalFirstName=&quot;&quot; AdditionalLastName=&quot;&quot; MiddleInitial=&quot;&quot; DriversLicense=&quot;&quot; NationalInsuranceNumber=&quot;&quot; Remarks=&quot;&quot; MobilePhoneNumber=&quot;99859912222&quot; WorkPhoneNumber=&quot;&quot; Gender=&quot;0&quot; Passport=&quot;&quot; StartDate=&quot;${today}T00:00:00&quot; RedemptionPrivileges=&quot;0&quot; LanguageId=&quot;0&quot; PostOption=&quot;1&quot; NumberOfFamilyMembers=&quot;1&quot; Anonimity=&quot;0&quot; SpouseLastName=&quot;&quot; MemberStatus=&quot;1&quot; ReceiptLayoutId=&quot;0&quot; AdressNormalizationUpdate=&quot;N&quot; UpdatedDate=&quot;${today}T00:00:00&quot; CompanyName=&quot;&quot; EMailAddress=&quot;&quot; ProcessingPrevention=&quot;false&quot; ReceiptType=&quot;0&quot;&gt;&lt;Cards&gt;&lt;Card Id=&quot;${CardID2_1}&quot; CardStatus=&quot;1&quot; IssueDate=&quot;${today}T00:00:00&quot; ExpirationDate=&quot;2056-12-31T00:00:00&quot; BarcodeId=&quot;16&quot;/&gt;&lt;/Cards&gt;&lt;MemberAttributes&gt;&lt;Attribute Id=&quot;2400&quot; Value=&quot;0123786&quot; DataType=&quot;String&quot;/&gt;&lt;/MemberAttributes&gt;&lt;MemberAdditionalAddress Country=&quot;0&quot; State=&quot;0&quot; City=&quot;&quot; Street1=&quot;&quot; Street2=&quot;&quot; PostalCode=&quot;&quot; Remarks=&quot;&quot;/&gt;&lt;PrivacySettings OptInConsent=&quot;false&quot;/&gt;&lt;/Member&gt;&lt;/Members&gt;&lt;/HouseHold&gt;]]&gt;&#xd;
         &lt;/hql:in_HouseHold&gt;&#xd;
      &lt;/hql:SaveDemographic&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Extract MemberInternalKey,BuyingUnitInternalKey" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select MemberInternalKey, BuyingUnitInternalKey  from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${CardID2_1}&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">MemberInternalKey, BuyingUnitInternalKey</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - MergeMembers" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:MergeHouseHold&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_SourceMemberClubCardId&gt;${CardID_1}&lt;/hql:in_SourceMemberClubCardId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_TargetMemberClubCardId&gt;${CardID2_1}&lt;/hql:in_TargetMemberClubCardId&gt;&#xd;
      &lt;/hql:MergeHouseHold&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that members was merged" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

if exists (select * from CRM_BuyingUnitHistory 
           where SourceClubCardId = &apos;${CardID_1}&apos; and TargetClubCardId=&apos;${CardID2_1}&apos;)
select &apos;members was merged&apos;
else
select &apos;members was NOT merged&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">Step4</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="490614186">members was merged</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-MSG7_8 for Member2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:web=&quot;http://www.retalix.com/rema/webservices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;web:Validate&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_RetailerId&gt;${RetailerID}&lt;/web:in_RetailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_XML&gt;&lt;![CDATA[&lt;Customer MsgType=&quot;7&quot; LPEVer=&quot;5.0.0.0.1&quot; StoreID=&quot;1&quot; PosID=&quot;1&quot; TransID=&quot;${transID}&quot; BusinessDate=&quot;${CurrDate}&quot;&gt;&#xd;
         &lt;LoyaltyInfo CardID=&quot;${CardID2_1}&quot; CardIDType=&quot;P&quot;&gt;&#xd;
         &lt;Documents&gt;&lt;Document DocumentBarcode=&quot;${Barcode1_1}&quot; IsUnique=&quot;0&quot; DocumentType=&quot;3&quot; RedemptionType=&quot;1&quot;/&gt;&#xd;
         &lt;/Documents&gt;&lt;/LoyaltyInfo&gt;&lt;/Customer&gt;]]&gt;&lt;/web:in_XML&gt;&#xd;
      &lt;/web:Validate&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/LoyaltyDocuments.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">MSG7_8</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="37642339">${Barcode1_1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">text expected return MSG 8 with document = Barcode1 from member1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that Barcode exist in MSG8 for member2 after merge" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

declare @a nvarchar(128)
if exists (select top 1 a.Barcode AS Barcode_MSG8 from CRM_LoyaltyDocuments a 
inner join CRM_Clubcard b
on a.MatrixMemberId = b.MatrixMemberId
where b.ClubCardId = &apos;${CardID2_1}&apos;
and a.Barcode= &apos;${Barcode1_1}&apos;
order by a.DocumentInternalKey desc)
BEGIN
set  @a =( select  top 1 a.Barcode AS Barcode_MSG8 from CRM_LoyaltyDocuments a 
inner join CRM_Clubcard b
on a.MatrixMemberId = b.MatrixMemberId
where b.ClubCardId = &apos;${CardID2_1}&apos;
and a.Barcode= &apos;${Barcode1_1}&apos;
order by a.DocumentInternalKey desc)
select (&apos;Barcode &apos;+&apos;${Barcode1_1} exist in MSG8 for member2&apos; )
END
 ELSE		
   BEGIN
     select &apos;barcode NOT exist in MSG8 for member2&apos;;
   END	
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">Barcode</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">Step4</stringProp>
        </JDBCSampler>
        <hashTree>
          <CompareAssertion guiclass="TestBeanGUI" testclass="CompareAssertion" testname="Compare Assertion" enabled="true">
            <boolProp name="compareContent">true</boolProp>
            <longProp name="compareTime">-1</longProp>
            <collectionProp name="stringsToSkip">
              <elementProp name="" elementType="SubstitutionElement">
                <stringProp name="regex">Barcode</stringProp>
                <stringProp name="substitute">&apos;${Barcode1_1}&apos;</stringProp>
              </elementProp>
            </collectionProp>
          </CompareAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="519353065">exist in MSG8</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - New card3" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
declare @BarcodeId int
declare @Value nvarchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

select top 1 @Value = btl.Value, @BarcodeId = btl.BarcodeId 
from CRM_ClubCard cc
inner join [Promotion_LMS_1].dbo.BarcodeTemplateLine btl
on cc.Matrixmemberid= btl.Matrixmemberid and btl.AttributeId=1 and cc.BarcodeId = btl.BarcodeId and cc.ClubCardId like &apos;&apos;+ (btl.[Value])+&apos;%&apos;
where cc.matrixmemberid = @matrixmemberid 
ORDER BY newid()

select  (select  max(cast(ClubCardId as numeric)) from CRM_ClubCard where matrixmemberid = @matrixmemberid and BarcodeId=@BarcodeId and ClubCardId like &apos;&apos;+ (@Value)+&apos;%&apos;)+1 as CardID3


</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">CardID3, MatrixMemberid</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - Create Member3" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:SaveDemographic&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_ClubCardId&gt;${CardID3_1}&lt;/hql:in_ClubCardId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_HouseHold&gt;&lt;![CDATA[&lt;HouseHold BuyingUnitInternalKey=&quot;0&quot; Country=&quot;100&quot; State=&quot;0&quot; City=&quot;&quot; Street1=&quot;&quot; Street2=&quot;&quot; PostalCode=&quot;&quot; PhonePrefix=&quot;+1&quot; HomePhone=&quot;9160962222&quot; SendEmail=&quot;false&quot; County=&quot;&quot; HouseName=&quot;&quot;&gt;&lt;Members&gt;&lt;Member MemberInternalKey=&quot;0&quot; IsMainMember=&quot;true&quot; LastName=&quot;jmeter3&quot; FirstName=&quot;new3&quot; AdditionalFirstName=&quot;&quot; AdditionalLastName=&quot;&quot; MiddleInitial=&quot;&quot; DriversLicense=&quot;&quot; NationalInsuranceNumber=&quot;&quot; Remarks=&quot;&quot; MobilePhoneNumber=&quot;99859912222&quot; WorkPhoneNumber=&quot;&quot; Gender=&quot;0&quot; Passport=&quot;&quot; StartDate=&quot;${today}T00:00:00&quot; RedemptionPrivileges=&quot;0&quot; LanguageId=&quot;0&quot; PostOption=&quot;1&quot; NumberOfFamilyMembers=&quot;1&quot; Anonimity=&quot;0&quot; SpouseLastName=&quot;&quot; MemberStatus=&quot;1&quot; ReceiptLayoutId=&quot;0&quot; AdressNormalizationUpdate=&quot;N&quot; UpdatedDate=&quot;${today}T00:00:00&quot; CompanyName=&quot;&quot; EMailAddress=&quot;&quot; ProcessingPrevention=&quot;false&quot; ReceiptType=&quot;0&quot;&gt;&lt;Cards&gt;&lt;Card Id=&quot;${CardID3_1}&quot; CardStatus=&quot;1&quot; IssueDate=&quot;${today}T00:00:00&quot; ExpirationDate=&quot;2056-12-31T00:00:00&quot; BarcodeId=&quot;16&quot;/&gt;&lt;/Cards&gt;&lt;MemberAttributes&gt;&lt;Attribute Id=&quot;2400&quot; Value=&quot;0123786&quot; DataType=&quot;String&quot;/&gt;&lt;/MemberAttributes&gt;&lt;MemberAdditionalAddress Country=&quot;0&quot; State=&quot;0&quot; City=&quot;&quot; Street1=&quot;&quot; Street2=&quot;&quot; PostalCode=&quot;&quot; Remarks=&quot;&quot;/&gt;&lt;PrivacySettings OptInConsent=&quot;false&quot;/&gt;&lt;/Member&gt;&lt;/Members&gt;&lt;/HouseHold&gt;]]&gt;&#xd;
         &lt;/hql:in_HouseHold&gt;&#xd;
      &lt;/hql:SaveDemographic&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Extract MemberInternalKey,BuyingUnitInternalKey" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select MemberInternalKey, BuyingUnitInternalKey  from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${CardID3_1}&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">MemberInternalKey, BuyingUnitInternalKey</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-MSG7_8 for Member3 that is not part of the HouseHold" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:web=&quot;http://www.retalix.com/rema/webservices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;web:Validate&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_RetailerId&gt;${RetailerID}&lt;/web:in_RetailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_XML&gt;&lt;![CDATA[&lt;Customer MsgType=&quot;7&quot; LPEVer=&quot;5.0.0.0.1&quot; StoreID=&quot;1&quot; PosID=&quot;1&quot; TransID=&quot;${transID}&quot; BusinessDate=&quot;${CurrDate}&quot;&gt;&#xd;
         &lt;LoyaltyInfo CardID=&quot;${CardID3_1}&quot; CardIDType=&quot;P&quot;&gt;&#xd;
         &lt;Documents&gt;&lt;Document DocumentBarcode=&quot;${Barcode1_1}&quot; IsUnique=&quot;0&quot; DocumentType=&quot;3&quot; RedemptionType=&quot;1&quot;/&gt;&#xd;
         &lt;/Documents&gt;&lt;/LoyaltyInfo&gt;&lt;/Customer&gt;]]&gt;&lt;/web:in_XML&gt;&#xd;
      &lt;/web:Validate&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/LoyaltyDocuments.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">MSG7_8</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1694104103">DocumentInternalKey</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="TestPlan.comments">text expected not to contain document</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Redeem MSG4 for member1" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:tem=&quot;http://tempuri.org/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;tem:StoreData&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;tem:messageHandlerApplication&gt;StoreInLoyalty&lt;/tem:messageHandlerApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;tem:chain&gt;${RetailerID}&lt;/tem:chain&gt;                                                                                &#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;tem:branch&gt;1&lt;/tem:branch&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;tem:messageData&gt;&lt;![CDATA[&lt;?xml version=&quot;1.0&quot;?&gt;&#xd;
&lt;Root&gt;&#xd;
	&lt;Customer MsgType=&quot;3&quot; LPEVer=&quot;5.0.0.0.1&quot; StoreID=&quot;1&quot; PosID=&quot;1&quot; TransID=&quot;${transID2}&quot; BusinessDate=&quot;${CurrDate}&quot; StartDateTime=&quot;${CurrDate}T13:41:22.000&quot; CashierID=&quot;1&quot; TicketTotal=&quot;100.00&quot; HomeStore=&quot;0&quot; FileSource=&quot;1&quot;&gt;&#xd;
		&lt;LoyaltyInfo CardID=&quot;${CardID_1}&quot; ServerDate=&quot;${CurrDate}&quot; MemberEffectiveDate=&quot;${CurrDate}T10:37:00&quot;&gt;&#xd;
			&lt;Accounts&gt;&#xd;
				&lt;Acc ID=&quot;1&quot; EarnValue=&quot;3.0000&quot;/&gt;&#xd;
			&lt;/Accounts&gt;&#xd;
		&lt;/LoyaltyInfo&gt;&#xd;
	&lt;/Customer&gt;&#xd;
	&lt;Documents MsgType=&quot;4&quot; LPEVer=&quot;5.0.0.0.1&quot; StoreID=&quot;1&quot; BusinessDate=&quot;${CurrDate}&quot; TillId=&quot;1&quot; TransactionNumber=&quot;${transID2}&quot; ExternalReferenceId=&quot;${transID2}&quot; StartDateTime=&quot;${CurrDate}T13:41:22.000&quot; EndDateTime=&quot;2056-12-12T13:41:23.000&quot; CashierId=&quot;1&quot; TicketTotal=&quot;100.00&quot;&gt;&#xd;
		&lt;CustomerInfo&gt;&#xd;
			&lt;ClubCard&gt;${CardID_1}&lt;/ClubCard&gt;&#xd;
			&lt;HomeStore&gt;0&lt;/HomeStore&gt;&#xd;
		&lt;/CustomerInfo&gt;		&#xd;
		&lt;Document&gt;&#xd;
			&lt;Details&gt;&#xd;
			&lt;DocumentInternalKey&gt;${DocumentInternalKey1_1}&lt;/DocumentInternalKey&gt;&#xd;
				&lt;Action&gt;1&lt;/Action&gt;&#xd;
				&lt;Barcode&gt;${Barcode1_1}&lt;/Barcode&gt;&#xd;
				&lt;ID&gt;${DocumentId1_1}&lt;/ID&gt;&#xd;
				&lt;BarcodeProgrammingId&gt;${BarcodeId1_1}&lt;/BarcodeProgrammingId&gt;&#xd;
				&lt;IsUnique&gt;1&lt;/IsUnique&gt;&#xd;
				&lt;TriggerPromotionId&gt;55&lt;/TriggerPromotionId&gt;&#xd;
				&lt;Value&gt;1.00&lt;/Value&gt;&#xd;
				&lt;Qty&gt;1&lt;/Qty&gt;&#xd;
				&lt;TenderGroup&gt;1&lt;/TenderGroup&gt;&#xd;
				&lt;Type&gt;3&lt;/Type&gt;&#xd;
			&lt;/Details&gt;&#xd;
			&lt;ValidationRules&gt;&#xd;
				&lt;StartDate&gt;${CurrDate}&lt;/StartDate&gt;&#xd;
				&lt;EndDate&gt;2056-12-12&lt;/EndDate&gt;&#xd;
				&lt;RedemptionType&gt;2&lt;/RedemptionType&gt;&#xd;
				&lt;RedemptionLocation&gt;2&lt;/RedemptionLocation&gt;&#xd;
				&lt;RedemptionMode&gt;2&lt;/RedemptionMode&gt;&#xd;
			&lt;/ValidationRules&gt;&#xd;
		&lt;/Document&gt;&#xd;
	&lt;/Documents&gt;	&#xd;
&lt;/Root&gt;]]&gt;&#xd;
         &lt;/tem:messageData&gt;&#xd;
      &lt;/tem:StoreData&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">RetalixCommGty_LMS_1/SOAP/StoreAndForwardMessageService.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Redeem</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="822800553">&lt;StoreDataResult&gt;true&lt;/StoreDataResult&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">2000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Msg4 redeem for member1" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

SELECT        CRM_Clubcard.MatrixMemberId, CRM_Clubcard.ClubCardId, CRM_LoyaltyDocuments.DocumentInternalKey, CRM_LoyaltyDocuments.Barcode, CRM_LoyaltyDocuments.Status                     
FROM            CRM_Member INNER JOIN
                         CRM_LoyaltyDocuments ON CRM_Member.BuyingUnitInternalKey = CRM_LoyaltyDocuments.IssuedBuyingUnitInternalKey INNER JOIN
                         CRM_Clubcard ON CRM_Member.MemberInternalKey = CRM_Clubcard.MemberInternalKey
WHERE        (CRM_Clubcard.MatrixMemberId = @matrixmemberid) AND (CRM_Clubcard.ClubCardId = &apos;${CardID_1}&apos;) AND (CRM_LoyaltyDocuments.Barcode = &apos;${Barcode1_1}&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">verify that  status=1</stringProp>
        </JDBCSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">2000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Status redeem" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

select Status from CRM_LoyaltyDocuments
where Barcode=&apos;${Barcode1_1}&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">Status</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">verify that  status=1</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Status</stringProp>
            <stringProp name="RegexExtractor.regex">Status</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${Status}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-MSG1_2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:web=&quot;http://www.retalix.com/rema/webservices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;web:GetMemberData&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_RetailerId&gt;${RetailerID}&lt;/web:in_RetailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_XML&gt;&lt;![CDATA[&lt;Log&gt;&#xd;
         &lt;Customer xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; MsgType=&quot;1&quot; RetailerId=&quot;${RetailerID}&quot; StoreID=&quot;1&quot; ClientID=&quot;11&quot; TransID=&quot;${transID2}&quot; BusinessDate=&quot;${CurrDate}&quot; LPEVer=&quot;5.0.0.0.1&quot; StartDateTime=&quot;${CurrDate}T13:41:22&quot; TicketIdentifier=&quot;1598322271&quot;&gt;&#xd;
         &lt;LoyaltyInfo CardID=&quot;${CardID_1}&quot; CardIDType=&quot;P&quot;/&gt;&#xd;
         &lt;/Customer&gt;&lt;/Log&gt;]]&gt;&lt;/web:in_XML&gt;&#xd;
      &lt;/web:GetMemberData&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/CRM/MemberServiceOnline.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">MSG1_2</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="147801392">MsgType=&quot;2&quot;</stringProp>
              <stringProp name="1896930921">CardID=&quot;${CardID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - MSG2 was updated in LoyaltyOnLine" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
declare @BarcodeId int

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

SELECT    COUNT(btl.Barcode) AS counter
FROM            [LoyaltyOnline_LMS_1].dbo.CRM_OL_BuyingUnitData ld
INNER JOIN  [Loyalty_LMS_1].dbo.CRM_LoyaltyDocuments btl 
ON ld.BuyingUnitInternalKey = btl.IssuedBuyingUnitInternalKey
WHERE        btl.Barcode = &apos;${Barcode1_1}&apos;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">Barcode</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">verify that  MSG2 was updated in LoyaltyOnLine</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-MSG7_8" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:web=&quot;http://www.retalix.com/rema/webservices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;web:Validate&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_RetailerId&gt;${RetailerID}&lt;/web:in_RetailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_XML&gt;&lt;![CDATA[&lt;Customer MsgType=&quot;7&quot; LPEVer=&quot;5.0.0.0.1&quot; StoreID=&quot;1&quot; PosID=&quot;1&quot; TransID=&quot;${transID}&quot; BusinessDate=&quot;${CurrDate}&quot;&gt;&#xd;
         &lt;LoyaltyInfo CardID=&quot;${CardID_1}&quot; CardIDType=&quot;P&quot;&gt;&#xd;
         &lt;Documents&gt;&lt;Document DocumentBarcode=&quot;${Barcode1_1}&quot; IsUnique=&quot;0&quot; DocumentType=&quot;3&quot; RedemptionType=&quot;1&quot;/&gt;&#xd;
         &lt;/Documents&gt;&lt;/LoyaltyInfo&gt;&lt;/Customer&gt;]]&gt;&lt;/web:in_XML&gt;&#xd;
      &lt;/web:Validate&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/LoyaltyDocuments.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">MSG7_8</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2054249624">Status=&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">text expected return MSG 8 with document</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">LmsSession ${session}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">DebugLevel</stringProp>
              <stringProp name="Header.value">Info</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request LogOut" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:LogOut/&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/Authorization/Login.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
