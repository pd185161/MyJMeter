<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables-Global" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="env" elementType="Argument">
            <stringProp name="Argument.name">env</stringProp>
            <stringProp name="Argument.value">153.77.180.130</stringProp>
            <stringProp name="Argument.desc">Environment name to be used in the Endpoint URL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DBServer" elementType="Argument">
            <stringProp name="Argument.name">DBServer</stringProp>
            <stringProp name="Argument.value">153.77.180.130</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverIP" elementType="Argument">
            <stringProp name="Argument.name">serverIP</stringProp>
            <stringProp name="Argument.value">153.77.180.130</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverUserName" elementType="Argument">
            <stringProp name="Argument.name">serverUserName</stringProp>
            <stringProp name="Argument.value">s_raa_appadmin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverPassword" elementType="Argument">
            <stringProp name="Argument.name">serverPassword</stringProp>
            <stringProp name="Argument.value">HAha123!</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HostDBName" elementType="Argument">
            <stringProp name="Argument.name">HostDBName</stringProp>
            <stringProp name="Argument.value">HOST_LMS_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LoyaltyDBName" elementType="Argument">
            <stringProp name="Argument.name">LoyaltyDBName</stringProp>
            <stringProp name="Argument.value">Loyalty_LMS_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PromotionDBName" elementType="Argument">
            <stringProp name="Argument.name">PromotionDBName</stringProp>
            <stringProp name="Argument.value">Promotion_LMS_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MPDBName" elementType="Argument">
            <stringProp name="Argument.name">MPDBName</stringProp>
            <stringProp name="Argument.value">MP_LMS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DownloadDBName" elementType="Argument">
            <stringProp name="Argument.name">DownloadDBName</stringProp>
            <stringProp name="Argument.value">DLDB_LMS_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LoyaltyOnlineDBName" elementType="Argument">
            <stringProp name="Argument.name">LoyaltyOnlineDBName</stringProp>
            <stringProp name="Argument.value">LoyaltyOnline_LMS_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RetailerID" elementType="Argument">
            <stringProp name="Argument.name">RetailerID</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RetailerUserID" elementType="Argument">
            <stringProp name="Argument.name">RetailerUserID</stringProp>
            <stringProp name="Argument.value">HQL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RetailerPassword" elementType="Argument">
            <stringProp name="Argument.name">RetailerPassword</stringProp>
            <stringProp name="Argument.value">Abcd123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CurrDate1" elementType="Argument">
            <stringProp name="Argument.name">CurrDate1</stringProp>
            <stringProp name="Argument.value">${__groovy(new Date().format(&apos;yyyy-MM-dd&apos;),)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CurrDate" elementType="Argument">
            <stringProp name="Argument.name">CurrDate</stringProp>
            <stringProp name="Argument.value">${__time(yyyy-MM-dd)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="transID" elementType="Argument">
            <stringProp name="Argument.name">transID</stringProp>
            <stringProp name="Argument.value">${__Random(5000000,6000000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="batchManagerPath" elementType="Argument">
            <stringProp name="Argument.name">batchManagerPath</stringProp>
            <stringProp name="Argument.value">C:\Retalix\LMS\HQ Loyalty and Promotions.1\BatchManager</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">This is the server path where batch manager bat file is available</stringProp>
          </elementProp>
          <elementProp name="PSToolPath" elementType="Argument">
            <stringProp name="Argument.name">PSToolPath</stringProp>
            <stringProp name="Argument.value">C:\Users\pd185161\OneDrive - NCR Corporation\Desktop\LP\apache-jmeter-5.4.1\apache-jmeter-5.4.1\bin\PSTools</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="InputPath" elementType="Argument">
            <stringProp name="Argument.name">InputPath</stringProp>
            <stringProp name="Argument.value">C:\Retalix\LPBatchImportOp\In\</stringProp>
            <stringProp name="Argument.desc">Enter with \ at the end</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-HostDB" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_Host</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer};databaseName=${HostDBName}</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-LoyaltyDB" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer};databaseName=${LoyaltyDBName}</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-Promotion DB" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer};databaseName=${PromotionDBName}</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-Loyalty Online" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty_Online</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer};databaseName=${LoyaltyOnlineDBName}</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-DownloadDB" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_DownloadDB</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer};databaseName=${DownloadDBName}</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group- Import Segments" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Epic 3308-Import Local Segment_Type and SubType Combinations" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Import local segment- Invalid SubType- Type 2 subType 1" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="Argument">
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="subType" elementType="Argument">
                  <stringProp name="Argument.name">subType</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get new Segment ID" enabled="true">
              <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">Declare @ClubInternalKey varchar(50)
Set @ClubInternalKey = (select ClubInternalKey from CRM_RetailerClubAssign where matrixmemberid = (select matrixmemberid from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;))

Declare @maxSegID integer
set @maxSegID = (select max(segmentid) from CRM_Segment where ClubInternalKey =@ClubInternalKey)


;with CTE as  
(  
 select 1 SegID  
 union all  
 select SegID +1 from CTE where SegID&lt;=(@maxSegID)  

)  
  
select top 1 * from (select * from CTE 
except
select segmentid from CRM_Segment where ClubInternalKey =@ClubInternalKey) ABC

option (maxrecursion 0)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SegID</stringProp>
              <stringProp name="resultVariable">resultSet</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
                <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Create Batch files" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

log.info(&quot;PreProcessor OSbatch run Started&quot;);
//Create remote batch file
String batName = &quot;IMPORTLOYALTYCUSTOMERS&quot;;
String inputFileformat = &quot;.xml&quot;;
String inputFilePath =vars.get(&quot;InputPath&quot;);
String workFilePath = &quot;C:\\Retalix\\LPBatchImportOp\\Wrk&quot;;
String logFile = &quot;C:\\Retalix\\LPBatchImportOp\\Log\\MemberImport.log&quot;;
String errorFile = &quot;C:\\Retalix\\LPBatchImportOp\\Err\\MemberImport.err&quot;;
String retailerID = vars.get(&quot;RetailerID&quot;);
String otherCriteria = &quot;&quot;;

//UPload to variable
vars.put(&quot;InputPath&quot;,inputFilePath);
vars.put(&quot;LogFile&quot;,logFile);
vars.put(&quot;ErrorFile&quot;,errorFile);

StringBuilder batFileText = new StringBuilder(&quot;ReMABatchManager.exe&quot;);
batFileText.append(&quot; -Itrue&quot;);
batFileText.append(&quot; -A&quot;+ batName);
if (inputFileformat != &quot;&quot; &amp;&amp; inputFileformat != null )
{
	batFileText.append(&quot; -N*&quot;+ inputFileformat);
}
batFileText.append(&quot; -F&quot;+ inputFilePath);
batFileText.append(&quot; -W&quot;+ workFilePath);
batFileText.append(&quot; -L&quot;+ logFile);
batFileText.append(&quot; -E&quot;+ errorFile);
//batFileText.append(&quot; -R&quot;+ retailerID);
//batFileText.append(&quot; &quot;+ otherCriteria);

//String batFileText = &quot;ReMABatchManager.exe&quot;+&quot; &quot;+ &quot;-A&quot; + batName.toUpperCase()+&quot; &quot;+&quot;-O&quot;+outputFilePath+&quot; &quot;+&quot;-W&quot;+workFilePath+&quot; &quot; + &quot;-L&quot; + logFile + &quot; &quot; + &quot;-E&quot;+errorFile+ &quot; &quot; +&quot;-R&quot;+retailerID+ &quot; &quot;+ otherCriteria;

String serverIP = vars.get(&quot;serverIP&quot;);
String serverUserName = vars.get(&quot;serverUserName&quot;);
String serverPassword = vars.get(&quot;serverPassword&quot;);
String batchManagerPath = vars.get(&quot;batchManagerPath&quot;);

String remoteBatchFilePath=&quot;\\\\&quot;+serverIP+&quot;\\&quot;+batchManagerPath.replace(&quot;:&quot;,&quot;&quot;);
String remoteBatchFile = remoteBatchFilePath+&quot;\\TestBatch_Jmeter.bat&quot;;
File file = new File(remoteBatchFile);

FileWriter fw = new FileWriter(file.getAbsoluteFile(),false);
BufferedWriter bw = new BufferedWriter(fw);
bw.write(batFileText.toString());
bw.close();


//Create local batch file to run server batch file
StringBuilder localbatText = new StringBuilder(&quot;@ECHO OFF&quot;);
localbatText.append(&quot;\nPsExec.exe&quot;);
localbatText.append(&quot; \\\\&quot;+ serverIP );
localbatText.append(&quot; -u HQL\\&quot;+serverUserName);
localbatText.append(&quot; -p &quot;+serverPassword);
localbatText.append(&quot; cmd /c &quot;);
localbatText.append(&quot;\&quot;cd /d &quot; + batchManagerPath +&quot; &amp;&amp; &quot;);
localbatText.append(&quot;TestBatch_Jmeter.bat&quot;+&quot;\&quot;&quot;);
localbatText.append(&quot;\nPAUSE&quot;);

String localbatFile= vars.get(&quot;PSToolPath&quot;) + &quot;\\LocalBatchFile.bat&quot;;
File localFile = new File(localbatFile);

FileWriter fwr = new FileWriter(localFile.getAbsoluteFile(),false);
BufferedWriter bwr = new BufferedWriter(fwr);
bwr.write(localbatText.toString());
bwr.close();

//send batchfile path to variable 
vars.put(&quot;LocalBatchFile&quot;,localbatFile);
log.info(&quot;PreProcessor OSbatch run ended&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Import files creation" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

import java.io.BufferedReader;
import java.io.File;
import java.io.StringWriter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import org.xml.sax.InputSource;
import java.io.StringReader;
import java.util.ArrayList;



String latestSegID = vars.get(&quot;SegID_1&quot;);
String type = vars.get(&quot;type&quot;);
String subType= vars.get(&quot;subType&quot;);
String xmlnameCounter=&quot;1&quot;;


ArrayList importSegIDs  = new ArrayList();
ArrayList importFiles = new ArrayList();
	
static String newSegmentXMLString(String segID, String type, String subType)
{
	String xmlString =null;
	 try {
	    	DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = dbf.newDocumentBuilder();
			Document xmlDocument = builder.newDocument();
			
			/* Start Writing the details of xml */
		  //Element rootElement = xmlDocument.createElementNS(&quot;http://www.w3.org/2001/XMLSchema-instance&quot;, &quot;LoyaltyCustomer&quot;);
		  Element rootElement = xmlDocument.createElement(&quot;LoyaltyCustomer&quot;);
            rootElement.setAttribute(&quot;Action&quot;, &quot;I&quot;);
            //rootElement.setAttribute(&quot;noNamespaceSchemaLocation&quot;, &quot;file:///C:/Product/Tags/10.6.0/Documents/XSD%20Schemas/HQL_Customer_Interface.xsd&quot;);
            
			
            xmlDocument.appendChild(rootElement);			//Append rootElement to xmlDocument
			
			Element RetailEle= xmlDocument.createElement(&quot;Retailer&quot;);
            RetailEle.setAttribute(&quot;Id&quot;, vars.get(&quot;RetailerID&quot;));
            rootElement.appendChild(RetailEle);
			
			Element legendeEle = xmlDocument.createElement(&quot;Legend&quot;);
			RetailEle.appendChild(legendeEle);
			
			Element segsEle= xmlDocument.createElement(&quot;Segments&quot;);
			legendeEle.appendChild(segsEle);
			
			Element segEle = xmlDocument.createElement(&quot;Segment&quot;);
			segEle.setAttribute(&quot;SegmentId&quot;,segID);
			segEle.setAttribute(&quot;SegmentDescription&quot;,&quot;LocalSeg_&quot;+segID);
			segEle.setAttribute(&quot;Type&quot;,type);
			segEle.setAttribute(&quot;SubTypeId&quot;,subType);
			
			segsEle.appendChild(segEle);
			
			/* end change the details of xml */
			
			TransformerFactory tf = TransformerFactory.newInstance();
		    Transformer transformer;
	        transformer = tf.newTransformer();
	        StringWriter writer = new StringWriter();
	 
	        transformer.transform(new DOMSource(xmlDocument), new StreamResult(writer));
	 
	        xmlString = writer.getBuffer().toString();
	    } 
	    catch (Exception e) 
	    {
	        log.info(e.getMessage());
	    }
	return xmlString;
}

static void StringToXML(String xmlSource, String xmlPath)
{
	try{
	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	DocumentBuilder builder = factory.newDocumentBuilder();
	Document doc = builder.parse(new InputSource(new StringReader(xmlSource)));
	
	// Write the parsed document to an xml file
	TransformerFactory transformerFactory = TransformerFactory.newInstance();
	Transformer transformer = transformerFactory.newTransformer();
	DOMSource source = new DOMSource(doc);
	
	StreamResult result =  new StreamResult(new File(xmlPath));
	transformer.transform(source, result);
	log.info(&quot;Import File created at &quot;+ xmlPath);
	}
	catch (Exception e)
	{
		log.info(e.getMessage());
	}
}

static void ImportSegmentsXMLFile()
{
	String PSToolPath = vars.get(&quot;PSToolPath&quot;);
	String inputPath = vars.get(&quot;InputPath&quot;);	
	
	int segmentID = Integer.parseInt(latestSegID);
		
		
		
	String serverpath = &quot;\\\\\\\\&quot; + vars.get(&quot;serverIP&quot;)+&quot;\\\\&quot;;
	log.info(serverpath);
	String inputPathwithoutcolon= inputPath.replace(&quot;:&quot;,&quot;&quot;);
	String newFileName = serverpath + inputPathwithoutcolon + &quot;CustomerImport-&quot;+vars.get(&quot;CurrDate&quot;)+&quot;T000000-&quot;+xmlnameCounter +&quot;.xml&quot;; 
	String fnames=&quot;CustomerImport-&quot;+vars.get(&quot;CurrDate&quot;)+&quot;T000000-&quot;+xmlnameCounter +&quot;.xml&quot;; 
	importFiles.add(fnames);
	log.info(newFileName);
	
	String newSegmentXMLString = newSegmentXMLString(Integer.toString(segmentID),type,subType);
	importSegIDs.add(segmentID);
	StringToXML(newSegmentXMLString, newFileName );
	
}

	
//Call the main function
ImportSegmentsXMLFile();
vars.putObject(&quot;importSegIDs&quot;,importSegIDs);
vars.putObject(&quot;importFiles&quot;,importFiles);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Bat File Execution" enabled="false">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">String[] array = { &quot;cmd.exe&quot;, &quot;/c&quot;, &quot;start&quot;,&quot;cd /d&quot;, vars.get(&quot;LocalBatchFile&quot;) };


try{
	
Process proc = Runtime.getRuntime().exec(array);
Thread.sleep(200000);
//proc.waitFor();

}
 catch (Exception e) 
 {
      e.printStackTrace();
 }
 
//proc.destroy();
//Runtime.getRuntime().exec(&quot;taskkill /F /IM PsExec.exe&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 assertion- Read error log file" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

static ReadFile(String fileFullPath) 
{
	String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+fileFullPath.replace(&quot;:&quot;,&quot;&quot;);
	log.info (&quot;File path is &quot;+fileNameUp);
	
	File file = new File(fileNameUp);
	
	String str;
	FileReader fr = new FileReader(file);
	BufferedReader br= new BufferedReader(fr);
	
	int startlinenumber=0;
	int endlinenumber=0;
	int linecounter=1;
	while((str=br.readLine())!=null)
	{
		
		if (str.contains(&quot;======================Start&quot;))
		{
			startlinenumber=linecounter;	
			//log.info(Integer.toString(startlinenumber));
		}
		if (str.contains(&quot;==============End&quot;))
		{
			endlinenumber=linecounter;
			//log.info(Integer.toString(endlinenumber));	
		}
		linecounter++;
	}
	
	String logFileText = &quot;&quot;;
	
	String line;
	for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
	{
			FileReader fr1 = new FileReader(file);
				BufferedReader br1 = new BufferedReader(fr1);
			for (int i = 1; i &lt; j; i++)
		{
			br1.readLine();
		}
			line = br1.readLine();
			logFileText = logFileText.concat(&quot;\n&quot;+line);
		}
	
	log.info(&quot;-------------------------File data starts here----------------------------&quot;);
	log.info(logFileText);
	log.info(&quot;-------------------------File data ends here----------------------------&quot;);
	
	String expectedLogtext = &quot;WARNING; Description : Row data RetailerId &quot;+&quot;\&quot;&quot;+vars.get(&quot;RetailerID&quot;)+&quot;\&quot;&quot;+&quot; - Legend - SegmentId &quot;+&quot;\&quot;&quot;+vars.get(&quot;SegID_1&quot;)+&quot;\&quot;&quot;+&quot; has SubTypeId &quot;+&quot;\&quot;&quot;+vars.get(&quot;subType&quot;)+&quot;\&quot;&quot;+&quot; that does not exist in the DataBase for Segment Type &quot;+&quot;\&quot;&quot;+vars.get(&quot;type&quot;)+&quot;\&quot;&quot;+&quot;&quot;;
	log.info(expectedLogtext);
	if (logFileText.contains(expectedLogtext))
	{
		log.info(&quot;Expected error appeared. so passed&quot;);
	}
}

//String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;
filename = vars.get(&quot;ErrorFile&quot;);
log.info(&quot;Reading Error file&quot;);
ReadFile(filename);</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler- Import local segment" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">CMD</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/C</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${LocalBatchFile}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${PSToolPath}</stringProp>
            </SystemSampler>
            <hashTree>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor- Take RemoteBatchStatus" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">RemoteBatchStatus</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">error code </stringProp>
                <stringProp name="BoundaryExtractor.rboundary">.</stringProp>
                <stringProp name="BoundaryExtractor.default">99</stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number">0</stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

static String ReadFile(String fileFullPath) 
{
	String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+fileFullPath.replace(&quot;:&quot;,&quot;&quot;);
	log.info (&quot;File path is &quot;+fileNameUp);
	
	File file = new File(fileNameUp);
	
	String str;
	FileReader fr = new FileReader(file);
	BufferedReader br= new BufferedReader(fr);
	
	int startlinenumber=0;
	int endlinenumber=0;
	int linecounter=1;
	while((str=br.readLine())!=null)
	{
		
		if (str.contains(&quot;======================Start&quot;))
		{
			startlinenumber=linecounter;	
			//log.info(Integer.toString(startlinenumber));
		}
		
		if (str.contains(&quot;==============End&quot;))
		{
			endlinenumber=linecounter;
			//log.info(Integer.toString(endlinenumber));	
		}
		linecounter++;
	}
	
	String logFileText = &quot;&quot;;
	
	String line;
	for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
	{
			FileReader fr1 = new FileReader(file);
				BufferedReader br1 = new BufferedReader(fr1);
			for (int i = 1; i &lt; j; i++)
		{
			br1.readLine();
		}
			line = br1.readLine();
			logFileText = logFileText.concat(&quot;\n&quot;+line);
		}
	
	//log.info(&quot;-------------------------File data starts here----------------------------&quot;);
	//log.info(logFileText);
	//log.info(&quot;-------------------------File data ends here----------------------------&quot;);
	return logFileText;
	
}




String remoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;

if (remoteBatchStatus.equals(&quot;0&quot;))
{
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;batch run should not get successful for invalid subtypeid&quot;);
	filename = vars.get(&quot;LogFile&quot;);
	log.info (&quot;Reading out the log file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(ReadFile(filename));
	log.info (&quot;====================File Data ends here=============================&quot;);
}
else if(remoteBatchStatus.equals(&quot;1&quot;))
{
	AssertionResult.setFailure(false);
	filename = vars.get(&quot;LogFile&quot;);
	log.info (&quot;Reading out the log file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(ReadFile(filename));
	log.info (&quot;====================File Data ends here=============================&quot;);
	
	
	String errorFileName=null;
	errorFileName = vars.get(&quot;ErrorFile&quot;);
	String errMsgText = ReadFile(errorFileName);
	log.info (&quot;Reading out the Error file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(errMsgText);
	log.info (&quot;====================File Data ends here=============================&quot;);
	
	String expectedErrText = &quot;WARNING; Description : Row data RetailerId &quot;+&quot;\&quot;&quot;+vars.get(&quot;RetailerID&quot;)+&quot;\&quot;&quot;+&quot; - Legend - SegmentId &quot;+&quot;\&quot;&quot;+vars.get(&quot;SegID_1&quot;)+&quot;\&quot;&quot;+&quot; has SubTypeId &quot;+&quot;\&quot;&quot;+vars.get(&quot;subType&quot;)+&quot;\&quot;&quot;+&quot; that does not exist in the DataBase for Segment Type &quot;+&quot;\&quot;&quot;+vars.get(&quot;type&quot;)+&quot;\&quot;&quot;+&quot;&quot;;
	log.info(expectedErrText);
	if (errMsgText.contains(expectedErrText))
	{
		log.info(&quot;Expected error recieved. Test passed&quot;);
	}
	else
	{
		log.info(&quot;Expected error didn&apos;t appear. Test failed&quot;);
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Different Error message recieved. Test failed. expected: errMsgText&quot;);
	}
}
else if(remoteBatchStatus.equals(&quot;99&quot;))
{
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Batch run returned with Error. Error Code: &quot; + remoteBatchStatus);
	
}
else 
{
	AssertionResult.setFailure(true); 
	AssertionResult.setFailureMessage(&quot;Error in remote batchrun. Error Code: &quot; + remoteBatchStatus);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Read  log file" enabled="false">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//Final

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

static ReadFile(String fileFullPath) 
{
	String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+fileFullPath.replace(&quot;:&quot;,&quot;&quot;);
	log.info (&quot;File path is &quot;+fileNameUp);
	
	File file = new File(fileNameUp);
	
	String str;
	FileReader fr = new FileReader(file);
	BufferedReader br= new BufferedReader(fr);
	
	int startlinenumber=0;
	int endlinenumber=0;
	int linecounter=1;
	while((str=br.readLine())!=null)
	{
		
		if (str.contains(&quot;======================Start&quot;))
		{
			startlinenumber=linecounter;	
			//log.info(Integer.toString(startlinenumber));
		}
		if (str.contains(&quot;==============End&quot;))
		{
			endlinenumber=linecounter;
			//log.info(Integer.toString(endlinenumber));	
		}
		linecounter++;
	}
	
	String logFileText = &quot;&quot;;
	
	String line;
	for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
	{
			FileReader fr1 = new FileReader(file);
				BufferedReader br1 = new BufferedReader(fr1);
			for (int i = 1; i &lt; j; i++)
		{
			br1.readLine();
		}
			line = br1.readLine();
			logFileText = logFileText.concat(&quot;\n&quot;+line);
		}
	
	log.info(&quot;-------------------------File data starts here----------------------------&quot;);
	log.info(logFileText);
	log.info(&quot;-------------------------File data ends here----------------------------&quot;);
	
	
	/*-------- Start: get import promotion details( promotion id, file names, status of files */
	ArrayList importFiles = vars.getObject(&quot;importFiles&quot;); 
	ArrayList importSegIDs = vars.getObject(&quot;importSegIDs&quot;);
	
	String[] lines = logFileText.split(System.getProperty(&quot;line.separator&quot;));

		ArrayList importStatuses = new ArrayList();
		
		for (int j = 0; j&lt; importFiles.size(); j ++)
		{
			
			String inputPath1 = vars.get(&quot;InputPath&quot;).toUpperCase().replace(&quot;\\&quot;, &quot;\\\\&quot;)+((String) importFiles.get(j));
			//System.out.println(inputPath1);
			
			
			for(int i=0;i&lt;lines.length;i++)
			{
				
				//System.out.println(lines[i]);
				if(lines[i].contains(&quot;Description : Rename file &quot;))
				{
					
					String filename=inputPath1;
					
					//System.out.println(filename);
					
					String regPattern=&quot;Rename file &quot;+ filename+ &quot; to &quot; + filename +&quot;.&quot;+&quot;(.*).;&quot;;
					//log.info(regPattern);
					
					Pattern r =Pattern.compile(regPattern);
					Matcher m= r.matcher(lines[i]);
					if (m.find( ))
					{
				      importStatuses.add(m.group(1));

				      /*start: if err or wrn throw message in log*/ 
				        if(m.group(1).equals(&quot;err&quot;) || m.group(1).equals(&quot;wrn&quot;) )
				      {
				    	  log.info(&quot;File &quot;+filename +&quot;is not imported successfully. Recieved with &quot;+ m.group(1).toString() + &quot; Status&quot;);
				      }
				       /*End: if err or wrn throw message in log*/
					}
					else
					{
				         log.info(&quot;NO MATCH. No File exported&quot;);
				    }
					
				}
				
			}
		}
		log.info(importStatuses.toString());
		
		vars.putObject(&quot;importStatuses&quot;,importStatuses);
	/*-------- End: get import promotion details( promotion id, file names, status of files */
	
}

//String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;
filename = vars.get(&quot;LogFile&quot;);
log.info(&quot;Reading log file&quot;);
ReadFile(filename);</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.util.ArrayList;

ArrayList importStatuses = vars.getObject(&quot;importStatuses&quot;);

int count=0;
for (int i = 0; i&lt;importStatuses.size();i++)
{
	if (importStatuses.get(i).equals(&quot;scc&quot;))
	{
		count = count+1;
	}
}
log.info((importStatuses.size()).toString());
if(count==importStatuses.size())
{
	Runtime.getRuntime().exec(&quot;taskkill /F /IM cmd.exe&quot;);
	log.info(&quot;All segment import files are imported successfully&quot;);
   	AssertionResult.setFailure(false);
}
else
{
	Runtime.getRuntime().exec(&quot;taskkill /F /IM cmd.exe&quot;);
	AssertionResult.setFailureMessage(&quot;All segment files are not imported&quot;);
	log.error(&quot;All segment files are not imported&quot;);
   	AssertionResult.setFailure(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Import local segment- Null Type and Null SubType" enabled="true">
            <stringProp name="TestPlan.comments">CRM_DefaultSegmentType = 2(local), CRM_DefaultSegmentSubTypeId = 1</stringProp>
          </GenericController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CRM_DefaultSegmentType" elementType="Argument">
                  <stringProp name="Argument.name">CRM_DefaultSegmentType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CRM_DefaultSegmentSubTypeId" elementType="Argument">
                  <stringProp name="Argument.name">CRM_DefaultSegmentSubTypeId</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request- Update System Parameter" enabled="true">
              <stringProp name="dataSource">MS_Driver_Connection_Pool_Host</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})


update [dbo].[SystemParameters] 
set parameterValue=&apos;${CRM_DefaultSegmentType}&apos; where Matrixmemberid=@matrixmemberid and Parameterkey=&apos;CRM_DefaultSegmentType&apos;;
update [dbo].[SystemParameters] 
set parameterValue=&apos;${CRM_DefaultSegmentSubTypeId}&apos; where Matrixmemberid=@matrixmemberid and Parameterkey=&apos;CRM_DefaultSegmentSubType&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">resultSet</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get new Segment ID" enabled="true">
              <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">Declare @ClubInternalKey varchar(50)
Set @ClubInternalKey = (select ClubInternalKey from CRM_RetailerClubAssign where matrixmemberid = (select matrixmemberid from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;))

Declare @maxSegID integer
set @maxSegID = (select max(segmentid) from CRM_Segment where ClubInternalKey =@ClubInternalKey)


;with CTE as  
(  
 select 1 SegID  
 union all  
 select SegID +1 from CTE where SegID&lt;=(@maxSegID)  

)  
  
select top 1 * from (select * from CTE 
except
select segmentid from CRM_Segment where ClubInternalKey =@ClubInternalKey) ABC

option (maxrecursion 0)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SegID</stringProp>
              <stringProp name="resultVariable">resultSet</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
                <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Create Batch files" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

log.info(&quot;PreProcessor OSbatch run Started&quot;);
//Create remote batch file
String batName = &quot;IMPORTLOYALTYCUSTOMERS&quot;;
String inputFileformat = &quot;.xml&quot;;
String inputFilePath =vars.get(&quot;InputPath&quot;);
String workFilePath = &quot;C:\\Retalix\\LPBatchImportOp\\Wrk&quot;;
String logFile = &quot;C:\\Retalix\\LPBatchImportOp\\Log\\MemberImport.log&quot;;
String errorFile = &quot;C:\\Retalix\\LPBatchImportOp\\Err\\MemberImport.err&quot;;
String retailerID = vars.get(&quot;RetailerID&quot;);
String otherCriteria = &quot;&quot;;

//UPload to variable
vars.put(&quot;InputPath&quot;,inputFilePath);
vars.put(&quot;LogFile&quot;,logFile);
vars.put(&quot;ErrorFile&quot;,errorFile);

StringBuilder batFileText = new StringBuilder(&quot;ReMABatchManager.exe&quot;);
batFileText.append(&quot; -Itrue&quot;);
batFileText.append(&quot; -A&quot;+ batName);
if (inputFileformat != &quot;&quot; &amp;&amp; inputFileformat != null )
{
	batFileText.append(&quot; -N*&quot;+ inputFileformat);
}
batFileText.append(&quot; -F&quot;+ inputFilePath);
batFileText.append(&quot; -W&quot;+ workFilePath);
batFileText.append(&quot; -L&quot;+ logFile);
batFileText.append(&quot; -E&quot;+ errorFile);
//batFileText.append(&quot; -R&quot;+ retailerID);
//batFileText.append(&quot; &quot;+ otherCriteria);

//String batFileText = &quot;ReMABatchManager.exe&quot;+&quot; &quot;+ &quot;-A&quot; + batName.toUpperCase()+&quot; &quot;+&quot;-O&quot;+outputFilePath+&quot; &quot;+&quot;-W&quot;+workFilePath+&quot; &quot; + &quot;-L&quot; + logFile + &quot; &quot; + &quot;-E&quot;+errorFile+ &quot; &quot; +&quot;-R&quot;+retailerID+ &quot; &quot;+ otherCriteria;

String serverIP = vars.get(&quot;serverIP&quot;);
String serverUserName = vars.get(&quot;serverUserName&quot;);
String serverPassword = vars.get(&quot;serverPassword&quot;);
String batchManagerPath = vars.get(&quot;batchManagerPath&quot;);

String remoteBatchFilePath=&quot;\\\\&quot;+serverIP+&quot;\\&quot;+batchManagerPath.replace(&quot;:&quot;,&quot;&quot;);
String remoteBatchFile = remoteBatchFilePath+&quot;\\TestBatch_Jmeter.bat&quot;;
File file = new File(remoteBatchFile);

FileWriter fw = new FileWriter(file.getAbsoluteFile(),false);
BufferedWriter bw = new BufferedWriter(fw);
bw.write(batFileText.toString());
bw.close();


//Create local batch file to run server batch file
StringBuilder localbatText = new StringBuilder(&quot;@ECHO OFF&quot;);
localbatText.append(&quot;\nPsExec.exe&quot;);
localbatText.append(&quot; \\\\&quot;+ serverIP );
localbatText.append(&quot; -u HQL\\&quot;+serverUserName);
localbatText.append(&quot; -p &quot;+serverPassword);
localbatText.append(&quot; cmd /c &quot;);
localbatText.append(&quot;\&quot;cd /d &quot; + batchManagerPath +&quot; &amp;&amp; &quot;);
localbatText.append(&quot;TestBatch_Jmeter.bat&quot;+&quot;\&quot;&quot;);
localbatText.append(&quot;\nPAUSE&quot;);

String localbatFile= vars.get(&quot;PSToolPath&quot;) + &quot;\\LocalBatchFile.bat&quot;;
File localFile = new File(localbatFile);

FileWriter fwr = new FileWriter(localFile.getAbsoluteFile(),false);
BufferedWriter bwr = new BufferedWriter(fwr);
bwr.write(localbatText.toString());
bwr.close();

//send batchfile path to variable 
vars.put(&quot;LocalBatchFile&quot;,localbatFile);
log.info(&quot;PreProcessor OSbatch run ended&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Import files creation" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

import java.io.BufferedReader;
import java.io.File;
import java.io.StringWriter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import org.xml.sax.InputSource;
import java.io.StringReader;
import java.util.ArrayList;



String latestSegID = vars.get(&quot;SegID_1&quot;);
String type = vars.get(&quot;type&quot;);
String subType= vars.get(&quot;subType&quot;);
String xmlnameCounter=&quot;1&quot;;


ArrayList importSegIDs  = new ArrayList();
ArrayList importFiles = new ArrayList();
	
static String newSegmentXMLString(String segID, String type, String subType)
{
	String xmlString =null;
	 try {
	    	DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = dbf.newDocumentBuilder();
			Document xmlDocument = builder.newDocument();
			
			/* Start Writing the details of xml */
		  //Element rootElement = xmlDocument.createElementNS(&quot;http://www.w3.org/2001/XMLSchema-instance&quot;, &quot;LoyaltyCustomer&quot;);
		  Element rootElement = xmlDocument.createElement(&quot;LoyaltyCustomer&quot;);
            rootElement.setAttribute(&quot;Action&quot;, &quot;I&quot;);
            //rootElement.setAttribute(&quot;noNamespaceSchemaLocation&quot;, &quot;file:///C:/Product/Tags/10.6.0/Documents/XSD%20Schemas/HQL_Customer_Interface.xsd&quot;);
            
			
            xmlDocument.appendChild(rootElement);			//Append rootElement to xmlDocument
			
			Element RetailEle= xmlDocument.createElement(&quot;Retailer&quot;);
            RetailEle.setAttribute(&quot;Id&quot;, vars.get(&quot;RetailerID&quot;));
            rootElement.appendChild(RetailEle);
			
			Element legendeEle = xmlDocument.createElement(&quot;Legend&quot;);
			RetailEle.appendChild(legendeEle);
			
			Element segsEle= xmlDocument.createElement(&quot;Segments&quot;);
			legendeEle.appendChild(segsEle);
			
			Element segEle = xmlDocument.createElement(&quot;Segment&quot;);
			segEle.setAttribute(&quot;SegmentId&quot;,segID);
			segEle.setAttribute(&quot;SegmentDescription&quot;,&quot;LocalSeg_&quot;+segID);
			//segEle.setAttribute(&quot;Type&quot;,type);
			//segEle.setAttribute(&quot;SubTypeId&quot;,subType);
			
			segsEle.appendChild(segEle);
			
			/* end change the details of xml */
			
			TransformerFactory tf = TransformerFactory.newInstance();
		    Transformer transformer;
	        transformer = tf.newTransformer();
	        StringWriter writer = new StringWriter();
	 
	        transformer.transform(new DOMSource(xmlDocument), new StreamResult(writer));
	 
	        xmlString = writer.getBuffer().toString();
	    } 
	    catch (Exception e) 
	    {
	        log.info(e.getMessage());
	    }
	return xmlString;
}

static void StringToXML(String xmlSource, String xmlPath)
{
	try{
	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	DocumentBuilder builder = factory.newDocumentBuilder();
	Document doc = builder.parse(new InputSource(new StringReader(xmlSource)));
	
	// Write the parsed document to an xml file
	TransformerFactory transformerFactory = TransformerFactory.newInstance();
	Transformer transformer = transformerFactory.newTransformer();
	DOMSource source = new DOMSource(doc);
	
	StreamResult result =  new StreamResult(new File(xmlPath));
	transformer.transform(source, result);
	log.info(&quot;Import File created at &quot;+ xmlPath);
	}
	catch (Exception e)
	{
		log.info(e.getMessage());
	}
}

static void ImportSegmentsXMLFile()
{
	String PSToolPath = vars.get(&quot;PSToolPath&quot;);
	String inputPath = vars.get(&quot;InputPath&quot;);	
	
	int segmentID = Integer.parseInt(latestSegID);
		
		
		
	String serverpath = &quot;\\\\\\\\&quot; + vars.get(&quot;serverIP&quot;)+&quot;\\\\&quot;;
	log.info(serverpath);
	String inputPathwithoutcolon= inputPath.replace(&quot;:&quot;,&quot;&quot;);
	String newFileName = serverpath + inputPathwithoutcolon + &quot;CustomerImport-&quot;+vars.get(&quot;CurrDate&quot;)+&quot;T000000-&quot;+xmlnameCounter +&quot;.xml&quot;; 
	String fnames=&quot;CustomerImport-&quot;+vars.get(&quot;CurrDate&quot;)+&quot;T000000-&quot;+xmlnameCounter +&quot;.xml&quot;; 
	importFiles.add(fnames);
	log.info(newFileName);
	
	String newSegmentXMLString = newSegmentXMLString(Integer.toString(segmentID),&quot;&quot;,&quot;&quot;);	//Change in each test case 
	importSegIDs.add(segmentID);
	StringToXML(newSegmentXMLString, newFileName );
	
}

	
//Call the main function
ImportSegmentsXMLFile();
vars.putObject(&quot;importSegIDs&quot;,importSegIDs);
vars.putObject(&quot;importFiles&quot;,importFiles);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Bat File Execution" enabled="false">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">String[] array = { &quot;cmd.exe&quot;, &quot;/c&quot;, &quot;start&quot;,&quot;cd /d&quot;, vars.get(&quot;LocalBatchFile&quot;) };


try{
	
Process proc = Runtime.getRuntime().exec(array);
Thread.sleep(200000);
//proc.waitFor();

}
 catch (Exception e) 
 {
      e.printStackTrace();
 }
 
//proc.destroy();
//Runtime.getRuntime().exec(&quot;taskkill /F /IM PsExec.exe&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 assertion- Read error log file" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

static ReadFile(String fileFullPath) 
{
	String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+fileFullPath.replace(&quot;:&quot;,&quot;&quot;);
	log.info (&quot;File path is &quot;+fileNameUp);
	
	File file = new File(fileNameUp);
	
	String str;
	FileReader fr = new FileReader(file);
	BufferedReader br= new BufferedReader(fr);
	
	int startlinenumber=0;
	int endlinenumber=0;
	int linecounter=1;
	while((str=br.readLine())!=null)
	{
		
		if (str.contains(&quot;======================Start&quot;))
		{
			startlinenumber=linecounter;	
			//log.info(Integer.toString(startlinenumber));
		}
		if (str.contains(&quot;==============End&quot;))
		{
			endlinenumber=linecounter;
			//log.info(Integer.toString(endlinenumber));	
		}
		linecounter++;
	}
	
	String logFileText = &quot;&quot;;
	
	String line;
	for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
	{
			FileReader fr1 = new FileReader(file);
				BufferedReader br1 = new BufferedReader(fr1);
			for (int i = 1; i &lt; j; i++)
		{
			br1.readLine();
		}
			line = br1.readLine();
			logFileText = logFileText.concat(&quot;\n&quot;+line);
		}
	
	log.info(&quot;-------------------------File data starts here----------------------------&quot;);
	log.info(logFileText);
	log.info(&quot;-------------------------File data ends here----------------------------&quot;);
	
	String expectedLogtext = &quot;WARNING; Description : Row data RetailerId &quot;+&quot;\&quot;&quot;+vars.get(&quot;RetailerID&quot;)+&quot;\&quot;&quot;+&quot; - Legend - SegmentId &quot;+&quot;\&quot;&quot;+vars.get(&quot;SegID_1&quot;)+&quot;\&quot;&quot;+&quot; has SubTypeId &quot;+&quot;\&quot;&quot;+vars.get(&quot;subType&quot;)+&quot;\&quot;&quot;+&quot; that does not exist in the DataBase for Segment Type &quot;+&quot;\&quot;&quot;+vars.get(&quot;type&quot;)+&quot;\&quot;&quot;+&quot;&quot;;
	log.info(expectedLogtext);
	if (logFileText.contains(expectedLogtext))
	{
		log.info(&quot;Expected error appeared. so passed&quot;);
	}
}

//String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;
filename = vars.get(&quot;ErrorFile&quot;);
log.info(&quot;Reading Error file&quot;);
ReadFile(filename);</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler- Import local segment" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">CMD</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/C</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${LocalBatchFile}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${PSToolPath}</stringProp>
            </SystemSampler>
            <hashTree>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor- Take RemoteBatchStatus" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">RemoteBatchStatus</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">error code </stringProp>
                <stringProp name="BoundaryExtractor.rboundary">.</stringProp>
                <stringProp name="BoundaryExtractor.default">99</stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number">0</stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

static String ReadFile(String fileFullPath) 
{
	String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+fileFullPath.replace(&quot;:&quot;,&quot;&quot;);
	log.info (&quot;File path is &quot;+fileNameUp);
	
	File file = new File(fileNameUp);
	
	String str;
	FileReader fr = new FileReader(file);
	BufferedReader br= new BufferedReader(fr);
	
	int startlinenumber=0;
	int endlinenumber=0;
	int linecounter=1;
	while((str=br.readLine())!=null)
	{
		
		if (str.contains(&quot;======================Start&quot;))
		{
			startlinenumber=linecounter;	
			//log.info(Integer.toString(startlinenumber));
		}
		
		if (str.contains(&quot;==============End&quot;))
		{
			endlinenumber=linecounter;
			//log.info(Integer.toString(endlinenumber));	
		}
		linecounter++;
	}
	
	String logFileText = &quot;&quot;;
	
	String line;
	for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
	{
			FileReader fr1 = new FileReader(file);
				BufferedReader br1 = new BufferedReader(fr1);
			for (int i = 1; i &lt; j; i++)
		{
			br1.readLine();
		}
			line = br1.readLine();
			logFileText = logFileText.concat(&quot;\n&quot;+line);
		}
	
	//log.info(&quot;-------------------------File data starts here----------------------------&quot;);
	//log.info(logFileText);
	//log.info(&quot;-------------------------File data ends here----------------------------&quot;);
	return logFileText;
	
}




String remoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;

if (remoteBatchStatus.equals(&quot;0&quot;))
{
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;batch run should not get successful for invalid subtypeid&quot;);
	filename = vars.get(&quot;LogFile&quot;);
	log.info (&quot;Reading out the log file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(ReadFile(filename));
	log.info (&quot;====================File Data ends here=============================&quot;);
}
else if(remoteBatchStatus.equals(&quot;1&quot;))
{
	AssertionResult.setFailure(false);
	filename = vars.get(&quot;LogFile&quot;);
	log.info (&quot;Reading out the log file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(ReadFile(filename));
	log.info (&quot;====================File Data ends here=============================&quot;);
	
	
	String errorFileName=null;
	errorFileName = vars.get(&quot;ErrorFile&quot;);
	String errMsgText = ReadFile(errorFileName);
	log.info (&quot;Reading out the Error file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(errMsgText);
	log.info (&quot;====================File Data ends here=============================&quot;);
	
	String expectedErrText = &quot;WARNING; Description : Row data RetailerId &quot;+&quot;\&quot;&quot;+vars.get(&quot;RetailerID&quot;)+&quot;\&quot;&quot;+&quot; - Legend - SegmentId &quot;+&quot;\&quot;&quot;+vars.get(&quot;SegID_1&quot;)+&quot;\&quot;&quot;+&quot; has SubTypeId &quot;+&quot;\&quot;&quot;+vars.get(&quot;CRM_DefaultSegmentSubTypeId&quot;)+&quot;\&quot;&quot;+&quot; that does not exist in the DataBase for Segment Type &quot;+&quot;\&quot;&quot;+vars.get(&quot;CRM_DefaultSegmentType&quot;)+&quot;\&quot;&quot;+&quot;&quot;;
	log.info(expectedErrText);
	if (errMsgText.contains(expectedErrText))
	{
		log.info(&quot;Expected error recieved. Test passed&quot;);
	}
	else
	{
		log.info(&quot;Expected error didn&apos;t appear. Test failed&quot;);
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Different Error message recieved. Test failed. expected: errMsgText&quot;);
	}
}
else if(remoteBatchStatus.equals(&quot;99&quot;))
{
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Batch run returned with Error. Error Code: &quot; + remoteBatchStatus);
	
}
else 
{
	AssertionResult.setFailure(true); 
	AssertionResult.setFailureMessage(&quot;Error in remote batchrun. Error Code: &quot; + remoteBatchStatus);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Epic 3308-Import Local Segment_Attribute Values override" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Import local segment- with all details" enabled="true">
            <stringProp name="TestPlan.comments">• isShared = true
• Start Date: 2022-02-24T22:40:00
• End Date = 2056-02-24T22:40:00
• Action = 1
• UploadInTransactionsSummary = true</stringProp>
          </GenericController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="Argument">
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="subType" elementType="Argument">
                  <stringProp name="Argument.name">subType</stringProp>
                  <stringProp name="Argument.value">7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isShared" elementType="Argument">
                  <stringProp name="Argument.name">isShared</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="UploadInTransactionsSummary" elementType="Argument">
                  <stringProp name="Argument.name">UploadInTransactionsSummary</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get new Segment ID" enabled="true">
              <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">Declare @ClubInternalKey varchar(50)
Set @ClubInternalKey = (select ClubInternalKey from CRM_RetailerClubAssign where matrixmemberid = (select matrixmemberid from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;))

Declare @maxSegID integer
set @maxSegID = (select max(segmentid) from CRM_Segment where ClubInternalKey =@ClubInternalKey)


;with CTE as  
(  
 select 1 SegID  
 union all  
 select SegID +1 from CTE where SegID&lt;=(@maxSegID)  

)  
  
select top 1 * from (select * from CTE 
except
select segmentid from CRM_Segment where ClubInternalKey =@ClubInternalKey) ABC

option (maxrecursion 0)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SegID</stringProp>
              <stringProp name="resultVariable">resultSet</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
                <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Create Batch files" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

log.info(&quot;PreProcessor OSbatch run Started&quot;);
//Create remote batch file
String batName = &quot;IMPORTLOYALTYCUSTOMERS&quot;;
String inputFileformat = &quot;.xml&quot;;
String inputFilePath =vars.get(&quot;InputPath&quot;);
String workFilePath = &quot;C:\\Retalix\\LPBatchImportOp\\Wrk&quot;;
String logFile = &quot;C:\\Retalix\\LPBatchImportOp\\Log\\MemberImport.log&quot;;
String errorFile = &quot;C:\\Retalix\\LPBatchImportOp\\Err\\MemberImport.err&quot;;
String retailerID = vars.get(&quot;RetailerID&quot;);
String otherCriteria = &quot;&quot;;

//UPload to variable
vars.put(&quot;InputPath&quot;,inputFilePath);
vars.put(&quot;LogFile&quot;,logFile);
vars.put(&quot;ErrorFile&quot;,errorFile);

StringBuilder batFileText = new StringBuilder(&quot;ReMABatchManager.exe&quot;);
batFileText.append(&quot; -Itrue&quot;);
batFileText.append(&quot; -A&quot;+ batName);
if (inputFileformat != &quot;&quot; &amp;&amp; inputFileformat != null )
{
	batFileText.append(&quot; -N*&quot;+ inputFileformat);
}
batFileText.append(&quot; -F&quot;+ inputFilePath);
batFileText.append(&quot; -W&quot;+ workFilePath);
batFileText.append(&quot; -L&quot;+ logFile);
batFileText.append(&quot; -E&quot;+ errorFile);
//batFileText.append(&quot; -R&quot;+ retailerID);
//batFileText.append(&quot; &quot;+ otherCriteria);

//String batFileText = &quot;ReMABatchManager.exe&quot;+&quot; &quot;+ &quot;-A&quot; + batName.toUpperCase()+&quot; &quot;+&quot;-O&quot;+outputFilePath+&quot; &quot;+&quot;-W&quot;+workFilePath+&quot; &quot; + &quot;-L&quot; + logFile + &quot; &quot; + &quot;-E&quot;+errorFile+ &quot; &quot; +&quot;-R&quot;+retailerID+ &quot; &quot;+ otherCriteria;

String serverIP = vars.get(&quot;serverIP&quot;);
String serverUserName = vars.get(&quot;serverUserName&quot;);
String serverPassword = vars.get(&quot;serverPassword&quot;);
String batchManagerPath = vars.get(&quot;batchManagerPath&quot;);

String remoteBatchFilePath=&quot;\\\\&quot;+serverIP+&quot;\\&quot;+batchManagerPath.replace(&quot;:&quot;,&quot;&quot;);
String remoteBatchFile = remoteBatchFilePath+&quot;\\TestBatch_Jmeter.bat&quot;;
File file = new File(remoteBatchFile);

FileWriter fw = new FileWriter(file.getAbsoluteFile(),false);
BufferedWriter bw = new BufferedWriter(fw);
bw.write(batFileText.toString());
bw.close();


//Create local batch file to run server batch file
StringBuilder localbatText = new StringBuilder(&quot;@ECHO OFF&quot;);
localbatText.append(&quot;\nPsExec.exe&quot;);
localbatText.append(&quot; \\\\&quot;+ serverIP );
localbatText.append(&quot; -u HQL\\&quot;+serverUserName);
localbatText.append(&quot; -p &quot;+serverPassword);
localbatText.append(&quot; cmd /c &quot;);
localbatText.append(&quot;\&quot;cd /d &quot; + batchManagerPath +&quot; &amp;&amp; &quot;);
localbatText.append(&quot;TestBatch_Jmeter.bat&quot;+&quot;\&quot;&quot;);
localbatText.append(&quot;\nPAUSE&quot;);

String localbatFile= vars.get(&quot;PSToolPath&quot;) + &quot;\\LocalBatchFile.bat&quot;;
File localFile = new File(localbatFile);

FileWriter fwr = new FileWriter(localFile.getAbsoluteFile(),false);
BufferedWriter bwr = new BufferedWriter(fwr);
bwr.write(localbatText.toString());
bwr.close();

//send batchfile path to variable 
vars.put(&quot;LocalBatchFile&quot;,localbatFile);
log.info(&quot;PreProcessor OSbatch run ended&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Import files creation" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

import java.io.BufferedReader;
import java.io.File;
import java.io.StringWriter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import org.xml.sax.InputSource;
import java.io.StringReader;
import java.util.ArrayList;



String latestSegID = vars.get(&quot;SegID_1&quot;);
String type = vars.get(&quot;type&quot;);
String subType= vars.get(&quot;subType&quot;);
String xmlnameCounter=&quot;1&quot;;


ArrayList importSegIDs  = new ArrayList();
ArrayList importFiles = new ArrayList();
	
static String newSegmentXMLString(String segID, String type, String subType)
{
	String xmlString =null;
	 try {
	    	DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = dbf.newDocumentBuilder();
			Document xmlDocument = builder.newDocument();
			
			/* Start Writing the details of xml */
		  //Element rootElement = xmlDocument.createElementNS(&quot;http://www.w3.org/2001/XMLSchema-instance&quot;, &quot;LoyaltyCustomer&quot;);
		  Element rootElement = xmlDocument.createElement(&quot;LoyaltyCustomer&quot;);
            rootElement.setAttribute(&quot;Action&quot;, &quot;I&quot;);
            //rootElement.setAttribute(&quot;noNamespaceSchemaLocation&quot;, &quot;file:///C:/Product/Tags/10.6.0/Documents/XSD%20Schemas/HQL_Customer_Interface.xsd&quot;);
            
			
            xmlDocument.appendChild(rootElement);			//Append rootElement to xmlDocument
			
			Element RetailEle= xmlDocument.createElement(&quot;Retailer&quot;);
            RetailEle.setAttribute(&quot;Id&quot;, vars.get(&quot;RetailerID&quot;));
            rootElement.appendChild(RetailEle);
			
			Element legendeEle = xmlDocument.createElement(&quot;Legend&quot;);
			RetailEle.appendChild(legendeEle);
			
			Element segsEle= xmlDocument.createElement(&quot;Segments&quot;);
			legendeEle.appendChild(segsEle);
			
			Element segEle = xmlDocument.createElement(&quot;Segment&quot;);
			segEle.setAttribute(&quot;SegmentId&quot;,segID);
			segEle.setAttribute(&quot;SegmentDescription&quot;,&quot;LocalSeg_&quot;+segID);
			segEle.setAttribute(&quot;Type&quot;,type);
			segEle.setAttribute(&quot;SubTypeId&quot;,subType);
			segEle.setAttribute(&quot;IsShared&quot;,&quot;${isShared}&quot;);
			segEle.setAttribute(&quot;StartDate&quot;,&quot;${CurrDate}T22:40:00&quot;);
			segEle.setAttribute(&quot;EndDate&quot;,&quot;2056-02-24T22:40:00&quot;);
			segEle.setAttribute(&quot;UploadInTransactionsSummary&quot;,&quot;${UploadInTransactionsSummary}&quot;);
			
			segsEle.appendChild(segEle);
			
			/* end change the details of xml */
			
			TransformerFactory tf = TransformerFactory.newInstance();
		    Transformer transformer;
	        transformer = tf.newTransformer();
	        StringWriter writer = new StringWriter();
	 
	        transformer.transform(new DOMSource(xmlDocument), new StreamResult(writer));
	 
	        xmlString = writer.getBuffer().toString();
	    } 
	    catch (Exception e) 
	    {
	        log.info(e.getMessage());
	    }
	return xmlString;
}

static void StringToXML(String xmlSource, String xmlPath)
{
	try{
	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	DocumentBuilder builder = factory.newDocumentBuilder();
	Document doc = builder.parse(new InputSource(new StringReader(xmlSource)));
	
	// Write the parsed document to an xml file
	TransformerFactory transformerFactory = TransformerFactory.newInstance();
	Transformer transformer = transformerFactory.newTransformer();
	DOMSource source = new DOMSource(doc);
	
	StreamResult result =  new StreamResult(new File(xmlPath));
	transformer.transform(source, result);
	log.info(&quot;Import File created at &quot;+ xmlPath);
	}
	catch (Exception e)
	{
		log.info(e.getMessage());
	}
}

static void ImportSegmentsXMLFile()
{
	String PSToolPath = vars.get(&quot;PSToolPath&quot;);
	String inputPath = vars.get(&quot;InputPath&quot;);	
	
	int segmentID = Integer.parseInt(latestSegID);
		
		
		
	String serverpath = &quot;\\\\\\\\&quot; + vars.get(&quot;serverIP&quot;)+&quot;\\\\&quot;;
	log.info(serverpath);
	String inputPathwithoutcolon= inputPath.replace(&quot;:&quot;,&quot;&quot;);
	String newFileName = serverpath + inputPathwithoutcolon + &quot;CustomerImport-&quot;+vars.get(&quot;CurrDate&quot;)+&quot;T000000-&quot;+xmlnameCounter +&quot;.xml&quot;; 
	String fnames=&quot;CustomerImport-&quot;+vars.get(&quot;CurrDate&quot;)+&quot;T000000-&quot;+xmlnameCounter +&quot;.xml&quot;; 
	importFiles.add(fnames);
	log.info(newFileName);
	
	String newSegmentXMLString = newSegmentXMLString(Integer.toString(segmentID),type,subType);
	importSegIDs.add(segmentID);
	StringToXML(newSegmentXMLString, newFileName );
	
}

	
//Call the main function
ImportSegmentsXMLFile();
vars.putObject(&quot;importSegIDs&quot;,importSegIDs);
vars.putObject(&quot;importFiles&quot;,importFiles);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Bat File Execution" enabled="false">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">String[] array = { &quot;cmd.exe&quot;, &quot;/c&quot;, &quot;start&quot;,&quot;cd /d&quot;, vars.get(&quot;LocalBatchFile&quot;) };


try{
	
Process proc = Runtime.getRuntime().exec(array);
Thread.sleep(200000);
//proc.waitFor();

}
 catch (Exception e) 
 {
      e.printStackTrace();
 }
 
//proc.destroy();
//Runtime.getRuntime().exec(&quot;taskkill /F /IM PsExec.exe&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 assertion- Read error log file" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

static ReadFile(String fileFullPath) 
{
	String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+fileFullPath.replace(&quot;:&quot;,&quot;&quot;);
	log.info (&quot;File path is &quot;+fileNameUp);
	
	File file = new File(fileNameUp);
	
	String str;
	FileReader fr = new FileReader(file);
	BufferedReader br= new BufferedReader(fr);
	
	int startlinenumber=0;
	int endlinenumber=0;
	int linecounter=1;
	while((str=br.readLine())!=null)
	{
		
		if (str.contains(&quot;======================Start&quot;))
		{
			startlinenumber=linecounter;	
			//log.info(Integer.toString(startlinenumber));
		}
		if (str.contains(&quot;==============End&quot;))
		{
			endlinenumber=linecounter;
			//log.info(Integer.toString(endlinenumber));	
		}
		linecounter++;
	}
	
	String logFileText = &quot;&quot;;
	
	String line;
	for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
	{
			FileReader fr1 = new FileReader(file);
				BufferedReader br1 = new BufferedReader(fr1);
			for (int i = 1; i &lt; j; i++)
		{
			br1.readLine();
		}
			line = br1.readLine();
			logFileText = logFileText.concat(&quot;\n&quot;+line);
		}
	
	log.info(&quot;-------------------------File data starts here----------------------------&quot;);
	log.info(logFileText);
	log.info(&quot;-------------------------File data ends here----------------------------&quot;);
	
	String expectedLogtext = &quot;WARNING; Description : Row data RetailerId &quot;+&quot;\&quot;&quot;+vars.get(&quot;RetailerID&quot;)+&quot;\&quot;&quot;+&quot; - Legend - SegmentId &quot;+&quot;\&quot;&quot;+vars.get(&quot;SegID_1&quot;)+&quot;\&quot;&quot;+&quot; has SubTypeId &quot;+&quot;\&quot;&quot;+vars.get(&quot;subType&quot;)+&quot;\&quot;&quot;+&quot; that does not exist in the DataBase for Segment Type &quot;+&quot;\&quot;&quot;+vars.get(&quot;type&quot;)+&quot;\&quot;&quot;+&quot;&quot;;
	log.info(expectedLogtext);
	if (logFileText.contains(expectedLogtext))
	{
		log.info(&quot;Expected error appeared. so passed&quot;);
	}
}

//String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;
filename = vars.get(&quot;ErrorFile&quot;);
log.info(&quot;Reading Error file&quot;);
ReadFile(filename);</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler- Import local segment 1" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">CMD</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/C</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${LocalBatchFile}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${PSToolPath}</stringProp>
            </SystemSampler>
            <hashTree>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor- Take RemoteBatchStatus" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">RemoteBatchStatus</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">error code </stringProp>
                <stringProp name="BoundaryExtractor.rboundary">.</stringProp>
                <stringProp name="BoundaryExtractor.default">99</stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number">0</stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion 1" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

static String ReadFile(String fileFullPath) 
{
	String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+fileFullPath.replace(&quot;:&quot;,&quot;&quot;);
	//log.info (&quot;File path is &quot;+fileNameUp);
	
	File file = new File(fileNameUp);
	
	String str;
	FileReader fr = new FileReader(file);
	BufferedReader br= new BufferedReader(fr);
	
	int startlinenumber=0;
	int endlinenumber=0;
	int linecounter=1;
	while((str=br.readLine())!=null)
	{
		
		if (str.contains(&quot;======================Start&quot;))
		{
			startlinenumber=linecounter;	
			//log.info(Integer.toString(startlinenumber));
		}
		
		if (str.contains(&quot;==============End&quot;))
		{
			endlinenumber=linecounter;
			//log.info(Integer.toString(endlinenumber));	
		}
		linecounter++;
	}
	
	String logFileText = &quot;&quot;;
	
	String line;
	for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
	{
			FileReader fr1 = new FileReader(file);
				BufferedReader br1 = new BufferedReader(fr1);
			for (int i = 1; i &lt; j; i++)
		{
			br1.readLine();
		}
			line = br1.readLine();
			logFileText = logFileText.concat(&quot;\n&quot;+line);
		}
	
	//log.info(&quot;-------------------------File data starts here----------------------------&quot;);
	//log.info(logFileText);
	//log.info(&quot;-------------------------File data ends here----------------------------&quot;);
	return logFileText;
	
}




String remoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;

if (remoteBatchStatus.equals(&quot;0&quot;))
{
	AssertionResult.setFailure(false);
	log.info(&quot;batch run Successful&quot;);
	filename = vars.get(&quot;LogFile&quot;);
	log.info (&quot;Reading out the log file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(ReadFile(filename));
	log.info (&quot;====================File Data ends here=============================&quot;);
}
else if(remoteBatchStatus.equals(&quot;1&quot;))
{
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Batch run returned with Warning. Error Code: &quot; + remoteBatchStatus);
	filename = vars.get(&quot;LogFile&quot;);
	log.info (&quot;Reading out the log file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(ReadFile(filename));
	log.info (&quot;====================File Data ends here=============================&quot;);
	
	
	String errorFileName=null;
	errorFileName = vars.get(&quot;ErrorFile&quot;);
	String errMsgText = ReadFile(errorFileName);
	log.info (&quot;Reading out the Error file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(errMsgText);
	log.info (&quot;====================File Data ends here=============================&quot;);
	
	
}
else if(remoteBatchStatus.equals(&quot;99&quot;))
{
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Batch run returned with Error. Error Code: &quot; + remoteBatchStatus);
	
}
else 
{
	AssertionResult.setFailure(true); 
	AssertionResult.setFailureMessage(&quot;Error in remote batchrun. Error Code: &quot; + remoteBatchStatus);
	SampleResult.setStopThread(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
                <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
                <stringProp name="query">Declare @ClubInternalKey varchar(50)
Set @ClubInternalKey = (select ClubInternalKey from CRM_RetailerClubAssign where matrixmemberid = (select matrixmemberid from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;))

select SegmentId, Type,SubType,SegmentDescription,isShared,StartDate,EndDate,UploadInTransactionsSummary  from crm_segment where ClubInternalKey=@ClubInternalKey and SegmentId= &apos;${SegID_1}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable">resultSet1</stringProp>
                <stringProp name="variableNames">SegmentId, Type,SubType,SegmentDescription,isShared,StartDate,EndDate,UploadInTransactionsSummary</stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String actualSegmentID = vars.get(&quot;SegmentId_1&quot;);
String actualType= vars.get(&quot;Type_1&quot;);
String actualSubType= vars.get(&quot;SubType_1&quot;);
String actualDescription = vars.get(&quot;SegmentDescription_1&quot;);
String actualisShared = vars.get(&quot;isShared_1&quot;);
String actualStartDate = vars.get(&quot;StartDate_1&quot;);
String actualEndDate = vars.get(&quot;EndDate_1&quot;);
String actualUploadInTransactionsSummary = vars.get(&quot;UploadInTransactionsSummary_1&quot;);

//SegmentId, Type,SubType,SegmentDescription,isShared,StartDate,EndDate,UploadInTransactionsSummary

if (actualSegmentID.equals(vars.get(&quot;SegID_1&quot;)) &amp;&amp; actualType.equals(vars.get(&quot;type&quot;)) &amp;&amp; actualSubType.equals(vars.get(&quot;subType&quot;)) &amp;&amp; actualDescription.equals(&quot;LocalSeg_&quot;+vars.get(&quot;SegID_1&quot;)) &amp;&amp; actualisShared.equals(&quot;false&quot;) &amp;&amp;  (actualStartDate == null) &amp;&amp; (actualEndDate==null) &amp;&amp; actualUploadInTransactionsSummary.equals(&quot;true&quot;))
{
		Failure = false;
		log.info(&quot;Expected values are in database CRM_Segment. Test Passed&quot;);
	//AssertionResult.setFailureMessage(&quot;Batch run returned with Warning. Error Code: &quot; + remoteBatchStatus);
}
else 
{
	Failure = true;
	FailureMessage  = &quot;Expected values are not in database CRM_Segment. Please check&quot;;
	log.info(&quot;Expected values are not in database CRM_Segment. Please check&quot;);
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Import local segment- Existing" enabled="true">
            <stringProp name="TestPlan.comments">• isShared = true
• Start Date: 2022-02-24T22:40:00
• End Date = 2056-02-24T22:40:00
• Action = 1
• UploadInTransactionsSummary = true
It should update only Desctiption. Other fields should be as it is</stringProp>
          </GenericController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="Argument">
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="subType" elementType="Argument">
                  <stringProp name="Argument.name">subType</stringProp>
                  <stringProp name="Argument.value">7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isShared" elementType="Argument">
                  <stringProp name="Argument.name">isShared</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="UploadInTransactionsSummary" elementType="Argument">
                  <stringProp name="Argument.name">UploadInTransactionsSummary</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Create Batch files" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

log.info(&quot;PreProcessor OSbatch run Started&quot;);
//Create remote batch file
String batName = &quot;IMPORTLOYALTYCUSTOMERS&quot;;
String inputFileformat = &quot;.xml&quot;;
String inputFilePath =vars.get(&quot;InputPath&quot;);
String workFilePath = &quot;C:\\Retalix\\LPBatchImportOp\\Wrk&quot;;
String logFile = &quot;C:\\Retalix\\LPBatchImportOp\\Log\\MemberImport.log&quot;;
String errorFile = &quot;C:\\Retalix\\LPBatchImportOp\\Err\\MemberImport.err&quot;;
String retailerID = vars.get(&quot;RetailerID&quot;);
String otherCriteria = &quot;&quot;;

//UPload to variable
vars.put(&quot;InputPath&quot;,inputFilePath);
vars.put(&quot;LogFile&quot;,logFile);
vars.put(&quot;ErrorFile&quot;,errorFile);

StringBuilder batFileText = new StringBuilder(&quot;ReMABatchManager.exe&quot;);
batFileText.append(&quot; -Itrue&quot;);
batFileText.append(&quot; -A&quot;+ batName);
if (inputFileformat != &quot;&quot; &amp;&amp; inputFileformat != null )
{
	batFileText.append(&quot; -N*&quot;+ inputFileformat);
}
batFileText.append(&quot; -F&quot;+ inputFilePath);
batFileText.append(&quot; -W&quot;+ workFilePath);
batFileText.append(&quot; -L&quot;+ logFile);
batFileText.append(&quot; -E&quot;+ errorFile);
//batFileText.append(&quot; -R&quot;+ retailerID);
//batFileText.append(&quot; &quot;+ otherCriteria);

//String batFileText = &quot;ReMABatchManager.exe&quot;+&quot; &quot;+ &quot;-A&quot; + batName.toUpperCase()+&quot; &quot;+&quot;-O&quot;+outputFilePath+&quot; &quot;+&quot;-W&quot;+workFilePath+&quot; &quot; + &quot;-L&quot; + logFile + &quot; &quot; + &quot;-E&quot;+errorFile+ &quot; &quot; +&quot;-R&quot;+retailerID+ &quot; &quot;+ otherCriteria;

String serverIP = vars.get(&quot;serverIP&quot;);
String serverUserName = vars.get(&quot;serverUserName&quot;);
String serverPassword = vars.get(&quot;serverPassword&quot;);
String batchManagerPath = vars.get(&quot;batchManagerPath&quot;);

String remoteBatchFilePath=&quot;\\\\&quot;+serverIP+&quot;\\&quot;+batchManagerPath.replace(&quot;:&quot;,&quot;&quot;);
String remoteBatchFile = remoteBatchFilePath+&quot;\\TestBatch_Jmeter.bat&quot;;
File file = new File(remoteBatchFile);

FileWriter fw = new FileWriter(file.getAbsoluteFile(),false);
BufferedWriter bw = new BufferedWriter(fw);
bw.write(batFileText.toString());
bw.close();


//Create local batch file to run server batch file
StringBuilder localbatText = new StringBuilder(&quot;@ECHO OFF&quot;);
localbatText.append(&quot;\nPsExec.exe&quot;);
localbatText.append(&quot; \\\\&quot;+ serverIP );
localbatText.append(&quot; -u HQL\\&quot;+serverUserName);
localbatText.append(&quot; -p &quot;+serverPassword);
localbatText.append(&quot; cmd /c &quot;);
localbatText.append(&quot;\&quot;cd /d &quot; + batchManagerPath +&quot; &amp;&amp; &quot;);
localbatText.append(&quot;TestBatch_Jmeter.bat&quot;+&quot;\&quot;&quot;);
localbatText.append(&quot;\nPAUSE&quot;);

String localbatFile= vars.get(&quot;PSToolPath&quot;) + &quot;\\LocalBatchFile.bat&quot;;
File localFile = new File(localbatFile);

FileWriter fwr = new FileWriter(localFile.getAbsoluteFile(),false);
BufferedWriter bwr = new BufferedWriter(fwr);
bwr.write(localbatText.toString());
bwr.close();

//send batchfile path to variable 
vars.put(&quot;LocalBatchFile&quot;,localbatFile);
log.info(&quot;PreProcessor OSbatch run ended&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Import files creation" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

import java.io.BufferedReader;
import java.io.File;
import java.io.StringWriter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import org.xml.sax.InputSource;
import java.io.StringReader;
import java.util.ArrayList;



String latestSegID = vars.get(&quot;SegID_1&quot;);
String type = vars.get(&quot;type&quot;);
String subType= vars.get(&quot;subType&quot;);
String xmlnameCounter=&quot;1&quot;;


ArrayList importSegIDs  = new ArrayList();
ArrayList importFiles = new ArrayList();
	
static String newSegmentXMLString(String segID, String type, String subType)
{
	String xmlString =null;
	 try {
	    	DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = dbf.newDocumentBuilder();
			Document xmlDocument = builder.newDocument();
			
			/* Start Writing the details of xml */
		  //Element rootElement = xmlDocument.createElementNS(&quot;http://www.w3.org/2001/XMLSchema-instance&quot;, &quot;LoyaltyCustomer&quot;);
		  Element rootElement = xmlDocument.createElement(&quot;LoyaltyCustomer&quot;);
            rootElement.setAttribute(&quot;Action&quot;, &quot;I&quot;);
            //rootElement.setAttribute(&quot;noNamespaceSchemaLocation&quot;, &quot;file:///C:/Product/Tags/10.6.0/Documents/XSD%20Schemas/HQL_Customer_Interface.xsd&quot;);
            
			
            xmlDocument.appendChild(rootElement);			//Append rootElement to xmlDocument
			
			Element RetailEle= xmlDocument.createElement(&quot;Retailer&quot;);
            RetailEle.setAttribute(&quot;Id&quot;, vars.get(&quot;RetailerID&quot;));
            rootElement.appendChild(RetailEle);
			
			Element legendeEle = xmlDocument.createElement(&quot;Legend&quot;);
			RetailEle.appendChild(legendeEle);
			
			Element segsEle= xmlDocument.createElement(&quot;Segments&quot;);
			legendeEle.appendChild(segsEle);
			
			Element segEle = xmlDocument.createElement(&quot;Segment&quot;);
			segEle.setAttribute(&quot;SegmentId&quot;,segID);
			segEle.setAttribute(&quot;SegmentDescription&quot;,&quot;LocalSegUP_&quot;+segID);
			segEle.setAttribute(&quot;Type&quot;,type);
			segEle.setAttribute(&quot;SubTypeId&quot;,subType);
			segEle.setAttribute(&quot;IsShared&quot;,&quot;${isShared}&quot;);
			segEle.setAttribute(&quot;StartDate&quot;,&quot;${CurrDate}T22:40:00&quot;);
			segEle.setAttribute(&quot;EndDate&quot;,&quot;2056-02-24T22:40:00&quot;);
			segEle.setAttribute(&quot;UploadInTransactionsSummary&quot;,&quot;${UploadInTransactionsSummary}&quot;);
			
			segsEle.appendChild(segEle);
			
			/* end change the details of xml */
			
			TransformerFactory tf = TransformerFactory.newInstance();
		    Transformer transformer;
	        transformer = tf.newTransformer();
	        StringWriter writer = new StringWriter();
	 
	        transformer.transform(new DOMSource(xmlDocument), new StreamResult(writer));
	 
	        xmlString = writer.getBuffer().toString();
	    } 
	    catch (Exception e) 
	    {
	        log.info(e.getMessage());
	    }
	return xmlString;
}

static void StringToXML(String xmlSource, String xmlPath)
{
	try{
	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	DocumentBuilder builder = factory.newDocumentBuilder();
	Document doc = builder.parse(new InputSource(new StringReader(xmlSource)));
	
	// Write the parsed document to an xml file
	TransformerFactory transformerFactory = TransformerFactory.newInstance();
	Transformer transformer = transformerFactory.newTransformer();
	DOMSource source = new DOMSource(doc);
	
	StreamResult result =  new StreamResult(new File(xmlPath));
	transformer.transform(source, result);
	log.info(&quot;Import File created at &quot;+ xmlPath);
	}
	catch (Exception e)
	{
		log.info(e.getMessage());
	}
}

static void ImportSegmentsXMLFile()
{
	String PSToolPath = vars.get(&quot;PSToolPath&quot;);
	String inputPath = vars.get(&quot;InputPath&quot;);	
	
	int segmentID = Integer.parseInt(latestSegID);
		
		
		
	String serverpath = &quot;\\\\\\\\&quot; + vars.get(&quot;serverIP&quot;)+&quot;\\\\&quot;;
	log.info(serverpath);
	String inputPathwithoutcolon= inputPath.replace(&quot;:&quot;,&quot;&quot;);
	String newFileName = serverpath + inputPathwithoutcolon + &quot;CustomerImport-&quot;+vars.get(&quot;CurrDate&quot;)+&quot;T000000-&quot;+xmlnameCounter +&quot;.xml&quot;; 
	String fnames=&quot;CustomerImport-&quot;+vars.get(&quot;CurrDate&quot;)+&quot;T000000-&quot;+xmlnameCounter +&quot;.xml&quot;; 
	importFiles.add(fnames);
	log.info(newFileName);
	
	String newSegmentXMLString = newSegmentXMLString(Integer.toString(segmentID),type,subType);
	importSegIDs.add(segmentID);
	StringToXML(newSegmentXMLString, newFileName );
	
}

	
//Call the main function
ImportSegmentsXMLFile();
vars.putObject(&quot;importSegIDs&quot;,importSegIDs);
vars.putObject(&quot;importFiles&quot;,importFiles);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Bat File Execution" enabled="false">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">String[] array = { &quot;cmd.exe&quot;, &quot;/c&quot;, &quot;start&quot;,&quot;cd /d&quot;, vars.get(&quot;LocalBatchFile&quot;) };


try{
	
Process proc = Runtime.getRuntime().exec(array);
Thread.sleep(200000);
//proc.waitFor();

}
 catch (Exception e) 
 {
      e.printStackTrace();
 }
 
//proc.destroy();
//Runtime.getRuntime().exec(&quot;taskkill /F /IM PsExec.exe&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 assertion- Read error log file" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

static ReadFile(String fileFullPath) 
{
	String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+fileFullPath.replace(&quot;:&quot;,&quot;&quot;);
	log.info (&quot;File path is &quot;+fileNameUp);
	
	File file = new File(fileNameUp);
	
	String str;
	FileReader fr = new FileReader(file);
	BufferedReader br= new BufferedReader(fr);
	
	int startlinenumber=0;
	int endlinenumber=0;
	int linecounter=1;
	while((str=br.readLine())!=null)
	{
		
		if (str.contains(&quot;======================Start&quot;))
		{
			startlinenumber=linecounter;	
			//log.info(Integer.toString(startlinenumber));
		}
		if (str.contains(&quot;==============End&quot;))
		{
			endlinenumber=linecounter;
			//log.info(Integer.toString(endlinenumber));	
		}
		linecounter++;
	}
	
	String logFileText = &quot;&quot;;
	
	String line;
	for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
	{
			FileReader fr1 = new FileReader(file);
				BufferedReader br1 = new BufferedReader(fr1);
			for (int i = 1; i &lt; j; i++)
		{
			br1.readLine();
		}
			line = br1.readLine();
			logFileText = logFileText.concat(&quot;\n&quot;+line);
		}
	
	log.info(&quot;-------------------------File data starts here----------------------------&quot;);
	log.info(logFileText);
	log.info(&quot;-------------------------File data ends here----------------------------&quot;);
	
	String expectedLogtext = &quot;WARNING; Description : Row data RetailerId &quot;+&quot;\&quot;&quot;+vars.get(&quot;RetailerID&quot;)+&quot;\&quot;&quot;+&quot; - Legend - SegmentId &quot;+&quot;\&quot;&quot;+vars.get(&quot;SegID_1&quot;)+&quot;\&quot;&quot;+&quot; has SubTypeId &quot;+&quot;\&quot;&quot;+vars.get(&quot;subType&quot;)+&quot;\&quot;&quot;+&quot; that does not exist in the DataBase for Segment Type &quot;+&quot;\&quot;&quot;+vars.get(&quot;type&quot;)+&quot;\&quot;&quot;+&quot;&quot;;
	log.info(expectedLogtext);
	if (logFileText.contains(expectedLogtext))
	{
		log.info(&quot;Expected error appeared. so passed&quot;);
	}
}

//String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;
filename = vars.get(&quot;ErrorFile&quot;);
log.info(&quot;Reading Error file&quot;);
ReadFile(filename);</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler- Import local segment 2" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">CMD</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/C</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${LocalBatchFile}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${PSToolPath}</stringProp>
            </SystemSampler>
            <hashTree>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor- Take RemoteBatchStatus" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">RemoteBatchStatus</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">error code </stringProp>
                <stringProp name="BoundaryExtractor.rboundary">.</stringProp>
                <stringProp name="BoundaryExtractor.default">99</stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number">0</stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion 1" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

static String ReadFile(String fileFullPath) 
{
	String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+fileFullPath.replace(&quot;:&quot;,&quot;&quot;);
	//log.info (&quot;File path is &quot;+fileNameUp);
	
	File file = new File(fileNameUp);
	
	String str;
	FileReader fr = new FileReader(file);
	BufferedReader br= new BufferedReader(fr);
	
	int startlinenumber=0;
	int endlinenumber=0;
	int linecounter=1;
	while((str=br.readLine())!=null)
	{
		
		if (str.contains(&quot;======================Start&quot;))
		{
			startlinenumber=linecounter;	
			//log.info(Integer.toString(startlinenumber));
		}
		
		if (str.contains(&quot;==============End&quot;))
		{
			endlinenumber=linecounter;
			//log.info(Integer.toString(endlinenumber));	
		}
		linecounter++;
	}
	
	String logFileText = &quot;&quot;;
	
	String line;
	for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
	{
			FileReader fr1 = new FileReader(file);
				BufferedReader br1 = new BufferedReader(fr1);
			for (int i = 1; i &lt; j; i++)
		{
			br1.readLine();
		}
			line = br1.readLine();
			logFileText = logFileText.concat(&quot;\n&quot;+line);
		}
	
	//log.info(&quot;-------------------------File data starts here----------------------------&quot;);
	//log.info(logFileText);
	//log.info(&quot;-------------------------File data ends here----------------------------&quot;);
	return logFileText;
	
}




String remoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;

if (remoteBatchStatus.equals(&quot;0&quot;))
{
	AssertionResult.setFailure(false);
	log.info(&quot;batch run Successful&quot;);
	filename = vars.get(&quot;LogFile&quot;);
	log.info (&quot;Reading out the log file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(ReadFile(filename));
	log.info (&quot;====================File Data ends here=============================&quot;);
}
else if(remoteBatchStatus.equals(&quot;1&quot;))
{
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Batch run returned with Warning. Error Code: &quot; + remoteBatchStatus);
	filename = vars.get(&quot;LogFile&quot;);
	log.info (&quot;Reading out the log file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(ReadFile(filename));
	log.info (&quot;====================File Data ends here=============================&quot;);
	
	
	String errorFileName=null;
	errorFileName = vars.get(&quot;ErrorFile&quot;);
	String errMsgText = ReadFile(errorFileName);
	log.info (&quot;Reading out the Error file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(errMsgText);
	log.info (&quot;====================File Data ends here=============================&quot;);
	
	
}
else if(remoteBatchStatus.equals(&quot;99&quot;))
{
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Batch run returned with Error. Error Code: &quot; + remoteBatchStatus);
	
}
else 
{
	AssertionResult.setFailure(true); 
	AssertionResult.setFailureMessage(&quot;Error in remote batchrun. Error Code: &quot; + remoteBatchStatus);
	SampleResult.setStopThread(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
                <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
                <stringProp name="query">Declare @ClubInternalKey varchar(50)
Set @ClubInternalKey = (select ClubInternalKey from CRM_RetailerClubAssign where matrixmemberid = (select matrixmemberid from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;))

select SegmentId, Type,SubType,SegmentDescription,isShared,StartDate,EndDate,UploadInTransactionsSummary  from crm_segment where ClubInternalKey=@ClubInternalKey and SegmentId= &apos;${SegID_1}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable">resultSet1</stringProp>
                <stringProp name="variableNames">SegmentId, Type,SubType,SegmentDescription,isShared,StartDate,EndDate,UploadInTransactionsSummary</stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String actualSegmentID = vars.get(&quot;SegmentId_1&quot;);
String actualType= vars.get(&quot;Type_1&quot;);
String actualSubType= vars.get(&quot;SubType_1&quot;);
String actualDescription = vars.get(&quot;SegmentDescription_1&quot;);
String actualisShared = vars.get(&quot;isShared_1&quot;);
String actualStartDate = vars.get(&quot;StartDate_1&quot;);
String actualEndDate = vars.get(&quot;EndDate_1&quot;);
String actualUploadInTransactionsSummary = vars.get(&quot;UploadInTransactionsSummary_1&quot;);

//SegmentId, Type,SubType,SegmentDescription,isShared,StartDate,EndDate,UploadInTransactionsSummary

if (actualSegmentID.equals(vars.get(&quot;SegID_1&quot;)) &amp;&amp; actualType.equals(vars.get(&quot;type&quot;)) &amp;&amp; actualSubType.equals(vars.get(&quot;subType&quot;)) &amp;&amp; actualDescription.equals(&quot;LocalSegUP_&quot;+vars.get(&quot;SegID_1&quot;)) &amp;&amp; actualisShared.equals(&quot;false&quot;) &amp;&amp;  (actualStartDate == null) &amp;&amp; (actualEndDate==null) &amp;&amp; actualUploadInTransactionsSummary.equals(&quot;true&quot;))
{
		Failure = false;
		log.info(&quot;Expected values are in database CRM_Segment. Test Passed&quot;);
	//AssertionResult.setFailureMessage(&quot;Batch run returned with Warning. Error Code: &quot; + remoteBatchStatus);
}
else 
{
	Failure = true;
	FailureMessage  = &quot;Expected values are not in database CRM_Segment. Please check&quot;;
	log.info(&quot;Expected values are not in database CRM_Segment. Please check&quot;);
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Epic 3308-Import Local Segment_Attach Local segment to Member and household" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Import local segment- Attach to Member" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="Argument">
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="subType" elementType="Argument">
                  <stringProp name="Argument.name">subType</stringProp>
                  <stringProp name="Argument.value">7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isShared" elementType="Argument">
                  <stringProp name="Argument.name">isShared</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="UploadInTransactionsSummary" elementType="Argument">
                  <stringProp name="Argument.name">UploadInTransactionsSummary</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max ClubCardID+1" enabled="true">
              <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">Declare @matrixmemberid varchar(50)
declare @BarcodeId int
declare @Value nvarchar(50)
declare @maxclubcardId_string nvarchar(50)


set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

 

select top 1 @Value = btl.Value, @BarcodeId = btl.BarcodeId 
from CRM_ClubCard cc
inner join [${PromotionDBName}].dbo.BarcodeTemplateLine btl
on cc.Matrixmemberid= btl.Matrixmemberid and btl.AttributeId=1 and cc.BarcodeId = btl.BarcodeId and cc.ClubCardId like &apos;&apos;+ (btl.[Value])+&apos;%&apos;
where cc.matrixmemberid = @matrixmemberid 
ORDER BY newid()

set @maxclubcardId_string = (select max(ClubCardId) from CRM_ClubCard where matrixmemberid = @matrixmemberid and BarcodeId=@BarcodeId and ClubCardId like &apos;&apos;+ (@Value)+&apos;%&apos;)

select replicate(&apos;0&apos;,len(@maxclubcardId_string)-len(cast(@maxclubcardId_string as numeric))) +
cast((cast(@maxclubcardId_string as numeric) +1) as varchar) as CardID, @BarcodeId as CardBarcodeID</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">CardID, CardBarcodeID</stringProp>
              <stringProp name="resultVariable">resultSet1</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get new Segment ID" enabled="true">
              <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">Declare @ClubInternalKey varchar(50)
Set @ClubInternalKey = (select ClubInternalKey from CRM_RetailerClubAssign where matrixmemberid = (select matrixmemberid from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;))

Declare @maxSegID integer
set @maxSegID = (select max(segmentid) from CRM_Segment where ClubInternalKey =@ClubInternalKey)


;with CTE as  
(  
 select 1 SegID  
 union all  
 select SegID +1 from CTE where SegID&lt;=(@maxSegID)  

)  
  
select top 1 * from (select * from CTE 
except
select segmentid from CRM_Segment where ClubInternalKey =@ClubInternalKey) ABC

option (maxrecursion 0)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SegID</stringProp>
              <stringProp name="resultVariable">resultSet</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
                <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Create Batch files" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

log.info(&quot;PreProcessor OSbatch run Started&quot;);
//Create remote batch file
String batName = &quot;IMPORTLOYALTYCUSTOMERS&quot;;
String inputFileformat = &quot;.xml&quot;;
String inputFilePath =vars.get(&quot;InputPath&quot;);
String workFilePath = &quot;C:\\Retalix\\LPBatchImportOp\\Wrk&quot;;
String logFile = &quot;C:\\Retalix\\LPBatchImportOp\\Log\\MemberImport.log&quot;;
String errorFile = &quot;C:\\Retalix\\LPBatchImportOp\\Err\\MemberImport.err&quot;;
String retailerID = vars.get(&quot;RetailerID&quot;);
String otherCriteria = &quot;&quot;;

//UPload to variable
vars.put(&quot;InputPath&quot;,inputFilePath);
vars.put(&quot;LogFile&quot;,logFile);
vars.put(&quot;ErrorFile&quot;,errorFile);

StringBuilder batFileText = new StringBuilder(&quot;ReMABatchManager.exe&quot;);
batFileText.append(&quot; -Itrue&quot;);
batFileText.append(&quot; -A&quot;+ batName);
if (inputFileformat != &quot;&quot; &amp;&amp; inputFileformat != null )
{
	batFileText.append(&quot; -N*&quot;+ inputFileformat);
}
batFileText.append(&quot; -F&quot;+ inputFilePath);
batFileText.append(&quot; -W&quot;+ workFilePath);
batFileText.append(&quot; -L&quot;+ logFile);
batFileText.append(&quot; -E&quot;+ errorFile);
//batFileText.append(&quot; -R&quot;+ retailerID);
//batFileText.append(&quot; &quot;+ otherCriteria);

//String batFileText = &quot;ReMABatchManager.exe&quot;+&quot; &quot;+ &quot;-A&quot; + batName.toUpperCase()+&quot; &quot;+&quot;-O&quot;+outputFilePath+&quot; &quot;+&quot;-W&quot;+workFilePath+&quot; &quot; + &quot;-L&quot; + logFile + &quot; &quot; + &quot;-E&quot;+errorFile+ &quot; &quot; +&quot;-R&quot;+retailerID+ &quot; &quot;+ otherCriteria;

String serverIP = vars.get(&quot;serverIP&quot;);
String serverUserName = vars.get(&quot;serverUserName&quot;);
String serverPassword = vars.get(&quot;serverPassword&quot;);
String batchManagerPath = vars.get(&quot;batchManagerPath&quot;);

String remoteBatchFilePath=&quot;\\\\&quot;+serverIP+&quot;\\&quot;+batchManagerPath.replace(&quot;:&quot;,&quot;&quot;);
String remoteBatchFile = remoteBatchFilePath+&quot;\\TestBatch_Jmeter.bat&quot;;
File file = new File(remoteBatchFile);

FileWriter fw = new FileWriter(file.getAbsoluteFile(),false);
BufferedWriter bw = new BufferedWriter(fw);
bw.write(batFileText.toString());
bw.close();


//Create local batch file to run server batch file
StringBuilder localbatText = new StringBuilder(&quot;@ECHO OFF&quot;);
localbatText.append(&quot;\nPsExec.exe&quot;);
localbatText.append(&quot; \\\\&quot;+ serverIP );
localbatText.append(&quot; -u HQL\\&quot;+serverUserName);
localbatText.append(&quot; -p &quot;+serverPassword);
localbatText.append(&quot; cmd /c &quot;);
localbatText.append(&quot;\&quot;cd /d &quot; + batchManagerPath +&quot; &amp;&amp; &quot;);
localbatText.append(&quot;TestBatch_Jmeter.bat&quot;+&quot;\&quot;&quot;);
localbatText.append(&quot;\nPAUSE&quot;);

String localbatFile= vars.get(&quot;PSToolPath&quot;) + &quot;\\LocalBatchFile.bat&quot;;
File localFile = new File(localbatFile);

FileWriter fwr = new FileWriter(localFile.getAbsoluteFile(),false);
BufferedWriter bwr = new BufferedWriter(fwr);
bwr.write(localbatText.toString());
bwr.close();

//send batchfile path to variable 
vars.put(&quot;LocalBatchFile&quot;,localbatFile);
log.info(&quot;PreProcessor OSbatch run ended&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Import files creation" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

import java.io.BufferedReader;
import java.io.File;
import java.io.StringWriter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import org.xml.sax.InputSource;
import java.io.StringReader;
import java.util.ArrayList;



String latestSegID = vars.get(&quot;SegID_1&quot;);
String type = vars.get(&quot;type&quot;);
String subType= vars.get(&quot;subType&quot;);
String xmlnameCounter=&quot;1&quot;;


ArrayList importSegIDs  = new ArrayList();
ArrayList importFiles = new ArrayList();
	
static String newSegmentXMLString(String segID, String type, String subType)
{
	String xmlString =null;
	 try {
	    	DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = dbf.newDocumentBuilder();
			Document xmlDocument = builder.newDocument();
			
			/* Start Writing the details of xml */
		  //Element rootElement = xmlDocument.createElementNS(&quot;http://www.w3.org/2001/XMLSchema-instance&quot;, &quot;LoyaltyCustomer&quot;);
		  Element rootElement = xmlDocument.createElement(&quot;LoyaltyCustomer&quot;);
            rootElement.setAttribute(&quot;Action&quot;, &quot;I&quot;);
            //rootElement.setAttribute(&quot;noNamespaceSchemaLocation&quot;, &quot;file:///C:/Product/Tags/10.6.0/Documents/XSD%20Schemas/HQL_Customer_Interface.xsd&quot;);
            
			
            xmlDocument.appendChild(rootElement);			//Append rootElement to xmlDocument
			
			Element RetailEle= xmlDocument.createElement(&quot;Retailer&quot;);
            RetailEle.setAttribute(&quot;Id&quot;, vars.get(&quot;RetailerID&quot;));
            rootElement.appendChild(RetailEle);
			
			Element hhEle= xmlDocument.createElement(&quot;HouseHold&quot;);
			hhEle.setAttribute(&quot;City&quot;, &quot;HHCity&quot;);
			hhEle.setAttribute(&quot;Country&quot;, &quot;28&quot;);
			hhEle.setAttribute(&quot;EMailAddress&quot;, &quot;pkh@gmail.com&quot;);
			hhEle.setAttribute(&quot;HouseHoldExternalId&quot;, vars.get(&quot;CardID_1&quot;));
			hhEle.setAttribute(&quot;PostalCode&quot;, &quot;500088&quot;);
			hhEle.setAttribute(&quot;Street1&quot;, &quot;Telecom&quot;);
			hhEle.setAttribute(&quot;StreetNum&quot;, &quot;22&quot;);
			RetailEle.appendChild(hhEle);
			
			Element membersEle= xmlDocument.createElement(&quot;Members&quot;);
			hhEle.appendChild(membersEle);
			
			Element memberEle= xmlDocument.createElement(&quot;Member&quot;);
			memberEle.setAttribute(&quot;IsMainMember&quot;,&quot;true&quot;);
			memberEle.setAttribute(&quot;MemberExternalId&quot;,vars.get(&quot;CardID_1&quot;));
			membersEle.appendChild(memberEle);
			
			Element memberSegsEle= xmlDocument.createElement(&quot;MemberSegments&quot;);
			memberEle.appendChild(memberSegsEle);
			
			Element membersegment= xmlDocument.createElement(&quot;Segment&quot;);
			membersegment.setAttribute(&quot;Id&quot;, segID);
			membersegment.setAttribute(&quot;Status&quot;, &quot;1&quot;);
			memberSegsEle.appendChild(membersegment);
			
			Element cardsEle = xmlDocument.createElement(&quot;Cards&quot;);
			memberEle.appendChild(cardsEle);
			
			Element cardEle= xmlDocument.createElement(&quot;Card&quot;);
			cardEle.setAttribute(&quot;CardStatus&quot;,&quot;1&quot;);
			cardEle.setAttribute(&quot;ExpirationDate&quot;,&quot;2056-12-31T23:59:00.444+06:00&quot;);
			cardEle.setAttribute(&quot;Id&quot;,vars.get(&quot;CardID_1&quot;));
			cardEle.setAttribute(&quot;IssueDate&quot;,&quot;${CurrDate}T22:40:00&quot;);
			cardsEle.appendChild(cardEle);
			
			Element legendeEle = xmlDocument.createElement(&quot;Legend&quot;);
			RetailEle.appendChild(legendeEle);
			
			Element segsEle= xmlDocument.createElement(&quot;Segments&quot;);
			legendeEle.appendChild(segsEle);
			
			Element segEle = xmlDocument.createElement(&quot;Segment&quot;);
			segEle.setAttribute(&quot;SegmentId&quot;,segID);
			segEle.setAttribute(&quot;SegmentDescription&quot;,&quot;LocalSeg_&quot;+segID);
			segEle.setAttribute(&quot;Type&quot;,type);
			segEle.setAttribute(&quot;SubTypeId&quot;,subType);
			segEle.setAttribute(&quot;IsShared&quot;,&quot;${isShared}&quot;);
			segEle.setAttribute(&quot;StartDate&quot;,&quot;${CurrDate}T22:40:00&quot;);
			segEle.setAttribute(&quot;EndDate&quot;,&quot;2056-02-24T22:40:00&quot;);
			segEle.setAttribute(&quot;UploadInTransactionsSummary&quot;,&quot;${UploadInTransactionsSummary}&quot;);
			
			segsEle.appendChild(segEle);
			
			/* end change the details of xml */
			
			TransformerFactory tf = TransformerFactory.newInstance();
		    Transformer transformer;
	        transformer = tf.newTransformer();
	        StringWriter writer = new StringWriter();
	 
	        transformer.transform(new DOMSource(xmlDocument), new StreamResult(writer));
	 
	        xmlString = writer.getBuffer().toString();
	    } 
	    catch (Exception e) 
	    {
	        log.info(e.getMessage());
	    }
	return xmlString;
}

static void StringToXML(String xmlSource, String xmlPath)
{
	try{
	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	DocumentBuilder builder = factory.newDocumentBuilder();
	Document doc = builder.parse(new InputSource(new StringReader(xmlSource)));
	
	// Write the parsed document to an xml file
	TransformerFactory transformerFactory = TransformerFactory.newInstance();
	Transformer transformer = transformerFactory.newTransformer();
	DOMSource source = new DOMSource(doc);
	
	StreamResult result =  new StreamResult(new File(xmlPath));
	transformer.transform(source, result);
	log.info(&quot;Import File created at &quot;+ xmlPath);
	}
	catch (Exception e)
	{
		log.info(e.getMessage());
	}
}

static void ImportSegmentsXMLFile()
{
	String PSToolPath = vars.get(&quot;PSToolPath&quot;);
	String inputPath = vars.get(&quot;InputPath&quot;);	
	
	int segmentID = Integer.parseInt(latestSegID);
		
		
		
	String serverpath = &quot;\\\\\\\\&quot; + vars.get(&quot;serverIP&quot;)+&quot;\\\\&quot;;
	log.info(serverpath);
	String inputPathwithoutcolon= inputPath.replace(&quot;:&quot;,&quot;&quot;);
	String newFileName = serverpath + inputPathwithoutcolon + &quot;CustomerImport-&quot;+vars.get(&quot;CurrDate&quot;)+&quot;T000000-&quot;+xmlnameCounter +&quot;.xml&quot;; 
	String fnames=&quot;CustomerImport-&quot;+vars.get(&quot;CurrDate&quot;)+&quot;T000000-&quot;+xmlnameCounter +&quot;.xml&quot;; 
	importFiles.add(fnames);
	log.info(newFileName);
	
	String newSegmentXMLString = newSegmentXMLString(Integer.toString(segmentID),type,subType);
	importSegIDs.add(segmentID);
	StringToXML(newSegmentXMLString, newFileName );
	
}

	
//Call the main function
ImportSegmentsXMLFile();
vars.putObject(&quot;importSegIDs&quot;,importSegIDs);
vars.putObject(&quot;importFiles&quot;,importFiles);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Bat File Execution" enabled="false">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">String[] array = { &quot;cmd.exe&quot;, &quot;/c&quot;, &quot;start&quot;,&quot;cd /d&quot;, vars.get(&quot;LocalBatchFile&quot;) };


try{
	
Process proc = Runtime.getRuntime().exec(array);
Thread.sleep(200000);
//proc.waitFor();

}
 catch (Exception e) 
 {
      e.printStackTrace();
 }
 
//proc.destroy();
//Runtime.getRuntime().exec(&quot;taskkill /F /IM PsExec.exe&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 assertion- Read error log file" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

static ReadFile(String fileFullPath) 
{
	String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+fileFullPath.replace(&quot;:&quot;,&quot;&quot;);
	log.info (&quot;File path is &quot;+fileNameUp);
	
	File file = new File(fileNameUp);
	
	String str;
	FileReader fr = new FileReader(file);
	BufferedReader br= new BufferedReader(fr);
	
	int startlinenumber=0;
	int endlinenumber=0;
	int linecounter=1;
	while((str=br.readLine())!=null)
	{
		
		if (str.contains(&quot;======================Start&quot;))
		{
			startlinenumber=linecounter;	
			//log.info(Integer.toString(startlinenumber));
		}
		if (str.contains(&quot;==============End&quot;))
		{
			endlinenumber=linecounter;
			//log.info(Integer.toString(endlinenumber));	
		}
		linecounter++;
	}
	
	String logFileText = &quot;&quot;;
	
	String line;
	for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
	{
			FileReader fr1 = new FileReader(file);
				BufferedReader br1 = new BufferedReader(fr1);
			for (int i = 1; i &lt; j; i++)
		{
			br1.readLine();
		}
			line = br1.readLine();
			logFileText = logFileText.concat(&quot;\n&quot;+line);
		}
	
	log.info(&quot;-------------------------File data starts here----------------------------&quot;);
	log.info(logFileText);
	log.info(&quot;-------------------------File data ends here----------------------------&quot;);
	
	String expectedLogtext = &quot;WARNING; Description : Row data RetailerId &quot;+&quot;\&quot;&quot;+vars.get(&quot;RetailerID&quot;)+&quot;\&quot;&quot;+&quot; - Legend - SegmentId &quot;+&quot;\&quot;&quot;+vars.get(&quot;SegID_1&quot;)+&quot;\&quot;&quot;+&quot; has SubTypeId &quot;+&quot;\&quot;&quot;+vars.get(&quot;subType&quot;)+&quot;\&quot;&quot;+&quot; that does not exist in the DataBase for Segment Type &quot;+&quot;\&quot;&quot;+vars.get(&quot;type&quot;)+&quot;\&quot;&quot;+&quot;&quot;;
	log.info(expectedLogtext);
	if (logFileText.contains(expectedLogtext))
	{
		log.info(&quot;Expected error appeared. so passed&quot;);
	}
}

//String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;
filename = vars.get(&quot;ErrorFile&quot;);
log.info(&quot;Reading Error file&quot;);
ReadFile(filename);</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler- Import local segment 1" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">CMD</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/C</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${LocalBatchFile}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${PSToolPath}</stringProp>
            </SystemSampler>
            <hashTree>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor- Take RemoteBatchStatus" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">RemoteBatchStatus</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">error code </stringProp>
                <stringProp name="BoundaryExtractor.rboundary">.</stringProp>
                <stringProp name="BoundaryExtractor.default">99</stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number">0</stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion 1" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

static String ReadFile(String fileFullPath) 
{
	String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+fileFullPath.replace(&quot;:&quot;,&quot;&quot;);
	log.info (&quot;File path is &quot;+fileNameUp);
	
	File file = new File(fileNameUp);
	
	String str;
	FileReader fr = new FileReader(file);
	BufferedReader br= new BufferedReader(fr);
	
	int startlinenumber=0;
	int endlinenumber=0;
	int linecounter=1;
	while((str=br.readLine())!=null)
	{
		
		if (str.contains(&quot;======================Start&quot;))
		{
			startlinenumber=linecounter;	
			//log.info(Integer.toString(startlinenumber));
		}
		
		if (str.contains(&quot;==============End&quot;))
		{
			endlinenumber=linecounter;
			//log.info(Integer.toString(endlinenumber));	
		}
		linecounter++;
	}
	
	String logFileText = &quot;&quot;;
	
	String line;
	for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
	{
			FileReader fr1 = new FileReader(file);
				BufferedReader br1 = new BufferedReader(fr1);
			for (int i = 1; i &lt; j; i++)
		{
			br1.readLine();
		}
			line = br1.readLine();
			logFileText = logFileText.concat(&quot;\n&quot;+line);
		}
	
	//log.info(&quot;-------------------------File data starts here----------------------------&quot;);
	//log.info(logFileText);
	//log.info(&quot;-------------------------File data ends here----------------------------&quot;);
	return logFileText;
	
}




String remoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;

if (remoteBatchStatus.equals(&quot;0&quot;))
{
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;batch run should not get successful.Local segment cann&apos;t get attached to member/household&quot;);
	filename = vars.get(&quot;LogFile&quot;);
	log.info (&quot;Reading out the log file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(ReadFile(filename));
	log.info (&quot;====================File Data ends here=============================&quot;);
}
else if(remoteBatchStatus.equals(&quot;1&quot;))
{
	AssertionResult.setFailure(false);
	filename = vars.get(&quot;LogFile&quot;);
	log.info (&quot;Reading out the log file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(ReadFile(filename));
	log.info (&quot;====================File Data ends here=============================&quot;);
	
	
	String errorFileName=null;
	errorFileName = vars.get(&quot;ErrorFile&quot;);
	String errMsgText = ReadFile(errorFileName);
	log.info (&quot;Reading out the Error file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(errMsgText);
	log.info (&quot;====================File Data ends here=============================&quot;);
	
	String expectedErrText = &quot;WARNING; Description : Row data RetailerId &quot;+&quot;\&quot;&quot;+vars.get(&quot;RetailerID&quot;)+&quot;\&quot;&quot;+&quot; - HouseHoldExternalId &quot;+&quot;\&quot;&quot;+vars.get(&quot;CardID_1&quot;)+&quot;\&quot;&quot;+&quot; - SegmentId &quot;+&quot;\&quot;&quot;+vars.get(&quot;SegID_1&quot;)+&quot;\&quot;&quot;+&quot; Local Segment cannot be attached to the Member&quot;;
	
	log.info(expectedErrText);
	if (errMsgText.contains(expectedErrText))
	{
		log.info(&quot;Expected error recieved. Test passed&quot;);
	}
	else
	{
		log.info(&quot;Expected error didn&apos;t appear. Test failed&quot;);
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Different Error message recieved. Test failed. expected: errMsgText&quot;);
	}
}
else if(remoteBatchStatus.equals(&quot;99&quot;))
{
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Batch run returned with Error. Error Code: &quot; + remoteBatchStatus);
	
}
else 
{
	AssertionResult.setFailure(true); 
	AssertionResult.setFailureMessage(&quot;Error in remote batchrun. Error Code: &quot; + remoteBatchStatus);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Import local segment- Attach to household" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="Argument">
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="subType" elementType="Argument">
                  <stringProp name="Argument.name">subType</stringProp>
                  <stringProp name="Argument.value">7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isShared" elementType="Argument">
                  <stringProp name="Argument.name">isShared</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="UploadInTransactionsSummary" elementType="Argument">
                  <stringProp name="Argument.name">UploadInTransactionsSummary</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max ClubCardID+1" enabled="true">
              <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">Declare @matrixmemberid varchar(50)
declare @BarcodeId int
declare @Value nvarchar(50)
declare @maxclubcardId_string nvarchar(50)


set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

 

select top 1 @Value = btl.Value, @BarcodeId = btl.BarcodeId 
from CRM_ClubCard cc
inner join [${PromotionDBName}].dbo.BarcodeTemplateLine btl
on cc.Matrixmemberid= btl.Matrixmemberid and btl.AttributeId=1 and cc.BarcodeId = btl.BarcodeId and cc.ClubCardId like &apos;&apos;+ (btl.[Value])+&apos;%&apos;
where cc.matrixmemberid = @matrixmemberid 
ORDER BY newid()

set @maxclubcardId_string = (select max(ClubCardId) from CRM_ClubCard where matrixmemberid = @matrixmemberid and BarcodeId=@BarcodeId and ClubCardId like &apos;&apos;+ (@Value)+&apos;%&apos;)

select replicate(&apos;0&apos;,len(@maxclubcardId_string)-len(cast(@maxclubcardId_string as numeric))) +
cast((cast(@maxclubcardId_string as numeric) +1) as varchar) as CardID, @BarcodeId as CardBarcodeID</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">CardID, CardBarcodeID</stringProp>
              <stringProp name="resultVariable">resultSet1</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get new Segment ID" enabled="true">
              <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">Declare @ClubInternalKey varchar(50)
Set @ClubInternalKey = (select ClubInternalKey from CRM_RetailerClubAssign where matrixmemberid = (select matrixmemberid from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;))

Declare @maxSegID integer
set @maxSegID = (select max(segmentid) from CRM_Segment where ClubInternalKey =@ClubInternalKey)


;with CTE as  
(  
 select 1 SegID  
 union all  
 select SegID +1 from CTE where SegID&lt;=(@maxSegID)  

)  
  
select top 1 * from (select * from CTE 
except
select segmentid from CRM_Segment where ClubInternalKey =@ClubInternalKey) ABC

option (maxrecursion 0)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SegID</stringProp>
              <stringProp name="resultVariable">resultSet</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
                <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Create Batch files" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

log.info(&quot;PreProcessor OSbatch run Started&quot;);
//Create remote batch file
String batName = &quot;IMPORTLOYALTYCUSTOMERS&quot;;
String inputFileformat = &quot;.xml&quot;;
String inputFilePath =vars.get(&quot;InputPath&quot;);
String workFilePath = &quot;C:\\Retalix\\LPBatchImportOp\\Wrk&quot;;
String logFile = &quot;C:\\Retalix\\LPBatchImportOp\\Log\\MemberImport.log&quot;;
String errorFile = &quot;C:\\Retalix\\LPBatchImportOp\\Err\\MemberImport.err&quot;;
String retailerID = vars.get(&quot;RetailerID&quot;);
String otherCriteria = &quot;&quot;;

//UPload to variable
vars.put(&quot;InputPath&quot;,inputFilePath);
vars.put(&quot;LogFile&quot;,logFile);
vars.put(&quot;ErrorFile&quot;,errorFile);

StringBuilder batFileText = new StringBuilder(&quot;ReMABatchManager.exe&quot;);
batFileText.append(&quot; -Itrue&quot;);
batFileText.append(&quot; -A&quot;+ batName);
if (inputFileformat != &quot;&quot; &amp;&amp; inputFileformat != null )
{
	batFileText.append(&quot; -N*&quot;+ inputFileformat);
}
batFileText.append(&quot; -F&quot;+ inputFilePath);
batFileText.append(&quot; -W&quot;+ workFilePath);
batFileText.append(&quot; -L&quot;+ logFile);
batFileText.append(&quot; -E&quot;+ errorFile);
//batFileText.append(&quot; -R&quot;+ retailerID);
//batFileText.append(&quot; &quot;+ otherCriteria);

//String batFileText = &quot;ReMABatchManager.exe&quot;+&quot; &quot;+ &quot;-A&quot; + batName.toUpperCase()+&quot; &quot;+&quot;-O&quot;+outputFilePath+&quot; &quot;+&quot;-W&quot;+workFilePath+&quot; &quot; + &quot;-L&quot; + logFile + &quot; &quot; + &quot;-E&quot;+errorFile+ &quot; &quot; +&quot;-R&quot;+retailerID+ &quot; &quot;+ otherCriteria;

String serverIP = vars.get(&quot;serverIP&quot;);
String serverUserName = vars.get(&quot;serverUserName&quot;);
String serverPassword = vars.get(&quot;serverPassword&quot;);
String batchManagerPath = vars.get(&quot;batchManagerPath&quot;);

String remoteBatchFilePath=&quot;\\\\&quot;+serverIP+&quot;\\&quot;+batchManagerPath.replace(&quot;:&quot;,&quot;&quot;);
String remoteBatchFile = remoteBatchFilePath+&quot;\\TestBatch_Jmeter.bat&quot;;
File file = new File(remoteBatchFile);

FileWriter fw = new FileWriter(file.getAbsoluteFile(),false);
BufferedWriter bw = new BufferedWriter(fw);
bw.write(batFileText.toString());
bw.close();


//Create local batch file to run server batch file
StringBuilder localbatText = new StringBuilder(&quot;@ECHO OFF&quot;);
localbatText.append(&quot;\nPsExec.exe&quot;);
localbatText.append(&quot; \\\\&quot;+ serverIP );
localbatText.append(&quot; -u HQL\\&quot;+serverUserName);
localbatText.append(&quot; -p &quot;+serverPassword);
localbatText.append(&quot; cmd /c &quot;);
localbatText.append(&quot;\&quot;cd /d &quot; + batchManagerPath +&quot; &amp;&amp; &quot;);
localbatText.append(&quot;TestBatch_Jmeter.bat&quot;+&quot;\&quot;&quot;);
localbatText.append(&quot;\nPAUSE&quot;);

String localbatFile= vars.get(&quot;PSToolPath&quot;) + &quot;\\LocalBatchFile.bat&quot;;
File localFile = new File(localbatFile);

FileWriter fwr = new FileWriter(localFile.getAbsoluteFile(),false);
BufferedWriter bwr = new BufferedWriter(fwr);
bwr.write(localbatText.toString());
bwr.close();

//send batchfile path to variable 
vars.put(&quot;LocalBatchFile&quot;,localbatFile);
log.info(&quot;PreProcessor OSbatch run ended&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Import files creation- with HH data" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

import java.io.BufferedReader;
import java.io.File;
import java.io.StringWriter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import org.xml.sax.InputSource;
import java.io.StringReader;
import java.util.ArrayList;



String latestSegID = vars.get(&quot;SegID_1&quot;);
String type = vars.get(&quot;type&quot;);
String subType= vars.get(&quot;subType&quot;);
String xmlnameCounter=&quot;1&quot;;


ArrayList importSegIDs  = new ArrayList();
ArrayList importFiles = new ArrayList();
	
static String newSegmentXMLString(String segID, String type, String subType)
{
	String xmlString =null;
	 try {
	    	DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = dbf.newDocumentBuilder();
			Document xmlDocument = builder.newDocument();
			
			/* Start Writing the details of xml */
		  //Element rootElement = xmlDocument.createElementNS(&quot;http://www.w3.org/2001/XMLSchema-instance&quot;, &quot;LoyaltyCustomer&quot;);
		  Element rootElement = xmlDocument.createElement(&quot;LoyaltyCustomer&quot;);
            rootElement.setAttribute(&quot;Action&quot;, &quot;I&quot;);
            //rootElement.setAttribute(&quot;noNamespaceSchemaLocation&quot;, &quot;file:///C:/Product/Tags/10.6.0/Documents/XSD%20Schemas/HQL_Customer_Interface.xsd&quot;);
            
			
            xmlDocument.appendChild(rootElement);			//Append rootElement to xmlDocument
			
			Element RetailEle= xmlDocument.createElement(&quot;Retailer&quot;);
            RetailEle.setAttribute(&quot;Id&quot;, vars.get(&quot;RetailerID&quot;));
            rootElement.appendChild(RetailEle);
			
			Element hhEle= xmlDocument.createElement(&quot;HouseHold&quot;);
			hhEle.setAttribute(&quot;City&quot;, &quot;HHCity&quot;);
			hhEle.setAttribute(&quot;Country&quot;, &quot;28&quot;);
			hhEle.setAttribute(&quot;EMailAddress&quot;, &quot;pkh@gmail.com&quot;);
			hhEle.setAttribute(&quot;HouseHoldExternalId&quot;, vars.get(&quot;CardID_1&quot;));
			hhEle.setAttribute(&quot;PostalCode&quot;, &quot;500088&quot;);
			hhEle.setAttribute(&quot;Street1&quot;, &quot;Telecom&quot;);
			hhEle.setAttribute(&quot;StreetNum&quot;, &quot;22&quot;);
			RetailEle.appendChild(hhEle);
			
			Element hhSegments= xmlDocument.createElement(&quot;HouseHoldSegments&quot;);
			hhEle.appendChild(hhSegments);
			
			Element hhSegment= xmlDocument.createElement(&quot;Segment&quot;);
			hhSegment.setAttribute(&quot;Id&quot;,segID);
			hhSegment.setAttribute(&quot;Status&quot;,&quot;1&quot;);
			hhSegments.appendChild(hhSegment);
			
			Element membersEle= xmlDocument.createElement(&quot;Members&quot;);
			hhEle.appendChild(membersEle);
			
			Element memberEle= xmlDocument.createElement(&quot;Member&quot;);
			memberEle.setAttribute(&quot;IsMainMember&quot;,&quot;true&quot;);
			memberEle.setAttribute(&quot;MemberExternalId&quot;,vars.get(&quot;CardID_1&quot;));
			membersEle.appendChild(memberEle);
			
			
			Element cardsEle = xmlDocument.createElement(&quot;Cards&quot;);
			memberEle.appendChild(cardsEle);
			
			Element cardEle= xmlDocument.createElement(&quot;Card&quot;);
			cardEle.setAttribute(&quot;CardStatus&quot;,&quot;1&quot;);
			cardEle.setAttribute(&quot;ExpirationDate&quot;,&quot;2056-12-31T23:59:00.444+06:00&quot;);
			cardEle.setAttribute(&quot;Id&quot;,vars.get(&quot;CardID_1&quot;));
			cardEle.setAttribute(&quot;IssueDate&quot;,&quot;${CurrDate}T22:40:00&quot;);
			cardsEle.appendChild(cardEle);
			
			Element legendeEle = xmlDocument.createElement(&quot;Legend&quot;);
			RetailEle.appendChild(legendeEle);
			
			Element segsEle= xmlDocument.createElement(&quot;Segments&quot;);
			legendeEle.appendChild(segsEle);
			
			Element segEle = xmlDocument.createElement(&quot;Segment&quot;);
			segEle.setAttribute(&quot;SegmentId&quot;,segID);
			segEle.setAttribute(&quot;SegmentDescription&quot;,&quot;LocalSeg_&quot;+segID);
			segEle.setAttribute(&quot;Type&quot;,type);
			segEle.setAttribute(&quot;SubTypeId&quot;,subType);
			segEle.setAttribute(&quot;IsShared&quot;,&quot;${isShared}&quot;);
			segEle.setAttribute(&quot;StartDate&quot;,&quot;${CurrDate}T22:40:00&quot;);
			segEle.setAttribute(&quot;EndDate&quot;,&quot;2056-02-24T22:40:00&quot;);
			segEle.setAttribute(&quot;UploadInTransactionsSummary&quot;,&quot;${UploadInTransactionsSummary}&quot;);
			
			segsEle.appendChild(segEle);
			
			/* end change the details of xml */
			
			TransformerFactory tf = TransformerFactory.newInstance();
		    Transformer transformer;
	        transformer = tf.newTransformer();
	        StringWriter writer = new StringWriter();
	 
	        transformer.transform(new DOMSource(xmlDocument), new StreamResult(writer));
	 
	        xmlString = writer.getBuffer().toString();
	    } 
	    catch (Exception e) 
	    {
	        log.info(e.getMessage());
	    }
	return xmlString;
}

static void StringToXML(String xmlSource, String xmlPath)
{
	try{
	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	DocumentBuilder builder = factory.newDocumentBuilder();
	Document doc = builder.parse(new InputSource(new StringReader(xmlSource)));
	
	// Write the parsed document to an xml file
	TransformerFactory transformerFactory = TransformerFactory.newInstance();
	Transformer transformer = transformerFactory.newTransformer();
	DOMSource source = new DOMSource(doc);
	
	StreamResult result =  new StreamResult(new File(xmlPath));
	transformer.transform(source, result);
	log.info(&quot;Import File created at &quot;+ xmlPath);
	}
	catch (Exception e)
	{
		log.info(e.getMessage());
	}
}

static void ImportSegmentsXMLFile()
{
	String PSToolPath = vars.get(&quot;PSToolPath&quot;);
	String inputPath = vars.get(&quot;InputPath&quot;);	
	
	int segmentID = Integer.parseInt(latestSegID);
		
		
		
	String serverpath = &quot;\\\\\\\\&quot; + vars.get(&quot;serverIP&quot;)+&quot;\\\\&quot;;
	log.info(serverpath);
	String inputPathwithoutcolon= inputPath.replace(&quot;:&quot;,&quot;&quot;);
	String newFileName = serverpath + inputPathwithoutcolon + &quot;CustomerImport-&quot;+vars.get(&quot;CurrDate&quot;)+&quot;T000000-&quot;+xmlnameCounter +&quot;.xml&quot;; 
	String fnames=&quot;CustomerImport-&quot;+vars.get(&quot;CurrDate&quot;)+&quot;T000000-&quot;+xmlnameCounter +&quot;.xml&quot;; 
	importFiles.add(fnames);
	log.info(newFileName);
	
	String newSegmentXMLString = newSegmentXMLString(Integer.toString(segmentID),type,subType);
	importSegIDs.add(segmentID);
	StringToXML(newSegmentXMLString, newFileName );
	
}

	
//Call the main function
ImportSegmentsXMLFile();
vars.putObject(&quot;importSegIDs&quot;,importSegIDs);
vars.putObject(&quot;importFiles&quot;,importFiles);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler- Import local segment 1" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">CMD</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/C</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${LocalBatchFile}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${PSToolPath}</stringProp>
            </SystemSampler>
            <hashTree>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor- Take RemoteBatchStatus" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">RemoteBatchStatus</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">error code </stringProp>
                <stringProp name="BoundaryExtractor.rboundary">.</stringProp>
                <stringProp name="BoundaryExtractor.default">99</stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number">0</stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion 1" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

static String ReadFile(String fileFullPath) 
{
	String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+fileFullPath.replace(&quot;:&quot;,&quot;&quot;);
	log.info (&quot;File path is &quot;+fileNameUp);
	
	File file = new File(fileNameUp);
	
	String str;
	FileReader fr = new FileReader(file);
	BufferedReader br= new BufferedReader(fr);
	
	int startlinenumber=0;
	int endlinenumber=0;
	int linecounter=1;
	while((str=br.readLine())!=null)
	{
		
		if (str.contains(&quot;======================Start&quot;))
		{
			startlinenumber=linecounter;	
			//log.info(Integer.toString(startlinenumber));
		}
		
		if (str.contains(&quot;==============End&quot;))
		{
			endlinenumber=linecounter;
			//log.info(Integer.toString(endlinenumber));	
		}
		linecounter++;
	}
	
	String logFileText = &quot;&quot;;
	
	String line;
	for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
	{
			FileReader fr1 = new FileReader(file);
				BufferedReader br1 = new BufferedReader(fr1);
			for (int i = 1; i &lt; j; i++)
		{
			br1.readLine();
		}
			line = br1.readLine();
			logFileText = logFileText.concat(&quot;\n&quot;+line);
		}
	
	//log.info(&quot;-------------------------File data starts here----------------------------&quot;);
	//log.info(logFileText);
	//log.info(&quot;-------------------------File data ends here----------------------------&quot;);
	return logFileText;
	
}




String remoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;

if (remoteBatchStatus.equals(&quot;0&quot;))
{
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;batch run should not get successful.Local segment cann&apos;t get attached to member/household&quot;);
	filename = vars.get(&quot;LogFile&quot;);
	log.info (&quot;Reading out the log file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(ReadFile(filename));
	log.info (&quot;====================File Data ends here=============================&quot;);
}
else if(remoteBatchStatus.equals(&quot;1&quot;))
{
	AssertionResult.setFailure(false);
	filename = vars.get(&quot;LogFile&quot;);
	log.info (&quot;Reading out the log file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(ReadFile(filename));
	log.info (&quot;====================File Data ends here=============================&quot;);
	
	
	String errorFileName=null;
	errorFileName = vars.get(&quot;ErrorFile&quot;);
	String errMsgText = ReadFile(errorFileName);
	log.info (&quot;Reading out the Error file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(errMsgText);
	log.info (&quot;====================File Data ends here=============================&quot;);
	
	String expectedErrText = &quot;WARNING; Description : Row data RetailerId &quot;+&quot;\&quot;&quot;+vars.get(&quot;RetailerID&quot;)+&quot;\&quot;&quot;+&quot; - HouseHoldExternalId &quot;+&quot;\&quot;&quot;+vars.get(&quot;CardID_1&quot;)+&quot;\&quot;&quot;+&quot; - SegmentId &quot;+&quot;\&quot;&quot;+vars.get(&quot;SegID_1&quot;)+&quot;\&quot;&quot;+&quot; Local Segment cannot be attached to the HouseHold&quot;;
	
	log.info(expectedErrText);
	if (errMsgText.contains(expectedErrText))
	{
		log.info(&quot;Expected error recieved. Test passed&quot;);
	}
	else
	{
		log.info(&quot;Expected error didn&apos;t appear. Test failed&quot;);
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Different Error message recieved. Test failed. expected: errMsgText&quot;);
	}
}
else if(remoteBatchStatus.equals(&quot;99&quot;))
{
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Batch run returned with Error. Error Code: &quot; + remoteBatchStatus);
	
}
else 
{
	AssertionResult.setFailure(true); 
	AssertionResult.setFailureMessage(&quot;Error in remote batchrun. Error Code: &quot; + remoteBatchStatus);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Epic 3308- Import Targeted Segment" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Import Targeted Segment- with all details" enabled="true">
            <stringProp name="TestPlan.comments">• isShared = true
• Start Date: 2022-02-24T22:40:00
• End Date = 2056-02-24T22:40:00
• Action = 1
• UploadInTransactionsSummary = true</stringProp>
          </GenericController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="Argument">
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="subType" elementType="Argument">
                  <stringProp name="Argument.name">subType</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="isShared" elementType="Argument">
                  <stringProp name="Argument.name">isShared</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="UploadInTransactionsSummary" elementType="Argument">
                  <stringProp name="Argument.name">UploadInTransactionsSummary</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get new Segment ID" enabled="true">
              <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">Declare @ClubInternalKey varchar(50)
Set @ClubInternalKey = (select ClubInternalKey from CRM_RetailerClubAssign where matrixmemberid = (select matrixmemberid from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;))

Declare @maxSegID integer
set @maxSegID = (select max(segmentid) from CRM_Segment where ClubInternalKey =@ClubInternalKey)


;with CTE as  
(  
 select 1 SegID  
 union all  
 select SegID +1 from CTE where SegID&lt;=(@maxSegID)  

)  
  
select top 1 * from (select * from CTE 
except
select segmentid from CRM_Segment where ClubInternalKey =@ClubInternalKey) ABC

option (maxrecursion 0)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SegID</stringProp>
              <stringProp name="resultVariable">resultSet</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
                <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Create Batch files" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

log.info(&quot;PreProcessor OSbatch run Started&quot;);
//Create remote batch file
String batName = &quot;IMPORTLOYALTYCUSTOMERS&quot;;
String inputFileformat = &quot;.xml&quot;;
String inputFilePath =vars.get(&quot;InputPath&quot;);
String workFilePath = &quot;C:\\Retalix\\LPBatchImportOp\\Wrk&quot;;
String logFile = &quot;C:\\Retalix\\LPBatchImportOp\\Log\\MemberImport.log&quot;;
String errorFile = &quot;C:\\Retalix\\LPBatchImportOp\\Err\\MemberImport.err&quot;;
String retailerID = vars.get(&quot;RetailerID&quot;);
String otherCriteria = &quot;&quot;;

//UPload to variable
vars.put(&quot;InputPath&quot;,inputFilePath);
vars.put(&quot;LogFile&quot;,logFile);
vars.put(&quot;ErrorFile&quot;,errorFile);

StringBuilder batFileText = new StringBuilder(&quot;ReMABatchManager.exe&quot;);
batFileText.append(&quot; -Itrue&quot;);
batFileText.append(&quot; -A&quot;+ batName);
if (inputFileformat != &quot;&quot; &amp;&amp; inputFileformat != null )
{
	batFileText.append(&quot; -N*&quot;+ inputFileformat);
}
batFileText.append(&quot; -F&quot;+ inputFilePath);
batFileText.append(&quot; -W&quot;+ workFilePath);
batFileText.append(&quot; -L&quot;+ logFile);
batFileText.append(&quot; -E&quot;+ errorFile);
//batFileText.append(&quot; -R&quot;+ retailerID);
//batFileText.append(&quot; &quot;+ otherCriteria);

//String batFileText = &quot;ReMABatchManager.exe&quot;+&quot; &quot;+ &quot;-A&quot; + batName.toUpperCase()+&quot; &quot;+&quot;-O&quot;+outputFilePath+&quot; &quot;+&quot;-W&quot;+workFilePath+&quot; &quot; + &quot;-L&quot; + logFile + &quot; &quot; + &quot;-E&quot;+errorFile+ &quot; &quot; +&quot;-R&quot;+retailerID+ &quot; &quot;+ otherCriteria;

String serverIP = vars.get(&quot;serverIP&quot;);
String serverUserName = vars.get(&quot;serverUserName&quot;);
String serverPassword = vars.get(&quot;serverPassword&quot;);
String batchManagerPath = vars.get(&quot;batchManagerPath&quot;);

String remoteBatchFilePath=&quot;\\\\&quot;+serverIP+&quot;\\&quot;+batchManagerPath.replace(&quot;:&quot;,&quot;&quot;);
String remoteBatchFile = remoteBatchFilePath+&quot;\\TestBatch_Jmeter.bat&quot;;
File file = new File(remoteBatchFile);

FileWriter fw = new FileWriter(file.getAbsoluteFile(),false);
BufferedWriter bw = new BufferedWriter(fw);
bw.write(batFileText.toString());
bw.close();


//Create local batch file to run server batch file
StringBuilder localbatText = new StringBuilder(&quot;@ECHO OFF&quot;);
localbatText.append(&quot;\nPsExec.exe&quot;);
localbatText.append(&quot; \\\\&quot;+ serverIP );
localbatText.append(&quot; -u HQL\\&quot;+serverUserName);
localbatText.append(&quot; -p &quot;+serverPassword);
localbatText.append(&quot; cmd /c &quot;);
localbatText.append(&quot;\&quot;cd /d &quot; + batchManagerPath +&quot; &amp;&amp; &quot;);
localbatText.append(&quot;TestBatch_Jmeter.bat&quot;+&quot;\&quot;&quot;);
localbatText.append(&quot;\nPAUSE&quot;);

String localbatFile= vars.get(&quot;PSToolPath&quot;) + &quot;\\LocalBatchFile.bat&quot;;
File localFile = new File(localbatFile);

FileWriter fwr = new FileWriter(localFile.getAbsoluteFile(),false);
BufferedWriter bwr = new BufferedWriter(fwr);
bwr.write(localbatText.toString());
bwr.close();

//send batchfile path to variable 
vars.put(&quot;LocalBatchFile&quot;,localbatFile);
log.info(&quot;PreProcessor OSbatch run ended&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Import files creation" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

import java.io.BufferedReader;
import java.io.File;
import java.io.StringWriter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import org.xml.sax.InputSource;
import java.io.StringReader;
import java.util.ArrayList;



String latestSegID = vars.get(&quot;SegID_1&quot;);
String type = vars.get(&quot;type&quot;);
String subType= vars.get(&quot;subType&quot;);
String xmlnameCounter=&quot;1&quot;;


ArrayList importSegIDs  = new ArrayList();
ArrayList importFiles = new ArrayList();
	
static String newSegmentXMLString(String segID, String type, String subType)
{
	String xmlString =null;
	 try {
	    	DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = dbf.newDocumentBuilder();
			Document xmlDocument = builder.newDocument();
			
			/* Start Writing the details of xml */
		  //Element rootElement = xmlDocument.createElementNS(&quot;http://www.w3.org/2001/XMLSchema-instance&quot;, &quot;LoyaltyCustomer&quot;);
		  Element rootElement = xmlDocument.createElement(&quot;LoyaltyCustomer&quot;);
            rootElement.setAttribute(&quot;Action&quot;, &quot;I&quot;);
            //rootElement.setAttribute(&quot;noNamespaceSchemaLocation&quot;, &quot;file:///C:/Product/Tags/10.6.0/Documents/XSD%20Schemas/HQL_Customer_Interface.xsd&quot;);
            
			
            xmlDocument.appendChild(rootElement);			//Append rootElement to xmlDocument
			
			Element RetailEle= xmlDocument.createElement(&quot;Retailer&quot;);
            RetailEle.setAttribute(&quot;Id&quot;, vars.get(&quot;RetailerID&quot;));
            rootElement.appendChild(RetailEle);
			
			Element legendeEle = xmlDocument.createElement(&quot;Legend&quot;);
			RetailEle.appendChild(legendeEle);
			
			Element segsEle= xmlDocument.createElement(&quot;Segments&quot;);
			legendeEle.appendChild(segsEle);
			
			Element segEle = xmlDocument.createElement(&quot;Segment&quot;);
			segEle.setAttribute(&quot;SegmentId&quot;,segID);
			segEle.setAttribute(&quot;SegmentDescription&quot;,&quot;TargetedSeg_&quot;+segID);
			segEle.setAttribute(&quot;Type&quot;,type);
			segEle.setAttribute(&quot;SubTypeId&quot;,subType);
			segEle.setAttribute(&quot;IsShared&quot;,&quot;${isShared}&quot;);
			segEle.setAttribute(&quot;StartDate&quot;,&quot;${CurrDate}T22:40:00&quot;);
			segEle.setAttribute(&quot;EndDate&quot;,&quot;2056-02-24T22:40:00&quot;);
			segEle.setAttribute(&quot;UploadInTransactionsSummary&quot;,&quot;${UploadInTransactionsSummary}&quot;);
			
			segsEle.appendChild(segEle);
			
			/* end change the details of xml */
			
			TransformerFactory tf = TransformerFactory.newInstance();
		    Transformer transformer;
	        transformer = tf.newTransformer();
	        StringWriter writer = new StringWriter();
	 
	        transformer.transform(new DOMSource(xmlDocument), new StreamResult(writer));
	 
	        xmlString = writer.getBuffer().toString();
	    } 
	    catch (Exception e) 
	    {
	        log.info(e.getMessage());
	    }
	return xmlString;
}

static void StringToXML(String xmlSource, String xmlPath)
{
	try{
	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	DocumentBuilder builder = factory.newDocumentBuilder();
	Document doc = builder.parse(new InputSource(new StringReader(xmlSource)));
	
	// Write the parsed document to an xml file
	TransformerFactory transformerFactory = TransformerFactory.newInstance();
	Transformer transformer = transformerFactory.newTransformer();
	DOMSource source = new DOMSource(doc);
	
	StreamResult result =  new StreamResult(new File(xmlPath));
	transformer.transform(source, result);
	log.info(&quot;Import File created at &quot;+ xmlPath);
	}
	catch (Exception e)
	{
		log.info(e.getMessage());
	}
}

static void ImportSegmentsXMLFile()
{
	String PSToolPath = vars.get(&quot;PSToolPath&quot;);
	String inputPath = vars.get(&quot;InputPath&quot;);	
	
	int segmentID = Integer.parseInt(latestSegID);
		
		
		
	String serverpath = &quot;\\\\\\\\&quot; + vars.get(&quot;serverIP&quot;)+&quot;\\\\&quot;;
	log.info(serverpath);
	String inputPathwithoutcolon= inputPath.replace(&quot;:&quot;,&quot;&quot;);
	String newFileName = serverpath + inputPathwithoutcolon + &quot;CustomerImport-&quot;+vars.get(&quot;CurrDate&quot;)+&quot;T000000-&quot;+xmlnameCounter +&quot;.xml&quot;; 
	String fnames=&quot;CustomerImport-&quot;+vars.get(&quot;CurrDate&quot;)+&quot;T000000-&quot;+xmlnameCounter +&quot;.xml&quot;; 
	importFiles.add(fnames);
	log.info(newFileName);
	
	String newSegmentXMLString = newSegmentXMLString(Integer.toString(segmentID),type,subType);
	importSegIDs.add(segmentID);
	StringToXML(newSegmentXMLString, newFileName );
	
}

	
//Call the main function
ImportSegmentsXMLFile();
vars.putObject(&quot;importSegIDs&quot;,importSegIDs);
vars.putObject(&quot;importFiles&quot;,importFiles);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Bat File Execution" enabled="false">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">String[] array = { &quot;cmd.exe&quot;, &quot;/c&quot;, &quot;start&quot;,&quot;cd /d&quot;, vars.get(&quot;LocalBatchFile&quot;) };


try{
	
Process proc = Runtime.getRuntime().exec(array);
Thread.sleep(200000);
//proc.waitFor();

}
 catch (Exception e) 
 {
      e.printStackTrace();
 }
 
//proc.destroy();
//Runtime.getRuntime().exec(&quot;taskkill /F /IM PsExec.exe&quot;);</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 assertion- Read error log file" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

static ReadFile(String fileFullPath) 
{
	String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+fileFullPath.replace(&quot;:&quot;,&quot;&quot;);
	log.info (&quot;File path is &quot;+fileNameUp);
	
	File file = new File(fileNameUp);
	
	String str;
	FileReader fr = new FileReader(file);
	BufferedReader br= new BufferedReader(fr);
	
	int startlinenumber=0;
	int endlinenumber=0;
	int linecounter=1;
	while((str=br.readLine())!=null)
	{
		
		if (str.contains(&quot;======================Start&quot;))
		{
			startlinenumber=linecounter;	
			//log.info(Integer.toString(startlinenumber));
		}
		if (str.contains(&quot;==============End&quot;))
		{
			endlinenumber=linecounter;
			//log.info(Integer.toString(endlinenumber));	
		}
		linecounter++;
	}
	
	String logFileText = &quot;&quot;;
	
	String line;
	for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
	{
			FileReader fr1 = new FileReader(file);
				BufferedReader br1 = new BufferedReader(fr1);
			for (int i = 1; i &lt; j; i++)
		{
			br1.readLine();
		}
			line = br1.readLine();
			logFileText = logFileText.concat(&quot;\n&quot;+line);
		}
	
	log.info(&quot;-------------------------File data starts here----------------------------&quot;);
	log.info(logFileText);
	log.info(&quot;-------------------------File data ends here----------------------------&quot;);
	
	String expectedLogtext = &quot;WARNING; Description : Row data RetailerId &quot;+&quot;\&quot;&quot;+vars.get(&quot;RetailerID&quot;)+&quot;\&quot;&quot;+&quot; - Legend - SegmentId &quot;+&quot;\&quot;&quot;+vars.get(&quot;SegID_1&quot;)+&quot;\&quot;&quot;+&quot; has SubTypeId &quot;+&quot;\&quot;&quot;+vars.get(&quot;subType&quot;)+&quot;\&quot;&quot;+&quot; that does not exist in the DataBase for Segment Type &quot;+&quot;\&quot;&quot;+vars.get(&quot;type&quot;)+&quot;\&quot;&quot;+&quot;&quot;;
	log.info(expectedLogtext);
	if (logFileText.contains(expectedLogtext))
	{
		log.info(&quot;Expected error appeared. so passed&quot;);
	}
}

//String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;
filename = vars.get(&quot;ErrorFile&quot;);
log.info(&quot;Reading Error file&quot;);
ReadFile(filename);</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler- Import local segment 1" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">CMD</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/C</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${LocalBatchFile}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory">${PSToolPath}</stringProp>
            </SystemSampler>
            <hashTree>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor- Take RemoteBatchStatus" enabled="true">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname">RemoteBatchStatus</stringProp>
                <stringProp name="BoundaryExtractor.lboundary">error code </stringProp>
                <stringProp name="BoundaryExtractor.rboundary">.</stringProp>
                <stringProp name="BoundaryExtractor.default">99</stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number">0</stringProp>
              </BoundaryExtractor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion 1" enabled="true">
                <stringProp name="scriptLanguage">java</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

static String ReadFile(String fileFullPath) 
{
	String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+fileFullPath.replace(&quot;:&quot;,&quot;&quot;);
	//log.info (&quot;File path is &quot;+fileNameUp);
	
	File file = new File(fileNameUp);
	
	String str;
	FileReader fr = new FileReader(file);
	BufferedReader br= new BufferedReader(fr);
	
	int startlinenumber=0;
	int endlinenumber=0;
	int linecounter=1;
	while((str=br.readLine())!=null)
	{
		
		if (str.contains(&quot;======================Start&quot;))
		{
			startlinenumber=linecounter;	
			//log.info(Integer.toString(startlinenumber));
		}
		
		if (str.contains(&quot;==============End&quot;))
		{
			endlinenumber=linecounter;
			//log.info(Integer.toString(endlinenumber));	
		}
		linecounter++;
	}
	
	String logFileText = &quot;&quot;;
	
	String line;
	for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
	{
			FileReader fr1 = new FileReader(file);
				BufferedReader br1 = new BufferedReader(fr1);
			for (int i = 1; i &lt; j; i++)
		{
			br1.readLine();
		}
			line = br1.readLine();
			logFileText = logFileText.concat(&quot;\n&quot;+line);
		}
	
	//log.info(&quot;-------------------------File data starts here----------------------------&quot;);
	//log.info(logFileText);
	//log.info(&quot;-------------------------File data ends here----------------------------&quot;);
	return logFileText;
	
}




String remoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;

if (remoteBatchStatus.equals(&quot;0&quot;))
{
	AssertionResult.setFailure(false);
	log.info(&quot;batch run Successful&quot;);
	filename = vars.get(&quot;LogFile&quot;);
	log.info (&quot;Reading out the log file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(ReadFile(filename));
	log.info (&quot;====================File Data ends here=============================&quot;);
}
else if(remoteBatchStatus.equals(&quot;1&quot;))
{
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Batch run returned with Warning. Error Code: &quot; + remoteBatchStatus);
	filename = vars.get(&quot;LogFile&quot;);
	log.info (&quot;Reading out the log file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(ReadFile(filename));
	log.info (&quot;====================File Data ends here=============================&quot;);
	
	
	String errorFileName=null;
	errorFileName = vars.get(&quot;ErrorFile&quot;);
	String errMsgText = ReadFile(errorFileName);
	log.info (&quot;Reading out the Error file&quot;);
	log.info (&quot;====================File Data starts here===========================&quot;);
	log.info(errMsgText);
	log.info (&quot;====================File Data ends here=============================&quot;);
	
	
}
else if(remoteBatchStatus.equals(&quot;99&quot;))
{
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Batch run returned with Error. Error Code: &quot; + remoteBatchStatus);
	
}
else 
{
	AssertionResult.setFailure(true); 
	AssertionResult.setFailureMessage(&quot;Error in remote batchrun. Error Code: &quot; + remoteBatchStatus);
	SampleResult.setStopThread(true);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
                <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
                <stringProp name="query">Declare @ClubInternalKey varchar(50)
Set @ClubInternalKey = (select ClubInternalKey from CRM_RetailerClubAssign where matrixmemberid = (select matrixmemberid from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;))

select SegmentId, Type,SubType,SegmentDescription,isShared,StartDate,EndDate,UploadInTransactionsSummary  from crm_segment where ClubInternalKey=@ClubInternalKey and SegmentId= &apos;${SegID_1}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultSetMaxRows"></stringProp>
                <stringProp name="resultVariable">resultSet1</stringProp>
                <stringProp name="variableNames">SegmentId, Type,SubType,SegmentDescription,isShared,StartDate,EndDate,UploadInTransactionsSummary</stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String actualSegmentID = vars.get(&quot;SegmentId_1&quot;);
String actualType= vars.get(&quot;Type_1&quot;);
String actualSubType= vars.get(&quot;SubType_1&quot;);
String actualDescription = vars.get(&quot;SegmentDescription_1&quot;);
String actualisShared = vars.get(&quot;isShared_1&quot;);
String actualStartDate = vars.get(&quot;StartDate_1&quot;);
String actualEndDate = vars.get(&quot;EndDate_1&quot;);
String actualUploadInTransactionsSummary = vars.get(&quot;UploadInTransactionsSummary_1&quot;);

//SegmentId, Type,SubType,SegmentDescription,isShared,StartDate,EndDate,UploadInTransactionsSummary

if (actualSegmentID.equals(vars.get(&quot;SegID_1&quot;)) &amp;&amp; actualType.equals(vars.get(&quot;type&quot;)) &amp;&amp; actualSubType.equals(vars.get(&quot;subType&quot;)) &amp;&amp; actualDescription.equals(&quot;TargetedSeg_&quot;+vars.get(&quot;SegID_1&quot;)) &amp;&amp; actualisShared.equals(&quot;true&quot;) &amp;&amp; (actualStartDate.equals(vars.get(&quot;CurrDate&quot;)+&quot; 22:40:00.0&quot;)) &amp;&amp; (actualEndDate.equals(&quot;2056-02-24 22:40:00.0&quot;)) &amp;&amp; actualUploadInTransactionsSummary.equals(&quot;false&quot;))
{
		Failure = false;
		log.info(&quot;Expected values are in database CRM_Segment. Test Passed&quot;);
	//AssertionResult.setFailureMessage(&quot;Batch run returned with Warning. Error Code: &quot; + remoteBatchStatus);
}
else 
{
	Failure = true;
	FailureMessage  = &quot;Expected values are not in database CRM_Segment. Please check&quot;;
	log.info(&quot;Expected values are not in database CRM_Segment. Please check&quot;);
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
