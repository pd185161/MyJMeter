<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Store 1867_Externally" enabled="true">
      <stringProp name="TestPlan.comments">Store 1867</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Epic 1511 Limit Redemption for Registered Promotion_Store 1867_RegisterToMultipleExternalPromotions WS" enabled="true">
        <stringProp name="TestPlan.comments">User Story 1867 Adding Registered Redemptions to a Household via Web Services</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="RetailerID" elementType="Argument">
              <stringProp name="Argument.name">RetailerID</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="UserName" elementType="Argument">
              <stringProp name="Argument.name">UserName</stringProp>
              <stringProp name="Argument.value">TestRetailerPK</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Password" elementType="Argument">
              <stringProp name="Argument.name">Password</stringProp>
              <stringProp name="Argument.value">Abcd1234</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="env" elementType="Argument">
              <stringProp name="Argument.name">env</stringProp>
              <stringProp name="Argument.value">153.77.180.130</stringProp>
              <stringProp name="Argument.desc">Environment name to be used in the Endpoint URL</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DBServer" elementType="Argument">
              <stringProp name="Argument.name">DBServer</stringProp>
              <stringProp name="Argument.value">153.77.180.130</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LoyaltyDBName" elementType="Argument">
              <stringProp name="Argument.name">LoyaltyDBName</stringProp>
              <stringProp name="Argument.value">Loyalty_LMS_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PromotionDBName" elementType="Argument">
              <stringProp name="Argument.name">PromotionDBName</stringProp>
              <stringProp name="Argument.value">Promotion_LMS_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="HostDBName" elementType="Argument">
              <stringProp name="Argument.name">HostDBName</stringProp>
              <stringProp name="Argument.value">HOST_LMS_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CurrDate1" elementType="Argument">
              <stringProp name="Argument.name">CurrDate1</stringProp>
              <stringProp name="Argument.value">${__groovy(new Date().format(&apos;yyyy-MM-dd&apos;),)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CurrDate" elementType="Argument">
              <stringProp name="Argument.name">CurrDate</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="transID" elementType="Argument">
              <stringProp name="Argument.name">transID</stringProp>
              <stringProp name="Argument.value">${__Random(5000000,6000000)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ManagerUserID" elementType="Argument">
              <stringProp name="Argument.name">ManagerUserID</stringProp>
              <stringProp name="Argument.value">Manager</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ManagerPassword" elementType="Argument">
              <stringProp name="Argument.name">ManagerPassword</stringProp>
              <stringProp name="Argument.value">123</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="RandomString5Letter" elementType="Argument">
              <stringProp name="Argument.name">RandomString5Letter</stringProp>
              <stringProp name="Argument.value">${__RandomString(6,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="RandomPassword8chr" elementType="Argument">
              <stringProp name="Argument.name">RandomPassword8chr</stringProp>
              <stringProp name="Argument.value">${__RandomString(3,abcdefghijklmnopqrstuvwxyz,)}${__RandomString(3,ABCDEFGHIJKLMNOPQRSTUVWXYZ,)}${__RandomString(1,`-=~!@#$%^*()_+[]\;&apos;\,./{}|:&quot;&lt;&gt;?,)}${__Random(1,9)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">LmsSession ${session}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">DebugLevel</stringProp>
              <stringProp name="Header.value">Info</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration_Promotion_DB" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://$(DBServer);databaseName=Promotion_LMS_1</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Abcd1234@</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">sa</stringProp>
          <stringProp name="TestPlan.comments">Promotion_LMS_1</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration_HOST_DB" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">db_variable1</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://$(DBServer);databaseName=HOST_LMS_1</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Abcd1234@</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">sa</stringProp>
          <stringProp name="TestPlan.comments">HOST_LMS_1</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration_ Loyalty_DB" enabled="true">
          <stringProp name="TestPlan.comments">Loyalty_LMS_1</stringProp>
          <stringProp name="dataSource">db_variable2</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://$(DBServer);databaseName=Loyalty_LMS_1</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="username">sa</stringProp>
          <stringProp name="password">Abcd1234@</stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request logIn" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:UserLogin&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_UserName&gt;${UserName}&lt;/hql:in_UserName&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_Password&gt;${Password}&lt;/hql:in_Password&gt;&#xd;
      &lt;/hql:UserLogin&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/Authorization/Login.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">${session}</stringProp>
            <stringProp name="XPathExtractor.refname">session</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_SessionKey</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC System Parameter = 3" enabled="true">
          <stringProp name="TestPlan.comments">SP RegisteredPromotionSingleRedemption</stringProp>
          <stringProp name="dataSource">db_variable1</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

update SystemParameters
set ParameterValue = 3
where matrixmemberid=@matrixmemberid and ParameterKey=&apos;RegisteredPromotionSingleRedemption&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - New card" enabled="true">
          <stringProp name="dataSource">db_variable2</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
declare @BarcodeId int
declare @Value nvarchar(50)


set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

select top 1 @Value = btl.Value, @BarcodeId = btl.BarcodeId 
from CRM_ClubCard cc
inner join [Promotion_LMS_1].dbo.BarcodeTemplateLine btl
on cc.Matrixmemberid= btl.Matrixmemberid and btl.AttributeId=1 and cc.BarcodeId = btl.BarcodeId and cc.ClubCardId like &apos;&apos;+ (btl.[Value])+&apos;%&apos;
where cc.matrixmemberid = @matrixmemberid 
ORDER BY newid()

select  (select  max(cast(ClubCardId as numeric)) from CRM_ClubCard where matrixmemberid = @matrixmemberid and BarcodeId=@BarcodeId and ClubCardId like &apos;&apos;+ (@Value)+&apos;%&apos;)+1 as CardID


</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">CardID</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - Create Member" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:SaveDemographic&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_ClubCardId&gt;${CardID_1}&lt;/hql:in_ClubCardId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_HouseHold&gt;&lt;![CDATA[&lt;HouseHold BuyingUnitInternalKey=&quot;0&quot; Country=&quot;100&quot; State=&quot;0&quot; City=&quot;&quot; Street1=&quot;&quot; Street2=&quot;&quot; PostalCode=&quot;&quot; PhonePrefix=&quot;+1&quot; HomePhone=&quot;9160962222&quot; SendEmail=&quot;false&quot; County=&quot;&quot; HouseName=&quot;&quot;&gt;&lt;Members&gt;&lt;Member MemberInternalKey=&quot;0&quot; IsMainMember=&quot;true&quot; LastName=&quot;name1&quot; FirstName=&quot;test1&quot; AdditionalFirstName=&quot;&quot; AdditionalLastName=&quot;&quot; MiddleInitial=&quot;&quot; DriversLicense=&quot;&quot; NationalInsuranceNumber=&quot;&quot; Remarks=&quot;&quot; MobilePhoneNumber=&quot;9985991111&quot; WorkPhoneNumber=&quot;&quot; Gender=&quot;0&quot; Passport=&quot;&quot;  RedemptionPrivileges=&quot;0&quot; LanguageId=&quot;0&quot; PostOption=&quot;1&quot; NumberOfFamilyMembers=&quot;1&quot; Anonimity=&quot;0&quot; SpouseLastName=&quot;&quot; MemberStatus=&quot;1&quot; ReceiptLayoutId=&quot;0&quot; AdressNormalizationUpdate=&quot;N&quot; CompanyName=&quot;&quot; EMailAddress=&quot;&quot; ProcessingPrevention=&quot;false&quot; ReceiptType=&quot;0&quot;&gt;&lt;Cards&gt;&lt;Card Id=&quot;${CardID_1}&quot; CardStatus=&quot;1&quot; ExpirationDate=&quot;2056-12-31T00:00:00&quot; BarcodeId=&quot;16&quot;/&gt;&lt;/Cards&gt;&lt;MemberSegments&gt;&lt;Segment SegmentInternalKey=&quot;2&quot; Id=&quot;1&quot;&gt;&lt;/Segment&gt;&lt;/MemberSegments&gt;&lt;MemberAttributes&gt;&lt;Attribute Id=&quot;2400&quot; Value=&quot;0123786&quot; DataType=&quot;String&quot;/&gt;&lt;/MemberAttributes&gt;&lt;MemberAdditionalAddress Country=&quot;0&quot; State=&quot;0&quot; City=&quot;&quot; Street1=&quot;&quot; Street2=&quot;&quot; PostalCode=&quot;&quot; Remarks=&quot;&quot;/&gt;&lt;PrivacySettings OptInConsent=&quot;false&quot;/&gt;&lt;/Member&gt;&lt;/Members&gt;&lt;/HouseHold&gt;]]&gt;&#xd;
         &lt;/hql:in_HouseHold&gt;&#xd;
      &lt;/hql:SaveDemographic&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Extract MemberInternalKey,BuyingUnitInternalKey" enabled="true">
          <stringProp name="dataSource">db_variable2</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

select MemberInternalKey, BuyingUnitInternalKey  from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${CardID_1}&apos; and matrixmemberid=@matrixmemberid)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">MemberInternalKey, BuyingUnitInternalKey</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step1_JDBC Request Promotion Header ID" enabled="true">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))
FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="TestPlan.comments">next promotion header</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">180000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step1_CreatePromotion" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
							&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;jmeter2&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;1&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
								&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,&#xd;
								&quot;Remarks&quot;: &quot;&quot;,&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;si_sp1&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;6&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;0&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;1&quot;,	&#xd;
								&quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
										&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
										&quot;Suspended&quot;: &quot;false&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;LimitItemCount&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;MSUQuantity&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}&#xd;
											]&#xd;
										},								 &#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
											{&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},			&#xd;
						&#xd;
						&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWs/Rest/Promotion.ashx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">&quot;MemberRegistrationRequired&quot;: &quot;1&quot;,&quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager create promotion" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion HTTP create promotion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="207835331">TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">180000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step1_Extract Promotion" enabled="true">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

select ExternalReferenceID from promotionheader
where PromotionHeaderId=&apos;${PromotionHeaderID_1}&apos; and matrixmemberid=@matrixmemberid</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ExternalReferenceID</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">180000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step1 Add RegisteredRedemptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
                  &lt;RegisteredRedemptions&gt;23&lt;/RegisteredRedemptions&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
          &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">RegisterToMultiplePromotions with RegisteredRedemptions=23</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="TestPlan.comments">Verify that back response with &quot;OK&quot; and when a &apos;RegisteredRedemptions&apos; value is sent without an AdjustmentType, the AdjustmentType is assumed to be &apos;Add&apos;.</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step2_JDBC Request Promotion HeaderID" enabled="false">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="query">select(select max(cast(PromotionHeaderID AS INT ))
FROM PromotionHeader
where matrixmemberid=1)+1 AS PromotionHeaderID
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="TestPlan.comments">next promotion header</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step2_Create Promotion" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
							&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;jmeter2&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;1&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
								&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,&#xd;
								&quot;Remarks&quot;: &quot;&quot;,&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;si_sp1&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;6&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;0&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;1&quot;,	&#xd;
								&quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;,											&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
										&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
										&quot;Suspended&quot;: &quot;false&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;LimitItemCount&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;MSUQuantity&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}&#xd;
											]&#xd;
										},								 &#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
											{&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},			&#xd;
						&#xd;
						&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWs/Rest/Promotion.ashx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">&quot;MemberRegistrationRequired&quot;: &quot;1&quot;, &quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion HTTP create promotion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="207835331">TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager create promotion" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step2_Extract Promotion" enabled="false">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select ExternalReferenceID from promotionheader
where PromotionHeaderId=&apos;${PromotionHeaderID_1}&apos; and matrixmemberid=1</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ExternalReferenceID</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">180000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step2_AdjustmentType=1 with RegisteredRedemptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
                  &lt;RegisteredRedemptions&gt;32&lt;/RegisteredRedemptions&gt;&#xd;
                  &lt;AdjustmentType&gt;1&lt;/AdjustmentType&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">RegisterToMultiplePromotions</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step3_AdjustmentType=2 with RegisteredRedemptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;   &#xd;
                  &lt;RegisteredRedemptions&gt;12&lt;/RegisteredRedemptions&gt;              &#xd;
                  &lt;AdjustmentType&gt;2&lt;/AdjustmentType&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">RegisterToMultiplePromotions</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step4_JDBC Request Promotion HeaderID" enabled="false">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="query">select(select max(cast(PromotionHeaderID AS INT ))
FROM PromotionHeader
where matrixmemberid=1)+1 AS PromotionHeaderID
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="TestPlan.comments">next promotion header</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step4_Create Promotion" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;1&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
							&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;jmeter2&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;1&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
								&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,&#xd;
								&quot;Remarks&quot;: &quot;&quot;,&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;si_sp1&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;6&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;0&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;1&quot;,			&#xd;
								&quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;,	&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
										&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
										&quot;Suspended&quot;: &quot;false&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;LimitItemCount&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;MSUQuantity&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}&#xd;
											]&#xd;
										},								 &#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
											{&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},			&#xd;
						&#xd;
						&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWs/Rest/Promotion.ashx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">&quot;MemberRegistrationRequired&quot;: &quot;1&quot;, &quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion HTTP create promotion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="207835331">TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager create promotion" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step4_Extract Promotion" enabled="false">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;1&apos;)

select ExternalReferenceID from promotionheader
where PromotionHeaderId=&apos;${PromotionHeaderID_1}&apos; and matrixmemberid=@matrixmemberid</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ExternalReferenceID</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">180000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step4_RegisteredRedemptions and AdjustmentType = 1 (Add)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
                  &lt;RegisteredRedemptions&gt;44&lt;/RegisteredRedemptions&gt;&#xd;
                  &lt;AdjustmentType&gt;1&lt;/AdjustmentType&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">RegisterToMultiplePromotions</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="TestPlan.comments">Verify that Registered Redemptions can be added to a Household for a Registered Promotion set with ‘Limit Set Per Household’ during the Promotion Registration process</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step5_JDBC Request Promotion HeaderID" enabled="true">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))
FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="TestPlan.comments">next promotion header</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step5_Create Promotion" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
							&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;jmeter2&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;1&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
								&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,&#xd;
								&quot;Remarks&quot;: &quot;&quot;,&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;si_sp1&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;6&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;0&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;1&quot;,		&#xd;
								&quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;,&#xd;
								&quot;DefaultRedemptionLimit&quot;: &quot;52&quot;,				&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
										&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
										&quot;Suspended&quot;: &quot;false&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;LimitItemCount&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;MSUQuantity&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}&#xd;
											]&#xd;
										},								 &#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
											{&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},			&#xd;
						&#xd;
						&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWs/Rest/Promotion.ashx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">&quot;MemberRegistrationRequired&quot;: &quot;1&quot;, &quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;,  &quot;DefaultRedemptionLimit&quot;=value</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion HTTP create promotion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="207835331">TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager create promotion" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step5_Extract Promotion" enabled="true">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

select ExternalReferenceID from promotionheader
where PromotionHeaderId=&apos;${PromotionHeaderID_1}&apos; and matrixmemberid=@matrixmemberid</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ExternalReferenceID</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">180000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step5 RegisterToMultiplePromotions without new fields" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">RegisterToMultiplePromotions</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="TestPlan.comments">Verify that Household can be registered to a Registered Promotion with ‘Limit Set Per Household’ without the Registered Redemption value when the promotion is set with a &apos;Default Redemption Limit&apos; using each web method</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step6_JDBC Request Promotion HeaderID" enabled="true">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))
FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="TestPlan.comments">next promotion header</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step6_Create Promotion" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
							&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;jmeter2&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;1&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
								&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,&#xd;
								&quot;Remarks&quot;: &quot;&quot;,&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;si_sp1&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;6&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;0&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;1&quot;,		&#xd;
								&quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;,&#xd;
								&quot;DefaultRedemptionLimit&quot;: &quot;999&quot;,												&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
										&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
										&quot;Suspended&quot;: &quot;false&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;LimitItemCount&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;MSUQuantity&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}&#xd;
											]&#xd;
										},								 &#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
											{&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},			&#xd;
						&#xd;
						&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWs/Rest/Promotion.ashx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">&quot;MemberRegistrationRequired&quot;: &quot;1&quot;, &quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;,&quot;DefaultRedemptionLimit&quot;: &quot;999&quot;,	</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion HTTP create promotion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="207835331">TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager create promotion" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step6_Extract Promotion" enabled="true">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

select ExternalReferenceID from promotionheader
where PromotionHeaderId=&apos;${PromotionHeaderID_1}&apos; and matrixmemberid=@matrixmemberid</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ExternalReferenceID</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">180000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step6_RegisteredRedemptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">RegisterToMultiplePromotions</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="TestPlan.comments">Verify when a value has been set as the ‘Default Redemption Limit’ on a Registered Promotion and a Household is registered to the promotion without a ‘RegisteredRedemptions’ value in the WS requests using each web method, that the ‘Default Redemption Limit’ is used to populate the ‘Registered Redemptions’ attribute for the Household
</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step7_JDBC Request Promotion HeaderID" enabled="true">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))
FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="TestPlan.comments">next promotion header</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step7_Create Promotion" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
							&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;jmeter2&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;1&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
								&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,&#xd;
								&quot;Remarks&quot;: &quot;&quot;,&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;si_sp1&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;6&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;0&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;1&quot;,&#xd;
								&quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
										&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
										&quot;Suspended&quot;: &quot;false&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;LimitItemCount&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;MSUQuantity&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}&#xd;
											]&#xd;
										},								 &#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
											{&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},			&#xd;
						&#xd;
						&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWs/Rest/Promotion.ashx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">&quot;MemberRegistrationRequired&quot;: &quot;1&quot;, &quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion HTTP create promotion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="207835331">TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager create promotion" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step7_Extract Promotion" enabled="true">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

select ExternalReferenceID from promotionheader
where PromotionHeaderId=&apos;${PromotionHeaderID_1}&apos; and matrixmemberid=@matrixmemberid</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ExternalReferenceID</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">180000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step7 Error 60390 When a ‘RegisteredRedemptions’ value is not sent and the promotion is not set with a ‘Default Redemption Limit’" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Missing AdjustmentType</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Error" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-63073625">&lt;ErrorCode&gt;60390&lt;/ErrorCode&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">No Default Redemption Limit is set for the promotion. A Registered Redemptions value must be provided to register the Household to this promotion.</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="TestPlan.comments">No Default Redemption Limit is set for the promotion. A Registered Redemptions value must be provided to register the Household to this promotion</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step7 Error 60390 When a ‘RegisteredRedemptions’ value is not sent and the promotion is not set with a ‘Default Redemption Limit’" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
                  &lt;AdjustmentType&gt;1&lt;/AdjustmentType&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">AdjustmentType = 1</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Error" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-63073625">&lt;ErrorCode&gt;60390&lt;/ErrorCode&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">No Default Redemption Limit is set for the promotion. A Registered Redemptions value must be provided to register the Household to this promotion.</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="TestPlan.comments">No Default Redemption Limit is set for the promotion. A Registered Redemptions value must be provided to register the Household to this promotion</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step8_JDBC Request Promotion HeaderID" enabled="false">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))
FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="TestPlan.comments">next promotion header</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step8_Create Promotion" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
							&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;jmeter2&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;1&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
								&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,&#xd;
								&quot;Remarks&quot;: &quot;&quot;,&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;si_sp1&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;6&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;0&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;1&quot;,		&#xd;
								&quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;,												&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
										&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
										&quot;Suspended&quot;: &quot;false&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;LimitItemCount&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;MSUQuantity&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}&#xd;
											]&#xd;
										},								 &#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
											{&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},			&#xd;
						&#xd;
						&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWs/Rest/Promotion.ashx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">&quot;MemberRegistrationRequired&quot;: &quot;1&quot;, &quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion HTTP create promotion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="207835331">TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager create promotion" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step8_Extract Promotion" enabled="false">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select ExternalReferenceID from promotionheader
where PromotionHeaderId=&apos;${PromotionHeaderID_1}&apos; and matrixmemberid=1</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ExternalReferenceID</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">180000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step8 AdjustmentType=1 Add RegisteredRedemptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;    &#xd;
                  &lt;RegisteredRedemptions&gt;20&lt;/RegisteredRedemptions&gt;&#xd;
                  &lt;AdjustmentType&gt;1&lt;/AdjustmentType&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">RegisterToMultiplePromotions</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step8 AdjustmentType=2 Deduct RegisteredRedemptions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;    &#xd;
                  &lt;RegisteredRedemptions&gt;4&lt;/RegisteredRedemptions&gt;&#xd;
                  &lt;AdjustmentType&gt;2&lt;/AdjustmentType&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">RegisterToMultiplePromotions</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step9_JDBC Request Promotion Header ID" enabled="false">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))
FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="TestPlan.comments">next promotion header</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step9_Create Promotion" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
							&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;jmeter2&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;1&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
								&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,&#xd;
								&quot;Remarks&quot;: &quot;&quot;,&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;si_sp1&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;6&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;0&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;1&quot;,&#xd;
								&quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
										&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
										&quot;Suspended&quot;: &quot;false&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;LimitItemCount&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;MSUQuantity&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}&#xd;
											]&#xd;
										},								 &#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
											{&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},			&#xd;
						&#xd;
						&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWs/Rest/Promotion.ashx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">&quot;MemberRegistrationRequired&quot;: &quot;1&quot;, &quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion HTTP create promotion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="207835331">TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager create promotion" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step9_Extract Promotion" enabled="false">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

select ExternalReferenceID from promotionheader
where PromotionHeaderId=&apos;${PromotionHeaderID_1}&apos; and matrixmemberid=@matrixmemberid</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ExternalReferenceID</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">180000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error 60391 When AdjustmentType=”2”(Deduct) and the Household is not registered to the promotion" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
                  &lt;RegisteredRedemptions&gt;2&lt;/RegisteredRedemptions&gt;&#xd;
                  &lt;AdjustmentType&gt;2&lt;/AdjustmentType&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">AdjustmentType=2</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Error" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">&quot;Cannot perform deduct action on a Household that is not registered.&quot;</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="TestPlan.comments">Cannot perform deduct action on a Household that is not registered.</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Error 60391 When AdjustmentType=”2”(Deduct) and the Household is not registered to the promotion" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
                  &lt;AdjustmentType&gt;2&lt;/AdjustmentType&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">AdjustmentType = 2</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Error" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="872183057">Status=&quot;Error&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">Cannot perform deduct action on a Household that is not registered.</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="TestPlan.comments">No Default Redemption Limit is set for the promotion. A Registered Redemptions value must be provided to register the Household to this promotion</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step10_JDBC Request Promotion HeaderID" enabled="true">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))
FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="TestPlan.comments">next promotion header</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step10_Create Promotion" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
							&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;jmeter2&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;1&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
								&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,&#xd;
								&quot;Remarks&quot;: &quot;&quot;,&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;si_sp1&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;6&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;0&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;1&quot;,&#xd;
								&quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;,&#xd;
								&quot;DefaultRedemptionLimit&quot;: &quot;24&quot;,		&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
										&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
										&quot;Suspended&quot;: &quot;false&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;LimitItemCount&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;MSUQuantity&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}&#xd;
											]&#xd;
										},								 &#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
											{&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},			&#xd;
						&#xd;
						&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWs/Rest/Promotion.ashx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">&quot;MemberRegistrationRequired&quot;: &quot;1&quot;, &quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;, &quot;DefaultRedemptionLimit&quot;: &quot;14&quot;</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion HTTP create promotion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="207835331">TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager create promotion" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step10_Extract Promotion" enabled="true">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

select ExternalReferenceID from promotionheader
where PromotionHeaderId=&apos;${PromotionHeaderID_1}&apos; and matrixmemberid=@matrixmemberid</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ExternalReferenceID</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">180000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step10 Error 60392 prepare data" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
                  &lt;RegisteredRedemptions&gt;20&lt;/RegisteredRedemptions&gt;&#xd;
                  &lt;AdjustmentType&gt;1&lt;/AdjustmentType&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">RegisteredRedemption value sent is &gt; the Registered Redemption Current Balance</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Error" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">&quot;The value entered to deduct from Registered Redemptions is greater than or equal to the Registered Redemptions available. No change has occurred for this Household.&quot;</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="TestPlan.comments">The value entered to deduct from Registered Redemptions is greater than or equal to the Registered Redemptions available. No change has occurred for this Household.</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step10 Error 60392 When RegisteredRedemptions in the request is &gt;= the Household’s current Registered Redemptions balance and the AdjustmentType=’2’(Deduct)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
                  &lt;RegisteredRedemptions&gt;23&lt;/RegisteredRedemptions&gt;&#xd;
                  &lt;AdjustmentType&gt;2&lt;/AdjustmentType&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">RegisteredRedemption value sent is &gt; the Registered Redemption Current Balance</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Error" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-649879639">&lt;ErrorCode&gt;60392&lt;/ErrorCode&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">&quot;The value entered to deduct from Registered Redemptions is greater than or equal to the Registered Redemptions available. No change has occurred for this Household.&quot;</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="TestPlan.comments">The value entered to deduct from Registered Redemptions is greater than or equal to the Registered Redemptions available. No change has occurred for this Household.</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step11 Error 60392 prepare data" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
                  &lt;RegisteredRedemptions&gt;14&lt;/RegisteredRedemptions&gt;&#xd;
                  &lt;AdjustmentType&gt;1&lt;/AdjustmentType&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">RegisteredRedemption value sent is = the Registered Redemption Current Balance</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Error" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">&quot;The value entered to deduct from Registered Redemptions is greater than or equal to the Registered Redemptions available. No change has occurred for this Household.&quot;</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="TestPlan.comments">The value entered to deduct from Registered Redemptions is greater than or equal to the Registered Redemptions available. No change has occurred for this Household.</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step11 Error 60392 When RegisteredRedemptions in the request is &gt;= the Household’s current Registered Redemptions balance and the AdjustmentType=’2’(Deduct)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
                  &lt;RegisteredRedemptions&gt;120&lt;/RegisteredRedemptions&gt;&#xd;
                  &lt;AdjustmentType&gt;2&lt;/AdjustmentType&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">RegisteredRedemption value sent is = the Registered Redemption Current Balance</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Error" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-649879639">&lt;ErrorCode&gt;60392&lt;/ErrorCode&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">&quot;The value entered to deduct from Registered Redemptions is greater than or equal to the Registered Redemptions available. No change has occurred for this Household.&quot;</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="TestPlan.comments">The value entered to deduct from Registered Redemptions is greater than or equal to the Registered Redemptions available. No change has occurred for this Household.</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step12 Error 60393 When the RegisteredRedemptions in the request will cause the Household’s current Registered Redemption balance to exceed that maximum allowed of 999" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
                  &lt;RegisteredRedemptions&gt;1000&lt;/RegisteredRedemptions&gt;&#xd;
                  &lt;AdjustmentType&gt;1&lt;/AdjustmentType&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments"> ‘Registered Redemptions’ causes the balance to exceed the supported maximum (999)</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Error" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="872183057">Status=&quot;Error&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">“The RegisteredRedemptions value results in the balance exceeding the maximum allowed for a Household of 999. No change to the balance occurred for this Household.”</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="TestPlan.comments"> ‘Registered Redemptions’ causes the balance to exceed the supported maximum (999)</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step12 Add 500" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
                  &lt;RegisteredRedemptions&gt;500&lt;/RegisteredRedemptions&gt;&#xd;
                  &lt;AdjustmentType&gt;1&lt;/AdjustmentType&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments"> ‘Registered Redemptions’ causes the balance to exceed the supported maximum (999)</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Status=&quot;Ok&quot;" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">“The RegisteredRedemptions value results in the balance exceeding the maximum allowed for a Household of 999. No change to the balance occurred for this Household.”</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="TestPlan.comments"> ‘Registered Redemptions’ causes the balance to exceed the supported maximum (999)</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step12 Add 500 Error 60393 When the RegisteredRedemptions in the request will cause the Household’s current Registered Redemption balance to exceed that maximum allowed of 999" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
                  &lt;RegisteredRedemptions&gt;500&lt;/RegisteredRedemptions&gt;&#xd;
                  &lt;AdjustmentType&gt;1&lt;/AdjustmentType&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments"> ‘Registered Redemptions’ causes the balance to exceed the supported maximum (999)</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Error" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1206546645">RegisterToMultipleExternalPromotionsResult Status=&quot;Error&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">“The RegisteredRedemptions value results in the balance exceeding the maximum allowed for a Household of 999. No change to the balance occurred for this Household.”</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="TestPlan.comments"> ‘Registered Redemptions’ causes the balance to exceed the supported maximum (999)</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step11 Error 60392 When RegisteredRedemptions in the request is &gt;= the Household’s current Registered Redemptions balance and the AdjustmentType=’2’(Deduct)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
                  &lt;RegisteredRedemptions&gt;800&lt;/RegisteredRedemptions&gt;&#xd;
                  &lt;AdjustmentType&gt;2&lt;/AdjustmentType&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">in MS displayed 500 , try deduct 800</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Error" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-649879639">&lt;ErrorCode&gt;60392&lt;/ErrorCode&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">&quot;The value entered to deduct from Registered Redemptions is greater than or equal to the Registered Redemptions available. No change has occurred for this Household.&quot;</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="TestPlan.comments">The value entered to deduct from Registered Redemptions is greater than or equal to the Registered Redemptions available. No change has occurred for this Household.</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step13_JDBC Request Promotion HeaderID" enabled="true">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))
FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="TestPlan.comments">next promotion header</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step13_Create Promotion" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
							&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;jmeter2&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;1&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
								&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,&#xd;
								&quot;Remarks&quot;: &quot;&quot;,&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;si_sp1&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;6&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;0&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;1&quot;,	&#xd;
								&quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;,													&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;00:00:00)}&quot;,&#xd;
										&quot;EndDate&quot;: &quot;${__timeShift(yyyy-MM-dd&apos;T&apos;00:00:00,,P2D,,)}&quot;,&#xd;
										&quot;Suspended&quot;: &quot;false&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;LimitItemCount&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;MSUQuantity&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}&#xd;
											]&#xd;
										},								 &#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
											{&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},			&#xd;
						&#xd;
						&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWs/Rest/Promotion.ashx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">&quot;MemberRegistrationRequired&quot;: &quot;1&quot;, &quot;RegisteredPromotionRedemption&quot;: &quot;2&quot;</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion HTTP create promotion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="207835331">TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager create promotion" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Step13_Extract Promotion" enabled="true">
          <stringProp name="dataSource">db_variable</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)

set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=&apos;${RetailerID}&apos;)

select ExternalReferenceID from promotionheader
where PromotionHeaderId=&apos;${PromotionHeaderID_1}&apos; and matrixmemberid=@matrixmemberid</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ExternalReferenceID</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">180000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step13 HP" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
                  &lt;RegisteredRedemptions&gt;30&lt;/RegisteredRedemptions&gt;&#xd;
                  &lt;AdjustmentType&gt;1&lt;/AdjustmentType&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">RegisterToMultiplePromotions</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Step14 HP" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:RegisterToMultipleExternalPromotions&gt;&#xd;
         &lt;RegisterMultiplePromotionsRequest&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;ClubCardId&gt;${CardID_1}&lt;/ClubCardId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;Promotions&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;Promotion&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;ID&gt;${ExternalReferenceID_1}&lt;/ID&gt;&#xd;
                  &lt;RegistrationStartDate&gt;${__time(yyyy-MM-dd)}&lt;/RegistrationStartDate&gt;&#xd;
                  &lt;RegistrationEndDate&gt;${__timeShift(yyyy-MM-dd,,P2D,,)}&lt;/RegistrationEndDate&gt;&#xd;
                  &lt;RegisteredRedemptions&gt;70&lt;/RegisteredRedemptions&gt;&#xd;
               &lt;/Promotion&gt;&#xd;
            &lt;/Promotions&gt;&#xd;
         &lt;/RegisterMultiplePromotionsRequest&gt;&#xd;
      &lt;/hql:RegisterToMultipleExternalPromotions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">RegisterToMultiplePromotions</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MSG1 -2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:web=&quot;http://www.retalix.com/rema/webservices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;web:GetMemberData&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_RetailerId&gt;${RetailerID}&lt;/web:in_RetailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;web:in_XML&gt;&lt;![CDATA[&lt;Log&gt;&lt;Customer xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; MsgType=&quot;1&quot; RetailerId=&quot;${RetailerID}&quot; StoreID=&quot;1&quot; ClientID=&quot;11&quot; TransID=&quot;555422&quot; BusinessDate=&quot;${__time(yyyy-MM-dd)}&quot; LPEVer=&quot;5.0.0.0.1&quot; StartDateTime=&quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss)}&quot; TicketIdentifier=&quot;1598322271&quot;&gt;&lt;LoyaltyInfo CardID=&quot;${CardID_1}&quot; CardIDType=&quot;P&quot;  /&gt;&lt;/Customer&gt;&lt;/Log&gt;]]&gt;&lt;/web:in_XML&gt;&#xd;
      &lt;/web:GetMemberData&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberServiceOnline.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">RegisterToMultiplePromotions</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="147801392">MsgType=&quot;2&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request LogOut" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:LogOut/&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">153.77.180.130</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/Authorization/Login.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
