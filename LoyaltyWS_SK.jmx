<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="ServerIP" elementType="Argument">
              <stringProp name="Argument.name">ServerIP</stringProp>
              <stringProp name="Argument.value">153.77.180.130</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_OppInstance" elementType="Argument">
              <stringProp name="Argument.name">DB_OppInstance</stringProp>
              <stringProp name="Argument.value">SRRAADEVGUI</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LoyaltyDB" elementType="Argument">
              <stringProp name="Argument.name">LoyaltyDB</stringProp>
              <stringProp name="Argument.value">Loyalty_LMS_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="RetailerID" elementType="Argument">
              <stringProp name="Argument.name">RetailerID</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="username" elementType="Argument">
              <stringProp name="Argument.name">username</stringProp>
              <stringProp name="Argument.value">hql</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">Abcd123</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ClubcardID1" elementType="Argument">
              <stringProp name="Argument.name">ClubcardID1</stringProp>
              <stringProp name="Argument.value">1000112222</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ClubcardID2" elementType="Argument">
              <stringProp name="Argument.name">ClubcardID2</stringProp>
              <stringProp name="Argument.value">1000112233</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ClubcardID" elementType="Argument">
              <stringProp name="Argument.name">ClubcardID</stringProp>
              <stringProp name="Argument.value">1000435345</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PromotionContinuity" elementType="Argument">
              <stringProp name="Argument.name">PromotionContinuity</stringProp>
              <stringProp name="Argument.value">263</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PromotionInternalKey" elementType="Argument">
              <stringProp name="Argument.name">PromotionInternalKey</stringProp>
              <stringProp name="Argument.value">130</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AccountID" elementType="Argument">
              <stringProp name="Argument.name">AccountID</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FutureDate" elementType="Argument">
              <stringProp name="Argument.name">FutureDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P2D,,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CurrentDateTime" elementType="Argument">
              <stringProp name="Argument.name">CurrentDateTime</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FutureDateExp" elementType="Argument">
              <stringProp name="Argument.name">FutureDateExp</stringProp>
              <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P15D,,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PromotionHeaderId" elementType="Argument">
              <stringProp name="Argument.name">PromotionHeaderId</stringProp>
              <stringProp name="Argument.value">780</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="promotionExternalKey" elementType="Argument">
              <stringProp name="Argument.name">promotionExternalKey</stringProp>
              <stringProp name="Argument.value">852369</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TranStartDate" elementType="Argument">
              <stringProp name="Argument.name">TranStartDate</stringProp>
              <stringProp name="Argument.value">2022-01-01</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TranEndDate" elementType="Argument">
              <stringProp name="Argument.name">TranEndDate</stringProp>
              <stringProp name="Argument.value">2025-04-01</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Barcode" elementType="Argument">
              <stringProp name="Argument.name">Barcode</stringProp>
              <stringProp name="Argument.value">31522112301000012478</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ExpAccountID" elementType="Argument">
              <stringProp name="Argument.name">ExpAccountID</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration- Loyalty DB" enabled="true">
          <stringProp name="dataSource">loyalty</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://${DB_OppInstance};databaseName=${LoyaltyDB}</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="username">sa</stringProp>
          <stringProp name="password">Abcd1234@</stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager - Loyalty Flow" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">charset</stringProp>
              <stringProp name="Header.value">utf-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - Log In " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:UserLogin&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_UserName&gt;${username}&lt;/hql:in_UserName&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_Password&gt;${password}&lt;/hql:in_Password&gt;&#xd;
      &lt;/hql:UserLogin&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/Authorization/login.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">${session}</stringProp>
            <stringProp name="XPathExtractor.refname">session</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_SessionKey</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Scope.variable"></stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetTaiwanEinvoiceHistory" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetTaiwanEinvoiceHistory&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:GetTaiwanEinvoiceHistoryRequest Identifier=&quot;${ClubcardID}&quot; StartDate=&quot;20200101&quot; EndDate=&quot;20201030&quot; DataResolutionLevel=&quot;0&quot;/&gt;&#xd;
      &lt;/hql:GetTaiwanEinvoiceHistory&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-out_HouseHold" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">out_HouseHold</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_HouseHold</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-Note" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">ID</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Accounts/Account[1]/@Id</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">out_Notes</stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetContinuityPromotionDetailedTransactions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetContinuityPromotionDetailedTransactions&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_ClubCardId&gt;${ClubcardID1}&lt;/hql:in_ClubCardId&gt;&#xd;
         &lt;hql:in_PromotionHeaderId&gt;${PromotionContinuity}&lt;/hql:in_PromotionHeaderId&gt;&#xd;
      &lt;/hql:GetContinuityPromotionDetailedTransactions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">153.77.180.130</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-out_ContinuityPromotionTransactions" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">out_ContinuityPromotionTransactions</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_ContinuityPromotionTransactions</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-PromCount" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">PromCount1</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">count(//ContinuityProgramTransactions/ContinuityProgramTransaction)</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">out_ContinuityPromotionTransactions</stringProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID1}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-PromCount1" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from CRM_POSPromotionActivity 
where buyingunitinternalkey=${dbbuyingunitinternalkey_1} and promotioninternalkey=${PromotionContinuity}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbPromCount1</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbPromCount1_1}&quot;;
String actual = &quot;${PromCount1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetFilteredMemberAccountDetailedTransactionsByDate" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetFilteredMemberAccountDetailedTransactionsByDates&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:memberIdentifier&gt;${ClubcardID1}&lt;/hql:memberIdentifier&gt;&#xd;
         &lt;hql:memberAccountId&gt;${AccountID}&lt;/hql:memberAccountId&gt;&#xd;
         &lt;hql:startDate&gt;2021-11-03&lt;/hql:startDate&gt;&#xd;
         &lt;hql:endDate&gt;2056-11-23&lt;/hql:endDate&gt;&#xd;
      &lt;/hql:GetFilteredMemberAccountDetailedTransactionsByDates&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-out_HouseHoldTransactions" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">out_HouseHoldTransactions</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_HouseHoldTransactions</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-CountAcc" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">CountAcc</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">count(//Transactions/Transaction)</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">out_HouseHoldTransactions</stringProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID1}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-AccINK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select AccountInternalkey from CRM_AccumulatedAccounts where accountid=${AccountID} and matrixmemberid=@matrixmemberid
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbAccountInternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count (*) from CRM_POSAccountsActivity 
where buyingunitinternalkey=${dbbuyingunitinternalkey_1} and accountinternalkey=${dbAccountInternalkey_1}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbCountAcc</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbCountAcc_1}&quot;;
String actual = &quot;${CountAcc}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetTransactionImage" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetTransactionImage&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_TransactionXml&gt;&lt;![CDATA[&lt;Transaction StoreId=&quot;1&quot; PosDateTime=&quot;2021-11-22&quot; PosId=&quot;1&quot; TranId=&quot;5966712&quot; StartDateTime=&quot;2021-11-22T13:41:22&quot; ClubCardId=&quot;${ClubcardID}&quot; CreatedAt=&quot;2021-11-22&quot; UpdatedBy=&quot;1&quot; TotalAmount=&quot;100.0000&quot; StoreName=&quot;Store 1&quot; IsTransactionVoid=&quot;false&quot; /&gt;]]&gt;&lt;/hql:in_TransactionXml&gt;&#xd;
      &lt;/hql:GetTransactionImage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetRegisterToPromotionHistory" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetRegisterToPromotionHistory&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:clubCardId&gt;${ClubcardID1}&lt;/hql:clubCardId&gt;&#xd;
      &lt;/hql:GetRegisterToPromotionHistory&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-outPromotionsHistoryXml" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">outPromotionsHistoryXml</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//outPromotionsHistoryXml</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-CountPromo" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">CountPromo</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">count(//Promotions/Promotion)</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">outPromotionsHistoryXml</stringProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID1}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from CRM_BuyingUnitPromotion  where  BuyingUnitInternalKey=${dbbuyingunitinternalkey_1}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbPromoCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbPromoCount_1}&quot;;
String actual = &quot;${CountPromo}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetRegisterToPromotionHistoryByExternalId" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetRegisterToPromotionHistoryByExternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:clubCardId&gt;${ClubcardID}&lt;/hql:clubCardId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotionExternalKey&gt;${promotionExternalKey}&lt;/hql:promotionExternalKey&gt;&#xd;
      &lt;/hql:GetRegisterToPromotionHistoryByExternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-outPromotionsHistoryXml" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">outPromotionsHistoryXml</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//outPromotionsHistoryXml</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-CountPromo1" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">CountPromo1</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">count(//Promotions/Promotion)</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">outPromotionsHistoryXml</stringProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from CRM_BuyingUnitPromotionHistory 
--where  BuyingUnitInternalKey=1051  and promotionheaderid=130
where  BuyingUnitInternalKey=${dbbuyingunitinternalkey_1}  and promotionheaderid=${PromotionInternalKey}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbPromoCount1</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbPromoCount1_1}&quot;;
String actual = &quot;${CountPromo1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetRegisterToPromotionHistoryByInternalId" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetRegisterToPromotionHistoryByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:clubCardId&gt;${ClubcardID}&lt;/hql:clubCardId&gt;&#xd;
         &lt;hql:promotionInternalKey&gt;${PromotionInternalKey}&lt;/hql:promotionInternalKey&gt;&#xd;
      &lt;/hql:GetRegisterToPromotionHistoryByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberPromotions.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-outPromotionsHistoryXml" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">outPromotionsHistoryXml</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//outPromotionsHistoryXml</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-CountPromo2" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">CountPromo2</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">count(//Promotions/Promotion)</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">outPromotionsHistoryXml</stringProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from CRM_BuyingUnitPromotionHistory 
where  BuyingUnitInternalKey=${dbbuyingunitinternalkey_1}  and promotionheaderid=${PromotionInternalKey}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbPromoCount2</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbPromoCount2_1}&quot;;
String actual = &quot;${CountPromo2}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetHouseHoldAccountsActivity " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#xd;
&lt;soap:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetHouseHoldAccountsActivity xmlns=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
      &lt;in_ClubCardId&gt;${ClubcardID1}&lt;/in_ClubCardId&gt;&#xd;
    &lt;/GetHouseHoldAccountsActivity&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-out_Accounts" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">out_Accounts</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_Accounts</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-CountAcc2" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">CountAcc2</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">count(/Accounts/Account)</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">out_Accounts</stringProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID1}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from CRM_BuyingUnitAccountsActivity where buyingunitinternalkey=${dbbuyingunitinternalkey_1}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbCountAcc2</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbCountAcc2_1}&quot;;
String actual = &quot;${CountAcc2}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">loyalty</stringProp>
          <stringProp name="query">declare @CurrentHeadClubCardId as nvarchar(200),
@NewHeadClubCardId as nvarchar(200)

select top 1 @CurrentHeadClubCardId=TargetClubCardId,@NewHeadClubCardId=SourceClubCardId from CRM_BuyingUnitHistory where buyingunitinternalkey=(Select top 1 SourceBuyingUnitInternalKey from CRM_BuyingUnitHistory Where EventId = &apos;4&apos; and SourceClubCardId != &apos;NULL&apos; and TargetClubCardId != &apos;NULL&apos; Order by createdDate desc) and eventid=4 order by buyingunithistoryid desc
select @CurrentHeadClubCardId,@NewHeadClubCardId</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">CurrentHeadClubCardId,NewHeadClubCardId</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-ChangeHouseHoldHead" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:ChangeHouseHoldHead&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_CurrentHeadClubCardId&gt;${CurrentHeadClubCardId_1}&lt;/hql:in_CurrentHeadClubCardId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_NewHeadClubCardId&gt;${NewHeadClubCardId_1}&lt;/hql:in_NewHeadClubCardId&gt;&#xd;
      &lt;/hql:ChangeHouseHoldHead&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetHHNotes" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soap:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetHHNotes xmlns=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
      &lt;in_ClubCardId&gt;${ClubcardID1}&lt;/in_ClubCardId&gt;&#xd;
      &lt;in_RetailerId&gt;${RetailerID}&lt;/in_RetailerId&gt;&#xd;
    &lt;/GetHHNotes&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-OutNotes" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">out_Notes</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_Notes</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-CountNote" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">CountNotes</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">count(//Notes/Note)</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">out_Notes</stringProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID1}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count (*) from CRM_BuyingUnitNotes where  BuyingUnitInternalKey=${dbbuyingunitinternalkey_1}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbNotesCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbNotesCount_1}&quot;;
String actual = &quot;${CountNotes}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetHouseHoldMembersDemographicByExternalId" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetHouseHoldMembersDemographicByExternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:request&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;hql:HouseHoldExternalId&gt;&lt;/hql:HouseHoldExternalId&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;hql:MemberExternalId&gt;${ClubcardID}&lt;/hql:MemberExternalId&gt;&#xd;
         &lt;/hql:request&gt;&#xd;
      &lt;/hql:GetHouseHoldMembersDemographicByExternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-out_HouseHold" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">out_HouseHold</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_HouseHold</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-MemberCard" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MemberCard</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//HouseHolds/HouseHold/Members/Member/Cards/Card/@Id</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">out_HouseHold</stringProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select clubcardid from crm_clubcard where clubcardid=${ClubcardID}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbmemcard</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${ClubcardID}&quot;;
String actual = &quot;${MemberCard}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetHouseHoldDocumentsActivity" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetHouseHoldDocumentsActivity&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_ClubCardId&gt;${ClubcardID}&lt;/hql:in_ClubCardId&gt;&#xd;
      &lt;/hql:GetHouseHoldDocumentsActivity&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/LoyaltyDocuments/HouseHoldDocumentsActivity.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-OutNotes" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">out_Documents_Transactions</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_Documents_Transactions</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-CountDoc" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">CountDoc</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">count(//LoyaltyDocuments/LoyaltyDocument)</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">out_Documents_Transactions</stringProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">
select count(*) from crm_loyaltydocuments  where  issuedBuyingUnitInternalKey=${dbbuyingunitinternalkey_1} and status=0</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbDocCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbDocCount_1}&quot;;
String actual = &quot;${CountDoc}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetHouseHoldContinuityPromotionsActivity" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#xd;
&lt;soap:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetHouseHoldContinuityPromotionsActivity xmlns=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
      &lt;in_ClubCardId&gt;${ClubcardID1}&lt;/in_ClubCardId&gt;&#xd;
    &lt;/GetHouseHoldContinuityPromotionsActivity&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-out_ContinuityPromotions" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">out_ContinuityPromotions</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_ContinuityPromotions</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Scope.variable"></stringProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-PromCount" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">PromCount</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">count(//ContinuityPrograms/ContinuityProgram)</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">out_ContinuityPromotions</stringProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID1}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from CRM_BuyingUnitPromotionActivity where buyingunitinternalkey=${dbbuyingunitinternalkey_1}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbPromCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbPromCount_1}&quot;;
String actual = &quot;${PromCount}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetHouseHoldFilteredTransactions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetHouseHoldFilteredTransactions&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_ClubCardId&gt;${ClubcardID}&lt;/hql:in_ClubCardId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:xmlFilter&gt;&#xd;
            &lt;Filter MaxRows=&quot;100&quot; ManualTransactionsOnly=&quot;1&quot; PosTransactionsOnly=&quot;0&quot; StartDate=&quot;${TranStartDate}&quot; EndDate=&quot;${TranEndDate}&quot;&gt;&#xd;
&lt;/Filter&gt;&#xd;
         &lt;/hql:xmlFilter&gt;&#xd;
      &lt;/hql:GetHouseHoldFilteredTransactions&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Xpath out_HouseHoldTransactions" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">out_HouseHoldTransactions</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_HouseHoldTransactions</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-CountAccountTran" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">CountAccTranF</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">count(//Transactions/Transaction)</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">out_HouseHoldTransactions</stringProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from CRM_POSTran where buyingunitinternalkey=${dbbuyingunitinternalkey_1} and startdatetime&gt;=&apos;${TranStartDate}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbAccTranCountF</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbAccTranCountF_1}&quot;;
String actual = &quot;${CountAccTranF}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetHouseHoldMembers" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;&#xd;
	&lt;soap:Body&gt;&#xd;
		&lt;GetHouseHoldMembers xmlns=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
			&lt;in_ClubCardId&gt;${ClubcardID2}&lt;/in_ClubCardId&gt;&#xd;
		&lt;/GetHouseHoldMembers&gt;&#xd;
	&lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-out_HouseHold" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">out_HouseHold</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_HouseHold</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-MemCount" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MemCount</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">count(//HouseHold/Members/Member)</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">out_HouseHold</stringProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID2}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from crm_member where buyingunitinternalkey=&apos;${dbbuyingunitinternalkey_1}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbMemCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbMemCount_1}&quot;;
String actual = &quot;${MemCount}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetHouseHoldMembersDemographic " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soap:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
	&lt;soap:Body&gt;&#xd;
		&lt;GetHouseHoldMembersDemographic xmlns=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
			&lt;clubCardId&gt;${ClubcardID2}&lt;/clubCardId&gt;&#xd;
		&lt;/GetHouseHoldMembersDemographic&gt;&#xd;
	&lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-out_HouseHold" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">out_HouseHold</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_HouseHold</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-MemCount" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MemCount</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">count(//HouseHold/Members/Member)</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">out_HouseHold</stringProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID2}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from crm_member where buyingunitinternalkey=&apos;${dbbuyingunitinternalkey_1}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbMemCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbMemCount_1}&quot;;
String actual = &quot;${MemCount}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetHouseHoldTransactions " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#xd;
&lt;soap:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetHouseHoldTransactions xmlns=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
      &lt;in_ClubCardId&gt;${ClubcardID1}&lt;/in_ClubCardId&gt;&#xd;
    &lt;/GetHouseHoldTransactions&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Xpath out_HouseHoldTransactions" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">out_HouseHoldTransactions</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_HouseHoldTransactions</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-CountAccountTran" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">CountAccTran</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">count(//Transactions/Transaction)</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">out_HouseHoldTransactions</stringProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from crm_postran  where clubcardid =&apos;${ClubcardID1}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbAccTranCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbAccTranCount_1}&quot;;
String actual = &quot;${CountAccTran}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetMemberAccountsExpirationActivity" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetMemberAccountsExpirationActivity&gt;&#xd;
         &lt;hql:MemberAccountsExpirationActivityRequest MemberIdentifier=&quot;${ClubcardID}&quot; &gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;hql:Accounts&gt;&#xd;
               &lt;!--Zero or more repetitions:--&gt;&#xd;
               &lt;hql:AccountId&gt;${ExpAccountID}&lt;/hql:AccountId&gt;&#xd;
            &lt;/hql:Accounts&gt;&#xd;
         &lt;/hql:MemberAccountsExpirationActivityRequest&gt;&#xd;
      &lt;/hql:GetMemberAccountsExpirationActivity&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">TotalEarnValue</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Accounts/Account/@TotalEarns</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-AccINK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select AccountInternalkey from CRM_AccumulatedAccounts where accountid=${ExpAccountID} and matrixmemberid=@matrixmemberid
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbAccountInternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--select TotalAccumulated from CRM_BuyingUnitAccountsActivity where buyingunitinternalkey=1738  and accountinternalkey=4
select TotalAccumulated from CRM_BuyingUnitAccountsActivity 
where buyingunitinternalkey=${dbbuyingunitinternalkey_1}  and accountinternalkey=${dbAccountInternalkey_1}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbTotalAcc</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbTotalAcc_1}&quot;;
String actual = &quot;${TotalEarnValue}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetMemberAccountsSummary " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
	&lt;soapenv:Header/&gt;&#xd;
	&lt;soapenv:Body&gt;&#xd;
		&lt;hql:GetMemberAccountsSummary&gt;&#xd;
			&lt;!--Optional:--&gt;&#xd;
			&lt;hql:in_SearchCriteriaXML&gt;&lt;![CDATA[&lt;AccountsSummary&gt;&#xd;
	&lt;Member ClubCardId=&quot;${ClubcardID1}&quot;&gt;&#xd;
		&lt;Account Id=&quot;${AccountID}&quot;/&gt;&#xd;
	&lt;/Member&gt;&#xd;
&lt;/AccountsSummary&gt;&#xd;
]]&gt;&lt;/hql:in_SearchCriteriaXML&gt;&#xd;
		&lt;/hql:GetMemberAccountsSummary&gt;&#xd;
	&lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-out_MemberAccountsSummaryXML" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">out_MemberAccountsSummaryXML</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_MemberAccountsSummaryXML</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-TotalEarns" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">TotalEarns</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Accounts/Account/@TotalEarns</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">out_MemberAccountsSummaryXML</stringProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID1}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-AccINK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select AccountInternalkey from CRM_AccumulatedAccounts where accountid=${AccountID} and matrixmemberid=@matrixmemberid
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbAccountInternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--select TotalAccumulated from CRM_BuyingUnitAccountsActivity where buyingunitinternalkey=1738  and accountinternalkey=2
select TotalAccumulated from CRM_BuyingUnitAccountsActivity
where buyingunitinternalkey=${dbbuyingunitinternalkey_1}  and accountinternalkey=${dbAccountInternalkey_1}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbTotalEarn</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbTotalEarn_1}&quot;;
String actual = &quot;${TotalEarns}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-PendingPointsAdjustmentsRequest" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:PendingPointsAdjustmentsRequest&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:pendingRequest&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:PendingAccountsActivityRequest&gt;&#xd;
               &lt;hql:AccountId&gt;${AccountID}&lt;/hql:AccountId&gt;&#xd;
               &lt;hql:EarnValue&gt;10&lt;/hql:EarnValue&gt;&#xd;
               &lt;hql:EarnStartDate&gt;${FutureDate}&lt;/hql:EarnStartDate&gt;&#xd;
               &lt;hql:ExpirationDate&gt;${FutureDateExp}&lt;/hql:ExpirationDate&gt;&#xd;
               &lt;hql:ReasonCode&gt;1&lt;/hql:ReasonCode&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;hql:Remarks&gt;test&lt;/hql:Remarks&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;hql:ClubCardId&gt;${ClubcardID}&lt;/hql:ClubCardId&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;hql:ExternalReferenceId&gt;1&lt;/hql:ExternalReferenceId&gt;&#xd;
               &lt;hql:TransactionStartDateTime&gt;${CurrentDateTime}&lt;/hql:TransactionStartDateTime&gt;&#xd;
               &lt;hql:TransactionId&gt;74012&lt;/hql:TransactionId&gt;&#xd;
            &lt;/hql:PendingAccountsActivityRequest&gt;&#xd;
         &lt;/hql:pendingRequest&gt;&#xd;
      &lt;/hql:PendingPointsAdjustmentsRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetMemberAccountDetailedPendingTransactions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;soapenv:Envelope xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot; xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
	&lt;soapenv:Header/&gt;&#xd;
	&lt;soapenv:Body&gt;&#xd;
		&lt;hql:GetMemberAccountDetailedPendingTransactions&gt;&#xd;
			&lt;hql:accountId&gt;${AccountID}&lt;/hql:accountId&gt;&#xd;
			&lt;!--Optional:--&gt;&#xd;
			&lt;hql:cardId&gt;${ClubcardID}&lt;/hql:cardId&gt;&#xd;
		&lt;/hql:GetMemberAccountDetailedPendingTransactions&gt;&#xd;
	&lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">TotalPend</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery"> count(//soap:Envelope/soap:Body/*[local-name()=&apos;GetMemberAccountDetailedPendingTransactionsResponse&apos;]/*[local-name()=&apos;returnedPendingAccountActivityList&apos;]/*[local-name()=&apos;ReturnedPendingAccountActivity&apos;]) </stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">true</boolProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-AccINK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select AccountInternalkey from CRM_AccumulatedAccounts where accountid=${AccountID} and matrixmemberid=@matrixmemberid
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbAccountInternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from CRM_PendingAccountsActivity where clubcardid=&apos;${ClubcardID}&apos; and AccountId=${AccountID}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbTotalpend</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbTotalpend_1}&quot;;
String actual = &quot;${TotalPend}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetMemberAccountDetailedTransactions " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#xd;
&lt;soap:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetMemberAccountDetailedTransactions xmlns=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
      &lt;in_ClubCardId&gt;${ClubcardID1}&lt;/in_ClubCardId&gt;&#xd;
      &lt;in_AccountId&gt;${AccountID}&lt;/in_AccountId&gt;&#xd;
    &lt;/GetMemberAccountDetailedTransactions&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath out_Transactions" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">out_Transactions</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_Transactions</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-CountAccount" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">CountAcc</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">count(/AccountTransactions/AccountTransaction)	</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">out_Transactions</stringProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID1}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-AccINK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select AccountInternalkey from CRM_AccumulatedAccounts where accountid=${AccountID} and matrixmemberid=@matrixmemberid
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbAccountInternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from CRM_POSAccountsActivity 
where accountinternalkey=${dbAccountInternalkey_1}  and BuyingUnitInternalKey=${dbbuyingunitinternalkey_1}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbAccTranCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbAccTranCount_1}&quot;;
String actual = &quot;${CountAcc}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetMemberAccountsActivity " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#xd;
&lt;soap:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetMemberAccountsActivity xmlns=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
      &lt;in_ClubCardId&gt;${ClubcardID1}&lt;/in_ClubCardId&gt;&#xd;
    &lt;/GetMemberAccountsActivity&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-out_Accounts" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">out_Accounts</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_Accounts</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID1}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from CRM_BuyingUnitAccountsActivity where buyingunitinternalkey=${dbbuyingunitinternalkey_1}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbAccCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;

StringReader segmentsXml = new StringReader(vars.get(&quot;out_Accounts&quot;));
log.info(vars.get(&quot;out_Accounts&quot;));
DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

//API to obtain DOM Document instance
DocumentBuilder builder = null;

//Create DocumentBuilder with default configuration
builder = factory.newDocumentBuilder();

//Parse the content to Document object
Document doc = builder.parse(new InputSource(segmentsXml));
log.info(doc.getFirstChild().getNodeName());
NodeList dependencyElements = doc.getElementsByTagName(&quot;Account&quot;);
log.info((dependencyElements.getLength()-1).toString());
String Segment_count = (dependencyElements.getLength()-1).toString();
//var.put(&quot;SegmCount&quot;,Segment_count);

String expected = &quot;${dbAccCount_1}&quot;;
//String actual = var.get{&quot;SegmCount&quot;};


if (expected.equals(dependencyElements.getLength().toString()))
{
  Failure = false;
  log.info(&quot;Compared Successfully&quot;);
  //assert expected.equals(dependencyElements.getLength().toString());
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetSegments " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#xd;
&lt;soap:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;GetSegments xmlns=&quot;http://www.retalix.com/HQLWebServices&quot; /&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/CRM/MemberService.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-out_Segments" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">out_Segments</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_Segments</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from crm_segment</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">db_SegCount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;

StringReader segmentsXml = new StringReader(vars.get(&quot;out_Segments&quot;));
log.info(vars.get(&quot;out_Segments&quot;));
DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

//API to obtain DOM Document instance
DocumentBuilder builder = null;

//Create DocumentBuilder with default configuration
builder = factory.newDocumentBuilder();

//Parse the content to Document object
Document doc = builder.parse(new InputSource(segmentsXml));
log.info(doc.getFirstChild().getNodeName());
NodeList dependencyElements = doc.getElementsByTagName(&quot;Segment&quot;);
log.info((dependencyElements.getLength()-1).toString());
String Segment_count = (dependencyElements.getLength()-1).toString();
//var.put(&quot;SegmCount&quot;,Segment_count);

String expected = &quot;${db_SegCount_1}&quot;;
//String actual = var.get{&quot;SegmCount&quot;};


if (expected.equals(dependencyElements.getLength().toString()))
{
  Failure = false;
  log.info(&quot;Compared Successfully&quot;);
  //assert expected.equals(dependencyElements.getLength().toString());
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">loyalty</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50),
@BuyingunitIntKey int
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select @BuyingunitIntKey=buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID}&apos; and matrixmemberid = @matrixmemberid)


update crm_loyaltydocuments set status=0 
where issuedBuyingUnitInternalKey=@BuyingunitIntKey  and issuematrixmemberid=1 and barcode=&apos;${Barcode}&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-DeactivateCentralizedDocument" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:DeactivateCentralizedDocument&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_DocumentsXML&gt;&lt;![CDATA[&lt;DeactivateCentralizedDocument Action=&quot;1&quot;&gt;&#xd;
	&lt;Retailer Id=&quot;${RetailerID}&quot;&gt;&#xd;
		&lt;Documents&gt;&#xd;
			&lt;SameHouseHoldDocument Barcode=&quot;${Barcode}&quot; ClubCardId=&quot;${ClubcardID}&quot;/&gt;&#xd;
		&lt;/Documents&gt;&#xd;
	&lt;/Retailer&gt;&#xd;
&lt;/DeactivateCentralizedDocument&gt;&#xd;
]]&gt;&lt;/hql:in_DocumentsXML&gt;&#xd;
      &lt;/hql:DeactivateCentralizedDocument&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/LoyaltyDocuments/SaveLoyaltyDocument.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select status from crm_loyaltydocuments where issuedBuyingUnitInternalKey=${dbbuyingunitinternalkey_1}  and issuematrixmemberid=1 and barcode=&apos;${Barcode}&apos;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbStatus</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbStatus_1}&quot;;
String actual = &quot;1&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-ValidateCentralizedDocument" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:ValidateCentralizedDocument&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:in_DocumentsXML&gt;&lt;![CDATA[&lt;DeactivateCentralizedDocument Action=&quot;1&quot;&gt;&#xd;
	&lt;Retailer Id=&quot;${RetailerID}&quot;&gt;&#xd;
		&lt;Documents&gt;&#xd;
			&lt;SameHouseHoldDocument Barcode=&quot;${Barcode}&quot; ClubCardId=&quot;${ClubcardID}&quot;/&gt;&#xd;
		&lt;/Documents&gt;&#xd;
	&lt;/Retailer&gt;&#xd;
&lt;/DeactivateCentralizedDocument&gt;&#xd;
]]&gt;&lt;/hql:in_DocumentsXML&gt;&#xd;
      &lt;/hql:ValidateCentralizedDocument&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/LoyaltyDocuments/SaveLoyaltyDocument.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-out_DocumentsXML" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">out_DocumentsXML</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_DocumentsXML</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor-Barcode" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">Barcode</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Documents/Document/@Barcode</stringProp>
            <boolProp name="XPathExtractor.validate">true</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">out_DocumentsXML</stringProp>
          </XPathExtractor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor-BUIK" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID=${RetailerID})

select buyingunitinternalkey from crm_member where MemberInternalKey 
in (select MemberInternalKey from crm_clubcard where clubcardid= &apos;${ClubcardID}&apos; and matrixmemberid = @matrixmemberid)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbbuyingunitinternalkey</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
            <stringProp name="dataSource">loyalty</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select barcode from crm_loyaltydocuments  where  issuedBuyingUnitInternalKey=${dbbuyingunitinternalkey_1} and barcode=&apos;${Barcode}&apos;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">dbBarcode</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${dbBarcode_1}&quot;;
String actual = &quot;${Barcode}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Difference detected, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetIssuingOrRedemptionDocuments" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetIssuingOrRedemptionDocuments&gt;&#xd;
         &lt;GetDocumentRequest  DocumentsRetrievePurpose=&quot;1&quot; DocumentType=&quot;5&quot; IssuingSource=&quot;0,3,1,2&quot; RewardDefinition=&quot;2&quot; LastUpdate=&quot;2000-07-25T12:32:00&quot;/&gt;&#xd;
      &lt;/hql:GetIssuingOrRedemptionDocuments&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/LoyaltyDocuments/SaveLoyaltyDocument.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
