<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Epic2584_Story3545 Support ‘Return Item Eligibility’ in Multi Condition" enabled="true">
      <stringProp name="TestPlan.comments">customer id=52, Retailer Id=46 only</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables-Global" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="env" elementType="Argument">
            <stringProp name="Argument.name">env</stringProp>
            <stringProp name="Argument.value">ser36vvm312</stringProp>
            <stringProp name="Argument.desc">Environment name to be used in the Endpoint URL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dataFolder" elementType="Argument">
            <stringProp name="Argument.name">dataFolder</stringProp>
            <stringProp name="Argument.value">C:\JmeterAutomation\Test Data\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DBServer" elementType="Argument">
            <stringProp name="Argument.name">DBServer</stringProp>
            <stringProp name="Argument.value">SER36VVM310</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LoyaltyDBName" elementType="Argument">
            <stringProp name="Argument.name">LoyaltyDBName</stringProp>
            <stringProp name="Argument.value">Loyalty_LMS_MAIN</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PromotionDBName" elementType="Argument">
            <stringProp name="Argument.name">PromotionDBName</stringProp>
            <stringProp name="Argument.value">Promotion_LMS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MPDBName" elementType="Argument">
            <stringProp name="Argument.name">MPDBName</stringProp>
            <stringProp name="Argument.value">MP_LMS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LoyaltyOnlineDBName" elementType="Argument">
            <stringProp name="Argument.name">LoyaltyOnlineDBName</stringProp>
            <stringProp name="Argument.value">LoyaltyOnline_LMS_MAIN</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RetailerID" elementType="Argument">
            <stringProp name="Argument.name">RetailerID</stringProp>
            <stringProp name="Argument.value">46</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RetailerUserID" elementType="Argument">
            <stringProp name="Argument.name">RetailerUserID</stringProp>
            <stringProp name="Argument.value">ret46</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RetailerPassword" elementType="Argument">
            <stringProp name="Argument.name">RetailerPassword</stringProp>
            <stringProp name="Argument.value">Abcd1234</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CurrDate1" elementType="Argument">
            <stringProp name="Argument.name">CurrDate1</stringProp>
            <stringProp name="Argument.value">${__groovy(new Date().format(&apos;yyyy-MM-dd&apos;),)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CurrDate" elementType="Argument">
            <stringProp name="Argument.name">CurrDate</stringProp>
            <stringProp name="Argument.value">${__time(yyyy-MM-dd)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="transID" elementType="Argument">
            <stringProp name="Argument.name">transID</stringProp>
            <stringProp name="Argument.value">${__Random(5000000,6000000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverIP" elementType="Argument">
            <stringProp name="Argument.name">serverIP</stringProp>
            <stringProp name="Argument.value">153.77.180.109</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverUserName" elementType="Argument">
            <stringProp name="Argument.name">serverUserName</stringProp>
            <stringProp name="Argument.value">s_raa_appadmin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverPassword" elementType="Argument">
            <stringProp name="Argument.name">serverPassword</stringProp>
            <stringProp name="Argument.value">HAha123!</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DownloadDBName" elementType="Argument">
            <stringProp name="Argument.name">DownloadDBName</stringProp>
            <stringProp name="Argument.value">DLDB_LMS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="batchManagerPath" elementType="Argument">
            <stringProp name="Argument.name">batchManagerPath</stringProp>
            <stringProp name="Argument.value">C:\Retalix\LMS\HQ Loyalty and Promotions.MAIN\BatchManager</stringProp>
            <stringProp name="Argument.desc">This is the server path where batch manager bat file is available</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HostDBName" elementType="Argument">
            <stringProp name="Argument.name">HostDBName</stringProp>
            <stringProp name="Argument.value">HOST_LMS_MAIN</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-LoyaltyDB" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer}\OPERATIONAL;databaseName=${LoyaltyDBName};trustServerCertificate=true</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-Promotion DB" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer}\OPERATIONAL;databaseName=${PromotionDBName};trustServerCertificate=true</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-Loyalty Online" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty_Online</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer}\Online;databaseName=${LoyaltyOnlineDBName};trustServerCertificate=true</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-DownloadDB" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_DownloadDB</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer}\OPERATIONAL;databaseName=${DownloadDBName};trustServerCertificate=true</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create Promotion Validation with ReturnItemEligibility=&quot;1&quot; SCC" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-XML" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">LmsSession ${session}</stringProp>
            </elementProp>
            <elementProp name="DebugLevel" elementType="Header">
              <stringProp name="Header.name">DebugLevel</stringProp>
              <stringProp name="Header.value">Info</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Login" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;UserLogin xmlns=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
      &lt;in_UserName&gt;${RetailerUserID}&lt;/in_UserName&gt;&#xd;
      &lt;in_Password&gt;${RetailerPassword}&lt;/in_Password&gt;&#xd;
    &lt;/UserLogin&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Authorization/Login.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">${session}</stringProp>
            <stringProp name="XPathExtractor.refname">session</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_SessionKey</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable">sKey</stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step1" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step1 scc 32267" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step1_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;2&quot;,											&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,											&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,											&#xd;
											&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
											&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
											&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
								&quot;Id&quot;: &quot;2&quot;,&#xd;
								&quot;Name&quot;: &quot;2&quot;,&#xd;
								&quot;QtySize&quot;: 2,&#xd;
								&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
								&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
								&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
								&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
								&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
								&#xd;
								&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
								&quot;BucketEntity&quot;:[&#xd;
								 {&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

--select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
--where matrixmemberid=@matrixmemberid) AS PromotionHeaderID1

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;1&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step2" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step2 scc 32268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,											&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,											&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
											&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
								&quot;Id&quot;: &quot;2&quot;,&#xd;
								&quot;Name&quot;: &quot;2&quot;,&#xd;
								&quot;QtySize&quot;: 2,&#xd;
								&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
								&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
								&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
								&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
								&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
								&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
								&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
								&quot;BucketEntity&quot;:[&#xd;
								 {&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;1&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Copy Promotion" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:CopyPromotion&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:PromotionInputXml&gt;&lt;![CDATA[&lt;HQL_Promotion_WS&gt;&#xd;
	&lt;Retailer Id=&quot;${RetailerID}&quot;&gt;&#xd;
		&lt;Promotion  InternalPromotionId=&quot;${PromotionHeaderID2_1}&quot;&gt;&#xd;
			&lt;PromotionDetails HeaderDescription=&quot;copy_${PromotionHeaderID2_1}&quot; PromotionReceiptDescription=&quot;copy_${PromotionHeaderID2_1}&quot;/&gt;&#xd;
		&lt;/Promotion&gt;&#xd;
	&lt;/Retailer&gt;&#xd;
&lt;/HQL_Promotion_WS&gt;]]&gt;&lt;/hql:PromotionInputXml&gt;&#xd;
      &lt;/hql:CopyPromotion&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor- XMLCData" enabled="true">
            <stringProp name="XPathExtractor.default">${XMLCData}</stringProp>
            <stringProp name="XPathExtractor.refname">XMLCData</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//PromotionOutputXml</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step3" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step3 scc 32270" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step4_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;2&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
											&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
											&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
											&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;1&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step4" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step4 scc 32271" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step5_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
								&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
								&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								&quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
								&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
											&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;1&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step5" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step5 scc 32272 " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step6_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;1&quot;,&#xd;
								&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
								&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
								&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&quot;MSUQuantity&quot;: &quot;0&quot;,&#xd;
								&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
											&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;1&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step6" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step6 scc 32273" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step7_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;50&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemCount&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
											&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;1&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step7" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step7 scc 32275" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step8_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;20&quot;,&#xd;
							       	&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
              						         &quot;IncreaseMemberAccountId&quot;: &quot;1&quot;,&#xd;
               							 &quot;IncreaseMemberAccountType&quot;: &quot;1&quot;,&#xd;
              						         &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
         						         &quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;&#xd;
											&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;1&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step8" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step8 scc 32276" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step9_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;60&quot;,&#xd;
							       	&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
            						        &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
        						        &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
                						&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
                						&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
                						&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
                						&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
                						&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
                						&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
                						&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
                						&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;4&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;true&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;1&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step9" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step9 scc 32277" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step10_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;61&quot;,&#xd;
							       	&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
            						      &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								     &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
        						          &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
                						&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
                						&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
                						&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
                						&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,                						&#xd;
                						&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
                						&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
                						&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,										&#xd;
								     &quot;CalculatePromotionRewardExcludeTax&quot;: &quot;0&quot;,&#xd;
                						&quot;AddTaxAmountToRewardAmount&quot;: &quot;0&quot;,&#xd;
                						&quot;TaxExecutionMethod&quot;: &quot;1&quot;,&#xd;
                						&quot;RecalculateTaxAfterPromotionDiscount&quot;: &quot;0&quot;&#xd;
                						},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;4&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;true&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;1&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step10" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step10 scc 32278" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step11_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            							&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;20&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
            						        		&quot;IncreaseMemberAccountId&quot;: &quot;1&quot;,&#xd;
                								&quot;IncreaseMemberAccountType&quot;: &quot;1&quot;,&#xd;
                								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;4&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;true&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;1&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create Promotion Validation with ReturnItemEligibility = &quot;1&quot; WRN" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-XML" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">LmsSession ${session}</stringProp>
            </elementProp>
            <elementProp name="DebugLevel" elementType="Header">
              <stringProp name="Header.name">DebugLevel</stringProp>
              <stringProp name="Header.value">Info</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Login" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;UserLogin xmlns=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
      &lt;in_UserName&gt;${RetailerUserID}&lt;/in_UserName&gt;&#xd;
      &lt;in_Password&gt;${RetailerPassword}&lt;/in_Password&gt;&#xd;
    &lt;/UserLogin&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Authorization/Login.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">${session}</stringProp>
            <stringProp name="XPathExtractor.refname">session</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_SessionKey</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable">sKey</stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step1" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step1 wrn 40267" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step1_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;2&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;2&quot;,											&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,											&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,											&#xd;
											&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
											&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
											&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,									&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
								&quot;Id&quot;: &quot;2&quot;,&#xd;
								&quot;Name&quot;: &quot;2&quot;,&#xd;
								&quot;QtySize&quot;: &quot;2&quot;,&#xd;
								&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
								&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
								&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
								&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
								&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
								&#xd;
								&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
								&quot;BucketEntity&quot;:[&#xd;
								 {&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1108199812">the chosen controls/restrictions are not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step2" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step2 WRN41267" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;,&#xd;
								&quot;RedemptionLimitMaximum&quot;: &quot;4&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,											&#xd;
											&quot;RewardValueType&quot;: &quot;2&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,											&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,											&#xd;
											&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
											&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
											&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
								&quot;Id&quot;: &quot;2&quot;,&#xd;
								&quot;Name&quot;: &quot;2&quot;,&#xd;
								&quot;QtySize&quot;: &quot;2&quot;,&#xd;
								&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
								&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
								&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
								&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
								&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,								&#xd;
								&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
								&quot;BucketEntity&quot;:[&#xd;
								 {&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1108199812">the chosen controls/restrictions are not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step3" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step3 WRN 42267 bug" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step3_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;,&#xd;
								&quot;RedemptionLimitPerDay&quot;: &quot;2&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;20&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;2&quot;,&#xd;
                									&quot;LimitDiscountScope&quot;: &quot;0&quot;,											&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
                									&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
                									&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
                									&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
											&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
								&quot;Id&quot;: &quot;2&quot;,&#xd;
								&quot;Name&quot;: &quot;2&quot;,&#xd;
								&quot;QtySize&quot;: &quot;2&quot;,&#xd;
								&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
								&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
								&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
								&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
								&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,							&#xd;
								&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
								&quot;BucketEntity&quot;:[&#xd;
								 {&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1108199812">the chosen controls/restrictions are not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step4" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step4 WRN 43267" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step4_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;,&#xd;
								&quot;RedemptionLimitPerTransaction&quot;: &quot;3&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;2&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
											&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
											&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
											&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,									&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1108199812">the chosen controls/restrictions are not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step5" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step5 WRN 44267" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step5_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;,&#xd;
								&quot;MinimumPurchaseAmount&quot;: &quot;3&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
								&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
								&quot;RewardValueType&quot;: &quot;2&quot;,&#xd;
								&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,								&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
								&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
								&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
											&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1108199812">the chosen controls/restrictions are not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step6" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step6 WRN 45267 bug" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step6_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;,&#xd;
								&quot;RequiredCoupon&quot;: &quot;true&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
								&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
								&quot;RewardValueType&quot;: &quot;2&quot;,&#xd;
								&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&#xd;
								&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
								&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
   						                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
                						&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
                						&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1108199812">the chosen controls/restrictions are not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step7" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step7WRN 46267 bug" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step7_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
								&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
                						&quot;RewardValueType&quot;: &quot;2&quot;,&#xd;
								&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
                						&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
                						&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
                						&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
                						&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;MinimumRequiredValue&quot;: &quot;0&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="675193129">Minimum Required Value is not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step8" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step8 WRN 47267" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step8_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
								&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
                						&quot;RewardValueType&quot;: &quot;2&quot;,&#xd;
								&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
                					&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
                					&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
                					&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
                					&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;MinimumRequiredValue&quot;: &quot;1&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="675193129">Minimum Required Value is not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step9" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step9 WRN 48267" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step9_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
								&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
								&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
                					&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
								&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReducePriceScope&quot;: &quot;1&quot;,&#xd;
								&quot;InjectRewardFromMAId&quot;: &quot;1&quot;,&#xd;
                					&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
                					&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
                					&quot;LimitRewardMAAmount&quot;: &quot;0&quot;,&#xd;
								&quot;LimitRewardMAScope&quot;: &quot;1&quot;,&#xd;
                					&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;0&quot;,&#xd;
                					&quot;IssueOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
                					&quot;RewardLimitationScope&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,										&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-973214289">Reduce Price by value in Member Account/Dynamic attribute reward is not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step10" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step10 WRN 49267" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step10_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
								&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
                						&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
								&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReducePriceScope&quot;: &quot;3&quot;,&#xd;
								&quot;InjectRewardFromMAId&quot;: &quot;1&quot;,&#xd;
                					&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
                					&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
                					&quot;LimitRewardMAAmount&quot;: &quot;0&quot;,&#xd;
								&quot;LimitRewardMAScope&quot;: &quot;1&quot;,&#xd;
                					&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;0&quot;,&#xd;
                						&quot;IssueOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
                						&quot;RewardLimitationScope&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,										&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-973214289">Reduce Price by value in Member Account/Dynamic attribute reward is not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step11" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step11 WRN 41268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step11_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReducePriceScope&quot;: &quot;1&quot;,&#xd;
								                &quot;InjectRewardFromMAId&quot;: &quot;1&quot;,&#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;0&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;0&quot;,&#xd;
								                &quot;LimitRewardMAScope&quot;: &quot;3&quot;,&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,&#xd;
								                &quot;DigitalCouponRequired&quot;: &quot;0&quot;,&#xd;
								                &quot;IssueOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								                &quot;RewardLimitationScope&quot;: &quot;0&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="22679541">applying a percentage from Member Account/Dynamic attribute is not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step12" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step12 WRN 42268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step12_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReducePriceScope&quot;: &quot;3&quot;,&#xd;
								                &quot;InjectRewardFromMAId&quot;: &quot;1&quot;,&#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;0&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;0&quot;,&#xd;
								                &quot;LimitRewardMAScope&quot;: &quot;3&quot;,&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,&#xd;
								                &quot;DigitalCouponRequired&quot;: &quot;0&quot;,&#xd;
								                &quot;IssueOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								                &quot;RewardLimitationScope&quot;: &quot;0&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="22679541">applying a percentage from Member Account/Dynamic attribute is not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step13" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step13 WRN 43268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step13_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;1&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,								                &#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,&#xd;
										&quot;TimingMemberAccountScope&quot;: &quot;1&quot;,&#xd;
								                &quot;DigitalCouponRequired&quot;: &quot;0&quot;,&#xd;
								                &quot;IssueOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								                &quot;RewardLimitationScope&quot;: &quot;0&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-778894429">The chosen Reward Timing is not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step14" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step14 WRN 44268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step14_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;2&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,								                &#xd;
										&quot;DocumentType&quot;: &quot;5&quot;,&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,										&#xd;
								                &quot;DigitalCouponRequired&quot;: &quot;0&quot;,&#xd;
								                &quot;IssueCompensationDocumentScope&quot;: &quot;0&quot;,&#xd;
								                &quot;RewardLimitationScope&quot;: &quot;0&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-778894429">The chosen Reward Timing is not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step15" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step15 WRN 45268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step15_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;1&quot;,&#xd;
										&quot;ReduceMemberAccountId&quot;: &quot;1&quot;,&#xd;
                								&quot;ReduceMemberAccountValue&quot;: &quot;22&quot;,&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,										&#xd;
								                &quot;DigitalCouponRequired&quot;: &quot;0&quot;,&#xd;
								                &#xd;
								                &quot;RewardLimitationScope&quot;: &quot;0&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521925">The chosen optional attributes are not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step16" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step16 WRN 46268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step16_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;2&quot;,&#xd;
										&quot;ReduceMemberAccountId&quot;: &quot;1&quot;,&#xd;
                								&quot;ReduceMemberAccountValidationAppliesTo&quot;: &quot;101&quot;,&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,										&#xd;
								                &quot;DigitalCouponRequired&quot;: &quot;0&quot;,&#xd;
								                &#xd;
								                &quot;RewardLimitationScope&quot;: &quot;0&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521925">The chosen optional attributes are not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step17" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step17 WRN 47268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step17_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;3&quot;,										&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;									&#xd;
								                &#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521925">The chosen optional attributes are not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step18" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step18 WRN 48268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step18_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;4&quot;,										&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;									&#xd;
								                &#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521925">The chosen optional attributes are not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step19" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step19 WRN 49268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step19_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;5&quot;,										&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;									&#xd;
								                &#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521925">The chosen optional attributes are not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step20" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step20 WRN 50268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step20_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,										&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;1&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;									&#xd;
								                &#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521925">The chosen optional attributes are not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step21" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step21 WRN 51268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step21_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,										&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,									&#xd;
								                &quot;ConnectedSegmentId&quot;: &quot;1&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521925">The chosen optional attributes are not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step22" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step22 WRN 52268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step22_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,										&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,									&#xd;
								                &quot;DisconnectedSegmentId&quot;: &quot;1&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521925">The chosen optional attributes are not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step23" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step23 WRN 53268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step23_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;1&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,										&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,									&#xd;
								                &quot;DisconnectedSegmentId&quot;: &quot;1&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
										&quot;Messages&quot;: {&#xd;
								                &quot;Message&quot;: [&#xd;
								                  {&#xd;
								                    &quot;AttributeId&quot;: &quot;5159&quot;,&#xd;
								                    &quot;AttributeValue&quot;: &quot;1&quot;,&#xd;
								                    &quot;self-closing&quot;: &quot;true&quot;&#xd;
								                  },&#xd;
								                  {&#xd;
								                    &quot;AttributeId&quot;: &quot;5160&quot;,&#xd;
								                    &quot;AttributeValue&quot;: &quot;1&quot;,&#xd;
								                    &quot;self-closing&quot;: &quot;true&quot;&#xd;
								                  },&#xd;
								                  {&#xd;
								                    &quot;AttributeId&quot;: &quot;5169&quot;,&#xd;
								                    &quot;AttributeValue&quot;: &quot;1&quot;,&#xd;
								                    &quot;self-closing&quot;: &quot;true&quot;&#xd;
								                  },&#xd;
								                  {&#xd;
								                    &quot;AttributeId&quot;: &quot;5170&quot;,&#xd;
								                    &quot;AttributeValue&quot;: &quot;1&quot;,&#xd;
								                    &quot;self-closing&quot;: &quot;true&quot;&#xd;
								                  },&#xd;
								                  {&#xd;
								                    &quot;AttributeId&quot;: &quot;5179&quot;,&#xd;
								                    &quot;AttributeValue&quot;: &quot;1&quot;,&#xd;
								                    &quot;self-closing&quot;: &quot;true&quot;&#xd;
								                  },&#xd;
								                  {&#xd;
								                    &quot;AttributeId&quot;: &quot;5180&quot;,&#xd;
								                    &quot;AttributeValue&quot;: &quot;1&quot;,&#xd;
								                    &quot;self-closing&quot;: &quot;true&quot;&#xd;
								                  },&#xd;
								                  {&#xd;
								                    &quot;AttributeId&quot;: &quot;5182&quot;,&#xd;
								                    &quot;AttributeValue&quot;: &quot;1&quot;,&#xd;
								                    &quot;self-closing&quot;: &quot;true&quot;&#xd;
								                  }&#xd;
								                ]&#xd;
              }&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;IncentiveMsgAppliesTo&quot;: &quot;1&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;IncentiveMsgAppliesTo&quot;: &quot;1&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521925">The chosen optional attributes are not supported when ReturnItemEligibility = 1</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create Promotion Validation with ReturnItemEligibility=&quot;2&quot; SCC" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-XML" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">LmsSession ${session}</stringProp>
            </elementProp>
            <elementProp name="DebugLevel" elementType="Header">
              <stringProp name="Header.name">DebugLevel</stringProp>
              <stringProp name="Header.value">Info</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Login" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;UserLogin xmlns=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
      &lt;in_UserName&gt;${RetailerUserID}&lt;/in_UserName&gt;&#xd;
      &lt;in_Password&gt;${RetailerPassword}&lt;/in_Password&gt;&#xd;
    &lt;/UserLogin&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Authorization/Login.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">${session}</stringProp>
            <stringProp name="XPathExtractor.refname">session</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_SessionKey</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable">sKey</stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step1" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step1 scc 32267" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step1_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;2&quot;,											&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,											&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,											&#xd;
											&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
											&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
											&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
								&quot;Id&quot;: &quot;2&quot;,&#xd;
								&quot;Name&quot;: &quot;2&quot;,&#xd;
								&quot;QtySize&quot;: 2,&#xd;
								&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
								&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
								&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
								&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
								&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
								&#xd;
								&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
								&quot;BucketEntity&quot;:[&#xd;
								 {&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;2&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step2" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step2 scc 32268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,											&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,											&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
											&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
								&quot;Id&quot;: &quot;2&quot;,&#xd;
								&quot;Name&quot;: &quot;2&quot;,&#xd;
								&quot;QtySize&quot;: 2,&#xd;
								&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
								&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
								&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
								&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
								&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
								&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
								&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
								&quot;BucketEntity&quot;:[&#xd;
								 {&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;2&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Copy Promotion" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:CopyPromotion&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:PromotionInputXml&gt;&lt;![CDATA[&lt;HQL_Promotion_WS&gt;&#xd;
	&lt;Retailer Id=&quot;${RetailerID}&quot;&gt;&#xd;
		&lt;Promotion  InternalPromotionId=&quot;${PromotionHeaderID2_1}&quot;&gt;&#xd;
			&lt;PromotionDetails HeaderDescription=&quot;copy_${PromotionHeaderID2_1}&quot; PromotionReceiptDescription=&quot;copy_${PromotionHeaderID2_1}&quot;/&gt;&#xd;
		&lt;/Promotion&gt;&#xd;
	&lt;/Retailer&gt;&#xd;
&lt;/HQL_Promotion_WS&gt;]]&gt;&lt;/hql:PromotionInputXml&gt;&#xd;
      &lt;/hql:CopyPromotion&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor- XMLCData" enabled="true">
            <stringProp name="XPathExtractor.default">${XMLCData}</stringProp>
            <stringProp name="XPathExtractor.refname">XMLCData</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//PromotionOutputXml</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step3" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step3 scc 32270" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step4_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;2&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
											&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
											&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
											&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;2&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step4" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step4 scc 32271" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step5_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
								&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
								&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								&quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
								&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
											&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;2&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step5" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step5 scc 32272" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step6_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;1&quot;,&#xd;
								&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
								&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
								&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&quot;MSUQuantity&quot;: &quot;0&quot;,&#xd;
								&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
											&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;2&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step6" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step6 scc 32273" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step7_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;50&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemCount&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
											&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;2&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step7" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step7 scc 32275" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step8_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;20&quot;,&#xd;
							       	&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
              						         &quot;IncreaseMemberAccountId&quot;: &quot;1&quot;,&#xd;
               							 &quot;IncreaseMemberAccountType&quot;: &quot;1&quot;,&#xd;
              						         &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
         						         &quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;&#xd;
											&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;2&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step8" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step8 scc 32276" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step9_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;60&quot;,&#xd;
							       	&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
            						        &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
        						        &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
                						&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
                						&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
                						&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
                						&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
                						&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
                						&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
                						&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
                						&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;4&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;true&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;2&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step9" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step9 scc 32277" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step10_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;61&quot;,&#xd;
							       	&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
            						      &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								     &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
        						          &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
                						&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
                						&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
                						&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
                						&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,                						&#xd;
                						&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
                						&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
                						&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,										&#xd;
								     &quot;CalculatePromotionRewardExcludeTax&quot;: &quot;0&quot;,&#xd;
                						&quot;AddTaxAmountToRewardAmount&quot;: &quot;0&quot;,&#xd;
                						&quot;TaxExecutionMethod&quot;: &quot;1&quot;,&#xd;
                						&quot;RecalculateTaxAfterPromotionDiscount&quot;: &quot;0&quot;&#xd;
                						},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;4&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;true&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;2&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step10" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step10 scc 32278" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step11_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;20&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
            						        		&quot;IncreaseMemberAccountId&quot;: &quot;1&quot;,&#xd;
                								&quot;IncreaseMemberAccountType&quot;: &quot;1&quot;,&#xd;
                								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;4&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;true&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Verify that new promotion added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select ph.ExternalReferenceID PromotionHeaderID1, ph.ReturnItemEligibility
from (
	select *
	from PromotionHeader 
	where matrixmemberid=@matrixmemberid and isnumeric ( ExternalReferenceID) =1
   )ph
inner join (
	select max(cast(ExternalReferenceID AS INT )) erid 
	FROM PromotionHeader
	where matrixmemberid=172) MaxPH
		ON MaxPH.erid = cast(ph.ExternalReferenceID AS INT)

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID1,ReturnItemEligibility</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID1</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID1}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;${PromotionHeaderID_1}&quot;;
String actual = &quot;${PromotionHeaderID1_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;Promotion not added to DB, expected: &quot; + expected + &quot; and actual: &quot; +     actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.regex">ReturnItemEligibility</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${ReturnItemEligibility}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String expected = &quot;2&quot;;
String actual = &quot;${ReturnItemEligibility_1}&quot;;


if (expected.equals(actual))
{
  Failure = false;
}


else
{
    Failure = true;
    FailureMessage = &quot;ReturnItemEligibility not marker, expected: &quot; + expected + &quot; and actual: &quot; + actual;
}
 




</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get  promotionID added to DB" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid) AS PromotionHeaderID2
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID2</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID2</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID2}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID2_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;
import java.nio.file.Files;
import org.apache.commons.io.FileUtils;
import java.util.List;
import java.util.ArrayList;
import org.junit.Assert; 

//int i, String Node, String Attribute


public String XMLExtractor(String TagName, int i, String Attribute){

               try{
                              line = prev.getResponseDataAsString();
                              String line=line.replace(&quot;&amp;gt;&quot;,&quot;&gt;&quot;);
                              String line=line.replace(&quot;&amp;lt;&quot;,&quot;&lt;&quot;);
                              //log.info(line);
                              int index = line.indexOf(&quot;&lt;soap:Envelope&quot;);
                              String substring = line.substring(0,index);
                              String line = line.replace(substring,&quot;&quot;);
                              log.info(line);
                              vars.put(&quot;Reponse&quot;,line);
                              
                              DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                              factory.setCoalescing(true);
                              //API to obtain DOM Document instance
                              DocumentBuilder builder = null;
                              
                              //Create DocumentBuilder with default configuration
                              builder = factory.newDocumentBuilder();
                              
                              //Parse the content to Document object
                              Document doc = builder.parse(new InputSource(new StringReader(line.trim())));
                              NodeList dependencyElements = doc.getElementsByTagName(TagName);
                              String Str = dependencyElements.item(i).getNodeName();
                              log.info(&quot;\nNode Name :&quot; + Str);
                              Node node = dependencyElements.item(i);
                              log.info((node.getNodeType()).toString());

                              if(node.getNodeType() == Node.ELEMENT_NODE){
                                             Element eElement = (Element) node;
                                             log.info((eElement.getAttributes().getNamedItem(Attribute)).toString());
                                             if(eElement.getAttributes().getNamedItem(Attribute) == null){
                                                            log.info(&quot;Attribute &quot; + Attribute + &quot; retrived is null value&quot;);
                                             }else{
                                                            String NodeValue = eElement.getAttributes().getNamedItem(Attribute).getNodeValue();
                                                            //log.info(NodeValue);
                                                            return NodeValue;
                                                            
                                             }
                              }
                              
               }
               catch(Exception e){

                              log.info(&quot;XMLExtractor&quot; + e);
                              
               }
                              
}

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

vars.put(&quot;xml_value&quot;, XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;));
log.info(&quot;xml_value &quot; + vars.get(&quot;xml_value&quot;));

Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSunday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnMonday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnTuesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnWednesday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnThursday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnFriday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;ActiveOnSaturday&quot;).equals(&quot;true&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;StartTime&quot;).equals(&quot;00:00:00&quot;));
Assert.assertTrue(&quot;OpenBalanceValue is not as per expected value &quot; , XMLExtractor(&quot;PromotionActiveDays&quot;,0,&quot;EndTime&quot;).equals(&quot;23:59:00&quot;));</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create Promotion Validation with ReturnItemEligibility = &quot;2&quot; WRN" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-XML" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">LmsSession ${session}</stringProp>
            </elementProp>
            <elementProp name="DebugLevel" elementType="Header">
              <stringProp name="Header.name">DebugLevel</stringProp>
              <stringProp name="Header.value">Info</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Login" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;UserLogin xmlns=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
      &lt;in_UserName&gt;${RetailerUserID}&lt;/in_UserName&gt;&#xd;
      &lt;in_Password&gt;${RetailerPassword}&lt;/in_Password&gt;&#xd;
    &lt;/UserLogin&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Authorization/Login.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">${session}</stringProp>
            <stringProp name="XPathExtractor.refname">session</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_SessionKey</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable">sKey</stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step1" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step1 wrn 40267" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step1_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;2&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;2&quot;,											&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,											&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,											&#xd;
											&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
											&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
											&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,									&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
								&quot;Id&quot;: &quot;2&quot;,&#xd;
								&quot;Name&quot;: &quot;2&quot;,&#xd;
								&quot;QtySize&quot;: &quot;2&quot;,&#xd;
								&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
								&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
								&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
								&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
								&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
								&#xd;
								&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
								&quot;BucketEntity&quot;:[&#xd;
								 {&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1108199811">the chosen controls/restrictions are not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step2" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step2 WRN41267" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;,&#xd;
								&quot;RedemptionLimitMaximum&quot;: &quot;4&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,											&#xd;
											&quot;RewardValueType&quot;: &quot;2&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,											&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,											&#xd;
											&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
											&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
											&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
								&quot;Id&quot;: &quot;2&quot;,&#xd;
								&quot;Name&quot;: &quot;2&quot;,&#xd;
								&quot;QtySize&quot;: &quot;2&quot;,&#xd;
								&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
								&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
								&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
								&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
								&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,								&#xd;
								&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
								&quot;BucketEntity&quot;:[&#xd;
								 {&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1108199811">the chosen controls/restrictions are not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step3" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step3 WRN 42267 bug" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step3_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;,&#xd;
								&quot;RedemptionLimitPerDay&quot;: &quot;2&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;20&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;2&quot;,&#xd;
                									&quot;LimitDiscountScope&quot;: &quot;0&quot;,											&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
                									&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
                									&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
                									&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
											&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
								&quot;Id&quot;: &quot;2&quot;,&#xd;
								&quot;Name&quot;: &quot;2&quot;,&#xd;
								&quot;QtySize&quot;: &quot;2&quot;,&#xd;
								&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
								&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
								&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
								&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
								&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
								&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,							&#xd;
								&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
								&quot;BucketEntity&quot;:[&#xd;
								 {&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1108199811">the chosen controls/restrictions are not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step4" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step4 WRN 43267" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step4_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;,&#xd;
								&quot;RedemptionLimitPerTransaction&quot;: &quot;3&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;2&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
											&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
											&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
											&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
											&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,									&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1108199811">the chosen controls/restrictions are not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step5" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step5 WRN 44267" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step5_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;,&#xd;
								&quot;MinimumPurchaseAmount&quot;: &quot;3&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
								&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
								&quot;RewardValueType&quot;: &quot;2&quot;,&#xd;
								&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,								&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
								&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
								&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
											&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1108199811">the chosen controls/restrictions are not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step6" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step6 WRN 45267 bug" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step6_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;,&#xd;
								&quot;RequiredCoupon&quot;: &quot;true&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
								&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
								&quot;RewardValueType&quot;: &quot;2&quot;,&#xd;
								&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&#xd;
								&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
								&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
   						                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
                						&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
                						&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1108199811">the chosen controls/restrictions are not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step7" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step7WRN 46267 bug" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step7_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
								&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
                						&quot;RewardValueType&quot;: &quot;2&quot;,&#xd;
								&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
                						&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
                						&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
                						&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
                						&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;MinimumRequiredValue&quot;: &quot;0&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="675193130">Minimum Required Value is not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step8" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step8 WRN 47267" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step8_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
								&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
                						&quot;RewardValueType&quot;: &quot;2&quot;,&#xd;
								&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
                					&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
                					&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
                					&quot;LimitRewardMAAmount&quot;: &quot;1&quot;,&#xd;
                					&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;MinimumRequiredValue&quot;: &quot;1&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="675193130">Minimum Required Value is not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step9" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step9 WRN 48267" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step9_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
								&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
								&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
                					&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
								&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReducePriceScope&quot;: &quot;1&quot;,&#xd;
								&quot;InjectRewardFromMAId&quot;: &quot;1&quot;,&#xd;
                					&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
                					&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
                					&quot;LimitRewardMAAmount&quot;: &quot;0&quot;,&#xd;
								&quot;LimitRewardMAScope&quot;: &quot;1&quot;,&#xd;
                					&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;0&quot;,&#xd;
                					&quot;IssueOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
                					&quot;RewardLimitationScope&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,										&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-973214288">Reduce Price by value in Member Account/Dynamic attribute reward is not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step10" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step10 WRN 49267" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step10_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;2&quot;,&#xd;
								&quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
                						&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
								&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								&quot;ReducePriceScope&quot;: &quot;3&quot;,&#xd;
								&quot;InjectRewardFromMAId&quot;: &quot;1&quot;,&#xd;
                					&quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
                					&quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
                					&quot;LimitRewardMAAmount&quot;: &quot;0&quot;,&#xd;
								&quot;LimitRewardMAScope&quot;: &quot;1&quot;,&#xd;
                					&quot;CalculateRewardOnPurchasedAmount&quot;: &quot;0&quot;,&#xd;
								&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								&quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;0&quot;,&#xd;
                						&quot;IssueOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
                						&quot;RewardLimitationScope&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;&#xd;
												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,										&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,										&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-973214288">Reduce Price by value in Member Account/Dynamic attribute reward is not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step11" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step11 WRN 41268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step11_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReducePriceScope&quot;: &quot;1&quot;,&#xd;
								                &quot;InjectRewardFromMAId&quot;: &quot;1&quot;,&#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;0&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;0&quot;,&#xd;
								                &quot;LimitRewardMAScope&quot;: &quot;3&quot;,&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,&#xd;
								                &quot;DigitalCouponRequired&quot;: &quot;0&quot;,&#xd;
								                &quot;IssueOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								                &quot;RewardLimitationScope&quot;: &quot;0&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="22679542">applying a percentage from Member Account/Dynamic attribute is not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step12" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step12 WRN 42268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step12_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReducePriceScope&quot;: &quot;3&quot;,&#xd;
								                &quot;InjectRewardFromMAId&quot;: &quot;1&quot;,&#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;0&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;0&quot;,&#xd;
								                &quot;LimitRewardMAScope&quot;: &quot;3&quot;,&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,&#xd;
								                &quot;DigitalCouponRequired&quot;: &quot;0&quot;,&#xd;
								                &quot;IssueOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								                &quot;RewardLimitationScope&quot;: &quot;0&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="22679542">applying a percentage from Member Account/Dynamic attribute is not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step13" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step13 WRN 43268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step13_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;1&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,								                &#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,&#xd;
										&quot;TimingMemberAccountScope&quot;: &quot;1&quot;,&#xd;
								                &quot;DigitalCouponRequired&quot;: &quot;0&quot;,&#xd;
								                &quot;IssueOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								                &quot;RewardLimitationScope&quot;: &quot;0&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-778894428">The chosen Reward Timing is not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step14" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step14 WRN 44268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step14_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;2&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,								                &#xd;
										&quot;DocumentType&quot;: &quot;5&quot;,&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,										&#xd;
								                &quot;DigitalCouponRequired&quot;: &quot;0&quot;,&#xd;
								                &quot;IssueCompensationDocumentScope&quot;: &quot;0&quot;,&#xd;
								                &quot;RewardLimitationScope&quot;: &quot;0&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-778894428">The chosen Reward Timing is not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step15" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step15 WRN 45268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step15_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;1&quot;,&#xd;
										&quot;ReduceMemberAccountId&quot;: &quot;1&quot;,&#xd;
                								&quot;ReduceMemberAccountValue&quot;: &quot;22&quot;,&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,										&#xd;
								                &quot;DigitalCouponRequired&quot;: &quot;0&quot;,&#xd;
								                &#xd;
								                &quot;RewardLimitationScope&quot;: &quot;0&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521926">The chosen optional attributes are not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step16" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step16 WRN 46268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step16_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;2&quot;,&#xd;
										&quot;ReduceMemberAccountId&quot;: &quot;1&quot;,&#xd;
                								&quot;ReduceMemberAccountValidationAppliesTo&quot;: &quot;101&quot;,&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,										&#xd;
								                &quot;DigitalCouponRequired&quot;: &quot;0&quot;,&#xd;
								                &#xd;
								                &quot;RewardLimitationScope&quot;: &quot;0&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521926">The chosen optional attributes are not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step17" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step17 WRN 47268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step17_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;3&quot;,										&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;									&#xd;
								                &#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521926">The chosen optional attributes are not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step18" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step18 WRN 48268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step18_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;4&quot;,										&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;									&#xd;
								                &#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521926">The chosen optional attributes are not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step19" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step19 WRN 49268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step19_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;5&quot;,										&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;									&#xd;
								                &#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521926">The chosen optional attributes are not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step20" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step20 WRN 50268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step20_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,										&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;1&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;									&#xd;
								                &#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521926">The chosen optional attributes are not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step21" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step21 WRN 51268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step21_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,										&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,									&#xd;
								                &quot;ConnectedSegmentId&quot;: &quot;1&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521926">The chosen optional attributes are not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step22" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step22 WRN 52268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step22_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,										&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,									&#xd;
								                &quot;DisconnectedSegmentId&quot;: &quot;1&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521926">The chosen optional attributes are not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1 for step23" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(ExternalReferenceID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Step23 WRN 53268" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
						&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;Step23_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;3&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,								&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;Step2_${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,								&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
            						&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;2&quot;,														&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
								&quot;PauseFromExecutionOnStores&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardItemMinimumPrice&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;10&quot;,&#xd;
							       	          &quot;RewardValue&quot;: &quot;1.000&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
                								&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
								                &quot;TimingScope&quot;: &quot;0&quot;,&#xd;
								                &quot;PercentLimitationScope&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountScope&quot;: &quot;0&quot;,										&#xd;
								                &quot;ReducePriceScope&quot;: &quot;0&quot;,								                &#xd;
								                &quot;MABalanceType&quot;: &quot;101&quot;,&#xd;
								                &quot;ReduceMAByRewardValue&quot;: &quot;1&quot;,&#xd;
								                &quot;LimitRewardMAAmount&quot;: &quot;1&quot;,						                &#xd;
									&#xd;
								                &quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
								                &quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;,&#xd;
								                &quot;ReduceMemberAccountValueScope&quot;: &quot;1&quot;,									&#xd;
								                &quot;DisconnectedSegmentId&quot;: &quot;1&quot;&#xd;
                								},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}, {&#xd;
													&quot;BucketId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;2&quot;												    }&#xd;
										               	]&#xd;
										},&#xd;
										&quot;Messages&quot;: {&#xd;
								                &quot;Message&quot;: [&#xd;
								                  {&#xd;
								                    &quot;AttributeId&quot;: &quot;5159&quot;,&#xd;
								                    &quot;AttributeValue&quot;: &quot;1&quot;,&#xd;
								                    &quot;self-closing&quot;: &quot;true&quot;&#xd;
								                  },&#xd;
								                  {&#xd;
								                    &quot;AttributeId&quot;: &quot;5160&quot;,&#xd;
								                    &quot;AttributeValue&quot;: &quot;1&quot;,&#xd;
								                    &quot;self-closing&quot;: &quot;true&quot;&#xd;
								                  },&#xd;
								                  {&#xd;
								                    &quot;AttributeId&quot;: &quot;5169&quot;,&#xd;
								                    &quot;AttributeValue&quot;: &quot;1&quot;,&#xd;
								                    &quot;self-closing&quot;: &quot;true&quot;&#xd;
								                  },&#xd;
								                  {&#xd;
								                    &quot;AttributeId&quot;: &quot;5170&quot;,&#xd;
								                    &quot;AttributeValue&quot;: &quot;1&quot;,&#xd;
								                    &quot;self-closing&quot;: &quot;true&quot;&#xd;
								                  },&#xd;
								                  {&#xd;
								                    &quot;AttributeId&quot;: &quot;5179&quot;,&#xd;
								                    &quot;AttributeValue&quot;: &quot;1&quot;,&#xd;
								                    &quot;self-closing&quot;: &quot;true&quot;&#xd;
								                  },&#xd;
								                  {&#xd;
								                    &quot;AttributeId&quot;: &quot;5180&quot;,&#xd;
								                    &quot;AttributeValue&quot;: &quot;1&quot;,&#xd;
								                    &quot;self-closing&quot;: &quot;true&quot;&#xd;
								                  },&#xd;
								                  {&#xd;
								                    &quot;AttributeId&quot;: &quot;5182&quot;,&#xd;
								                    &quot;AttributeValue&quot;: &quot;1&quot;,&#xd;
								                    &quot;self-closing&quot;: &quot;true&quot;&#xd;
								                  }&#xd;
								                ]&#xd;
              }&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Name&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;IncentiveMsgAppliesTo&quot;: &quot;1&quot;,&#xd;
									&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	{&#xd;
										&quot;Id&quot;: &quot;2&quot;,&#xd;
										&quot;Name&quot;: &quot;2&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;false&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;false&quot;,&#xd;
										&quot;LimitRewardedByConditionSpend&quot;: &quot;false&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;DeductTenderAmountFromQualifyingTicketSpend&quot;: &quot;false&quot;,&#xd;
										&quot;IncentiveMsgAppliesTo&quot;: &quot;1&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
									{&#xd;
									&quot;EntityId&quot;: &quot;1&quot;,&#xd;
									&quot;EntityType&quot;: &quot;0&quot;,&#xd;
									&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
									&quot;Exclude&quot;: &quot;false&quot;&#xd;
									}]&#xd;
										},	&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="460521926">The chosen optional attributes are not supported when ReturnItemEligibility = 2</stringProp>
              <stringProp name="-1996510778">&quot;TotalImportedPromotions&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
