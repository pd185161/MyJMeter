<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables-Global" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="env" elementType="Argument">
            <stringProp name="Argument.name">env</stringProp>
            <stringProp name="Argument.value">SRRAADEVGUI</stringProp>
            <stringProp name="Argument.desc">Environment name to be used in the Endpoint URL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DBServer" elementType="Argument">
            <stringProp name="Argument.name">DBServer</stringProp>
            <stringProp name="Argument.value">SRRAADEVGUI</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverIP" elementType="Argument">
            <stringProp name="Argument.name">serverIP</stringProp>
            <stringProp name="Argument.value">153.77.180.130</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverUserName" elementType="Argument">
            <stringProp name="Argument.name">serverUserName</stringProp>
            <stringProp name="Argument.value">s_raa_appadmin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverPassword" elementType="Argument">
            <stringProp name="Argument.name">serverPassword</stringProp>
            <stringProp name="Argument.value">HAha123!</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LoyaltyDBName" elementType="Argument">
            <stringProp name="Argument.name">LoyaltyDBName</stringProp>
            <stringProp name="Argument.value">Loyalty_LMS_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PromotionDBName" elementType="Argument">
            <stringProp name="Argument.name">PromotionDBName</stringProp>
            <stringProp name="Argument.value">Promotion_LMS_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MPDBName" elementType="Argument">
            <stringProp name="Argument.name">MPDBName</stringProp>
            <stringProp name="Argument.value">MP_LMS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DownloadDBName" elementType="Argument">
            <stringProp name="Argument.name">DownloadDBName</stringProp>
            <stringProp name="Argument.value">DLDB_LMS_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LoyaltyOnlineDBName" elementType="Argument">
            <stringProp name="Argument.name">LoyaltyOnlineDBName</stringProp>
            <stringProp name="Argument.value">LoyaltyOnline_LMS_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RetailerID" elementType="Argument">
            <stringProp name="Argument.name">RetailerID</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RetailerUserID" elementType="Argument">
            <stringProp name="Argument.name">RetailerUserID</stringProp>
            <stringProp name="Argument.value">TestRetailerPK</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RetailerPassword" elementType="Argument">
            <stringProp name="Argument.name">RetailerPassword</stringProp>
            <stringProp name="Argument.value">Abcd1234</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CurrDate1" elementType="Argument">
            <stringProp name="Argument.name">CurrDate1</stringProp>
            <stringProp name="Argument.value">${__groovy(new Date().format(&apos;yyyy-MM-dd&apos;),)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CurrDate" elementType="Argument">
            <stringProp name="Argument.name">CurrDate</stringProp>
            <stringProp name="Argument.value">${__time(yyyy-MM-dd)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="transID" elementType="Argument">
            <stringProp name="Argument.name">transID</stringProp>
            <stringProp name="Argument.value">${__Random(5000000,6000000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="batchManagerPath" elementType="Argument">
            <stringProp name="Argument.name">batchManagerPath</stringProp>
            <stringProp name="Argument.value">C:\Retalix\LMS\HQ Loyalty and Promotions.1\BatchManager</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">This is the server path where batch manager bat file is available</stringProp>
          </elementProp>
          <elementProp name="PSToolPath" elementType="Argument">
            <stringProp name="Argument.name">PSToolPath</stringProp>
            <stringProp name="Argument.value">C:/Manoj/apache-jmeter-5.4.1/bin/PSTools</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ExportFileLocalPath" elementType="Argument">
            <stringProp name="Argument.name">ExportFileLocalPath</stringProp>
            <stringProp name="Argument.value">C:/Manoj/apache-jmeter-5.4.1/bin/PSTools/ExportFiles</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-LoyaltyDB" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer};databaseName=${LoyaltyDBName}</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-Promotion DB" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer};databaseName=${PromotionDBName}</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-Loyalty Online" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty_Online</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer};databaseName=${LoyaltyOnlineDBName}</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-DownloadDB" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_DownloadDB</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer};databaseName=${DownloadDBName}</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group- Export Promotion Batch Run- Mode 1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Full export--All types of Promotion included (Active + historic + cancelled + future)</stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-XML" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">LmsSession ${session}</stringProp>
            </elementProp>
            <elementProp name="DebugLevel" elementType="Header">
              <stringProp name="Header.name">DebugLevel</stringProp>
              <stringProp name="Header.value">Info</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

log.info(&quot;PreProcessor OSbatch run started&quot;);
//Create remote batch file
String batName = &quot;PROMOTIONEXPORT&quot;;
String inputFileformat = &quot;&quot;;
String outputFilePath =&quot;C:\\Retalix\\LPBatchExportOp\\Out\\&quot;;
String workFilePath = &quot;C:\\Retalix\\LPBatchExportOp\\Wrk\\&quot;;
String logFile = &quot;C:\\Retalix\\LPBatchExportOp\\Log\\PromotionExport.log&quot;;
String errorFile = &quot;C:\\Retalix\\LPBatchExportOp\\Err\\PromotionExport.err&quot;;
String retailerID = vars.get(&quot;RetailerID&quot;);
String otherCriteria = &quot;/Mode=1&quot;;

//UPload to variable
vars.put(&quot;OutputPath&quot;,outputFilePath);
vars.put(&quot;LogFile&quot;,logFile);
vars.put(&quot;ErrorFile&quot;,errorFile);

StringBuilder batFileText = new StringBuilder(&quot;ReMABatchManager.exe&quot;);
batFileText.append(&quot; -A&quot;+ batName);
if (inputFileformat != &quot;&quot; &amp;&amp; inputFileformat != null )
{
	batFileText.append(&quot; -N*&quot;+ inputFileformat);
}
batFileText.append(&quot; -O&quot;+ outputFilePath);
batFileText.append(&quot; -W&quot;+ workFilePath);
batFileText.append(&quot; -L&quot;+ logFile);
batFileText.append(&quot; -E&quot;+ errorFile);
batFileText.append(&quot; -R&quot;+ retailerID);
batFileText.append(&quot; &quot;+ otherCriteria);

//String batFileText = &quot;ReMABatchManager.exe&quot;+&quot; &quot;+ &quot;-A&quot; + batName.toUpperCase()+&quot; &quot;+&quot;-O&quot;+outputFilePath+&quot; &quot;+&quot;-W&quot;+workFilePath+&quot; &quot; + &quot;-L&quot; + logFile + &quot; &quot; + &quot;-E&quot;+errorFile+ &quot; &quot; +&quot;-R&quot;+retailerID+ &quot; &quot;+ otherCriteria;

String serverIP = vars.get(&quot;serverIP&quot;);
String serverUserName = &quot;s_raa_appadmin&quot;;
String serverPassword = &quot;HAha123!&quot;;
String batchManagerPath = vars.get(&quot;batchManagerPath&quot;);

String remoteBatchFilePath=&quot;\\\\&quot;+serverIP+&quot;\\&quot;+batchManagerPath.replace(&quot;:&quot;,&quot;&quot;);
String remoteBatchFile = remoteBatchFilePath+&quot;\\TestBatch_Jmeter.bat&quot;;
File file = new File(remoteBatchFile);

FileWriter fw = new FileWriter(file.getAbsoluteFile(),false);
BufferedWriter bw = new BufferedWriter(fw);
bw.write(batFileText.toString());
bw.close();


//------Start: Create local batch file to run server batch file-------//
StringBuilder localbatText = new StringBuilder(&quot;@ECHO OFF&quot;);
localbatText.append(&quot;\nPsExec.exe&quot;);
localbatText.append(&quot; \\\\&quot;+ serverIP );
localbatText.append(&quot; -u HQL\\&quot;+serverUserName);
localbatText.append(&quot; -p &quot;+serverPassword);
localbatText.append(&quot; cmd /c &quot;);
localbatText.append(&quot;\&quot;cd /d &quot; + batchManagerPath +&quot; &amp;&amp; &quot;);
localbatText.append(&quot;TestBatch_Jmeter.bat&quot;+&quot;\&quot;&quot;);
localbatText.append(&quot;\nPAUSE&quot;);

String localbatFile= vars.get(&quot;PSToolPath&quot;) + &quot;\\LocalBatchFile.bat&quot;;
File localFile = new File(localbatFile);

FileWriter fwr = new FileWriter(localFile.getAbsoluteFile(),false);
BufferedWriter bwr = new BufferedWriter(fwr);
bwr.write(localbatText.toString());
bwr.close();
//------End: Create local batch file to run server batch file-------//

//send batchfile path to variable 
//String batchPath = &quot;C:\\Users\\pd185161\\OneDrive - NCR Corporation\\Desktop\\LP\\apache-jmeter-5.4.1\\PSTools\\PSTools\\LMSBatchInitiator.bat&quot;;
vars.put(&quot;LocalBatchFile&quot;,localbatFile);
log.info(&quot;PreProcessor OSbatch run ended&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get total Promotions count" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select PromotionHeaderId as DBPromotionID from PromotionHeader where Matrixmemberid=  @matrixmemberid order by PromotionHeaderId asc</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">DBPromotionID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">All types of Promotion included (Active + historic + cancelled + future)</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler- Export Promotion batch - Mode 1" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">CMD</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/C</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${LocalBatchFile}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${PSToolPath}</stringProp>
        </SystemSampler>
        <hashTree>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor- Take RemoteBatchStatus" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">RemoteBatchStatus</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">error code </stringProp>
            <stringProp name="BoundaryExtractor.rboundary">.</stringProp>
            <stringProp name="BoundaryExtractor.default">99</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">0</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Verify Batch Status remotely" enabled="true">
            <stringProp name="BeanShellAssertion.query">String remoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);


if (remoteBatchStatus.equals(&quot;0&quot;))
{
	Failure = false;
}
else 
{
	Failure = true; 
	FailureMessage = &quot; Error in remote batchrun. Error Code: &quot; + remoteBatchStatus;

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor- Read Files" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;



String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;

//log.info (prevRemoteBatchStatus.toString());
if (prevRemoteBatchStatus.equals(&quot;0&quot;))
{
	filename = vars.get(&quot;LogFile&quot;);
	log.info (filename);
	log.info (&quot;-----------------------------------------------&quot;);
	log.info (&quot;No error in batch run. Reading out log file is in process.....&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
}
else if (prevRemoteBatchStatus.equals(&quot;99&quot;))
{
	filename = vars.get(&quot;ErrorFile&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
	log.info(&quot;There is error in batch run. Error code : &quot; + prevRemoteBatchStatus.toString());
	log.info(&quot;Starting to readout error log file&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
}

else
{
	log.info (&quot;-----------------------------------------------&quot;);
	log.info(&quot;Different error appeared. Error code : &quot; + prevRemoteBatchStatus.toString() + &quot; Please restart batch manager service&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
	return;
}

//log.info (filename);
//log.info(&quot;File name is &quot;+ filename);

String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+filename.replace(&quot;:&quot;,&quot;$&quot;);
log.info (fileNameUp);

File file = new File(fileNameUp);

String str;
FileReader fr = new FileReader(file);
BufferedReader br= new BufferedReader(fr);

int startlinenumber=0;
int endlinenumber=0;
int linecounter=1;
while((str=br.readLine())!=null)
{
	
	if (str.contains(&quot;======================Start&quot;))
	{
		startlinenumber=linecounter;	
	}
	if (str.contains(&quot;==============End&quot;))
	{
		endlinenumber=linecounter;	
	}
	linecounter++;
}

String logFileText = &quot;&quot;;

String line;
for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
   {
  	 	FileReader fr1 = new FileReader(file);
    		BufferedReader br1 = new BufferedReader(fr1);
  	    for (int i = 1; i &lt; j; i++)
       {
           br1.readLine();
       }
  	    line = br1.readLine();
  	    logFileText = logFileText.concat(&quot;\n&quot;+line);
    }
   
log.info(&quot;-------------------------File data starts here----------------------------&quot;);
log.info(logFileText);
log.info(&quot;-------------------------File data ends here----------------------------&quot;);

/*---------------------------------- Starting checking the exported files----------------------------------*/
if (prevRemoteBatchStatus.equals(&quot;99&quot;)) //If error is there below will not be executed 
{
	return;
}
String[] lines = logFileText.split(System.getProperty(&quot;line.separator&quot;));

ArrayList sList = new ArrayList();

for(int i=0;i&lt;lines.length;i++)
{
	//System.out.println(lines[i]);
	if(lines[i].contains(&quot;Start write promotion export data to file&quot;))
	{
		//sList.add();
		String regPattern=&quot;export data to file (.*).;&quot;;
		
		Pattern r =Pattern.compile(regPattern);
		Matcher m= r.matcher(lines[i]);
		if (m.find( )) 
		{
	      sList.add(m.group(1));
		}
		else
		{
	         log.info(&quot;NO MATCH. No File exported&quot;);
	    }
		
	}
	if(lines[i].contains(&quot;is empty. Trying to delete.&quot;))
	{
		//sList.add();
		String regPattern=&quot;Description : File (.*) is empty.&quot;;
		
		Pattern r =Pattern.compile(regPattern);
		Matcher m= r.matcher(lines[i]);
		if (m.find( )) 
		{
	      sList.remove(m.group(1));
		}
		
	}
	
}


/*---------Start: Code to copy files from one place to another-----------*/
private static void copyFileUsingStream(File source, File dest) throws IOException {
  InputStream is = null;
  OutputStream os = null;
  try {
      is = new FileInputStream(source);
      os = new FileOutputStream(dest);
      byte[] buffer = new byte[1024];
      int length;
      while ((length = is.read(buffer)) &gt; 0) {
          os.write(buffer, 0, length);
      }
  } finally {
      is.close();
      os.close();
  }
}
/*---------End: Code to copy files from one place to another-----------*/

ArrayList copiedFiles = new ArrayList();


for (int i = 0; i &lt; sList.size(); i++) {
	 //System.out.println(sList.get(i));
	 
	 String serverFilePath = &quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+ ((String) sList.get(i)).replace(&quot;:&quot;,&quot;&quot;);

	 File file= new File(serverFilePath);
	 if(file.exists())
	 {
	 log.info(&quot;File &quot; + (String) sList.get(i) + &quot; exists&quot;);
	 
	 copiedFiles.add(vars.get(&quot;ExportFileLocalPath&quot;)+&quot;/&quot;+file.getName());
	 File destfile= new File(vars.get(&quot;ExportFileLocalPath&quot;)+&quot;/&quot;+file.getName());
	 try {
			copyFileUsingStream(file,destfile);
			log.info(&quot;file is getting copied&quot;);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			
		}
	 }
	 else 
		log.info(&quot;File &quot; + (String) sList.get(i) + &quot; does not exist&quot; );
	}
//Add exported file names to a variable	
vars.putObject(&quot;CopiedFilesNames&quot;, copiedFiles);
/*---------------------------------- Ending checking the exported files----------------------------------*/</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion - Verify promotion count in export files" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.*;

import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.google.common.io.Files;


/*Start: Do not run this code if OS process sampler status is not 0*/
String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
if (!prevRemoteBatchStatus.equals(&quot;0&quot;))
{
	log.info(&quot;Stopping JSR223 assertion execution as batch run is not successful&quot;);
	return;
}
/*End: Do not run this code if OS process sampler status is not 0*/



ArrayList copiedFileNames= vars.getObject(&quot;CopiedFilesNames&quot;); 


/*Start: Find attibute values in xml based on input xPath */
private static ArrayList GetListOfxPathValuesfromXML(String xmlFilePath, String xPath)
	{
		ArrayList xpathValues = new ArrayList();

		try {
			
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document doc = builder.parse(xmlFilePath);
			XPathFactory xPathfactory = XPathFactory.newInstance();
			XPath xpath = xPathfactory.newXPath();
			XPathExpression expr = xpath.compile(xPath);
			NodeList nl = (NodeList) expr.evaluate(doc, XPathConstants.NODESET);
			
			for (int i = 0; i &lt; nl.getLength(); i++)
			{
			    org.w3c.dom.Node currentItem = nl.item(i);
			    String key = currentItem.getNodeValue();
			    xpathValues.add(key);
			}
			
			
		}  catch (IOException e) {
			System.out.println(e.getMessage());
		}
		 catch (XPathExpressionException e) {
			 System.out.println(e.getMessage());
		}
		 catch (DOMException e) {
			 System.out.println(e.getMessage());
		}
		 catch (ParserConfigurationException e) {
			System.out.println(e.getMessage());
		}
		 catch (SAXException e) {
			 System.out.println(e.getMessage());
		}
			
		
		return xpathValues;
	}
/*End: Find attibute values in xml based on input xPath */



ArrayList arr1 = new ArrayList();
for(int i=0; i&lt;copiedFileNames.size();i++)
{
	String xPath = &quot;//HQL_Promotion_Interface//Retailer//Promotions//Promotion//@PromotionInternalKey&quot;;
   	ArrayList arrlist = new ArrayList();
   	arrlist = GetListOfxPathValuesfromXML((String) copiedFileNames.get(i),&quot;//HQL_Promotion_Interface//Retailer//Promotions//Promotion//@PromotionInternalKey&quot;);
   	Collections.sort(arrlist);
   	arr1.addAll(arrlist);
}
   
   //System.out.println(arr1);
Object[] st = arr1.toArray();
for (Object s : st) 
{
	if (arr1.indexOf(s) != arr1.lastIndexOf(s)) 
	{
		arr1.remove(arr1.lastIndexOf(s));
	}
}
 Collections.sort(arr1);
 //System.out.println(arr1);
 
Integer[] ExportFilesPromotions= new Integer [arr1.size()];

 for(int i= 0 ; i&lt;ExportFilesPromotions.length;i++)
 {
	ExportFilesPromotions[i]=Integer.parseInt((String) arr1.get(i));
 }
	Arrays.sort(ExportFilesPromotions);


   
if(Integer.toString(ExportFilesPromotions.length).equals(&quot;${DBPromotionID_#}&quot;))
{
	int failure= 0;
	log.info(&quot;Count of Promotions in both export xml and DB is matched. Validating Promotion IDs...&quot;);
	for (int i = 0; i&lt; ExportFilesPromotions.length; i++)
	{
		//log.info (ExportFilesPromotions[i].toString() + &quot; &quot; + vars.get(&quot;DBPromotionID_&quot;+(i+1)) );
		
		if (!ExportFilesPromotions[i].toString().equals(vars.get(&quot;DBPromotionID_&quot;+(i+1))))
		{
			AssertionResult.setFailureMessage(&quot;Promotion in DB is not matching with promotion in export file. Promotion in export file is:&quot;+ExportFilesPromotions[i].toString()+&quot; Promotion in DB is &quot;+vars.get(&quot;DBPromotionID_&quot;+(i+1)));
  			AssertionResult.setFailure(true);
			failure= 1;
		}
	}
	if (failure==0)
		{
			log.info(&quot;Promotion ids matched in both export files and DB result&quot;);
		}
}
else
{
	log.error(&quot;Promotion count in export files: &quot; +Integer.toString(ExportFilesPromotions.length)+ &quot; not matching against DB promotion count. &quot;+vars.get(&quot;DBPromotionID_#&quot;));
	AssertionResult.setFailureMessage(&quot;Promotion count in export files: &quot; +Integer.toString(ExportFilesPromotions.length)+ &quot; not matching against DB promotion count. &quot;+vars.get(&quot;DBPromotionID_#&quot;));
   	AssertionResult.setFailure(true);
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group- Export Promotion Batch Run- Mode 2" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Active\Future &amp; Promotions updated since last Mode 2 Export</stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-XML" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">LmsSession ${session}</stringProp>
            </elementProp>
            <elementProp name="DebugLevel" elementType="Header">
              <stringProp name="Header.name">DebugLevel</stringProp>
              <stringProp name="Header.value">Info</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

log.info(&quot;PreProcessor OSbatch run started&quot;);
//Create remote batch file
String batName = &quot;PROMOTIONEXPORT&quot;;
String inputFileformat = &quot;&quot;;
String outputFilePath =&quot;C:\\Retalix\\LPBatchExportOp\\Out\\&quot;;
String workFilePath = &quot;C:\\Retalix\\LPBatchExportOp\\Wrk\\&quot;;
String logFile = &quot;C:\\Retalix\\LPBatchExportOp\\Log\\PromotionExport.log&quot;;
String errorFile = &quot;C:\\Retalix\\LPBatchExportOp\\Err\\PromotionExport.err&quot;;
String retailerID = vars.get(&quot;RetailerID&quot;);
String otherCriteria = &quot;/Mode=2&quot;;

//UPload to variable
vars.put(&quot;OutputPath&quot;,outputFilePath);
vars.put(&quot;LogFile&quot;,logFile);
vars.put(&quot;ErrorFile&quot;,errorFile);

StringBuilder batFileText = new StringBuilder(&quot;ReMABatchManager.exe&quot;);
batFileText.append(&quot; -A&quot;+ batName);
if (inputFileformat != &quot;&quot; &amp;&amp; inputFileformat != null )
{
	batFileText.append(&quot; -N*&quot;+ inputFileformat);
}
batFileText.append(&quot; -O&quot;+ outputFilePath);
batFileText.append(&quot; -W&quot;+ workFilePath);
batFileText.append(&quot; -L&quot;+ logFile);
batFileText.append(&quot; -E&quot;+ errorFile);
batFileText.append(&quot; -R&quot;+ retailerID);
batFileText.append(&quot; &quot;+ otherCriteria);

//String batFileText = &quot;ReMABatchManager.exe&quot;+&quot; &quot;+ &quot;-A&quot; + batName.toUpperCase()+&quot; &quot;+&quot;-O&quot;+outputFilePath+&quot; &quot;+&quot;-W&quot;+workFilePath+&quot; &quot; + &quot;-L&quot; + logFile + &quot; &quot; + &quot;-E&quot;+errorFile+ &quot; &quot; +&quot;-R&quot;+retailerID+ &quot; &quot;+ otherCriteria;

String serverIP = vars.get(&quot;serverIP&quot;);
String serverUserName = &quot;s_raa_appadmin&quot;;
String serverPassword = &quot;HAha123!&quot;;
String batchManagerPath = vars.get(&quot;batchManagerPath&quot;);

String remoteBatchFilePath=&quot;\\\\&quot;+serverIP+&quot;\\&quot;+batchManagerPath.replace(&quot;:&quot;,&quot;&quot;);
String remoteBatchFile = remoteBatchFilePath+&quot;\\TestBatch_Jmeter.bat&quot;;
File file = new File(remoteBatchFile);

FileWriter fw = new FileWriter(file.getAbsoluteFile(),false);
BufferedWriter bw = new BufferedWriter(fw);
bw.write(batFileText.toString());
bw.close();


//------Start: Create local batch file to run server batch file-------//
StringBuilder localbatText = new StringBuilder(&quot;@ECHO OFF&quot;);
localbatText.append(&quot;\nPsExec.exe&quot;);
localbatText.append(&quot; \\\\&quot;+ serverIP );
localbatText.append(&quot; -u HQL\\&quot;+serverUserName);
localbatText.append(&quot; -p &quot;+serverPassword);
localbatText.append(&quot; cmd /c &quot;);
localbatText.append(&quot;\&quot;cd /d &quot; + batchManagerPath +&quot; &amp;&amp; &quot;);
localbatText.append(&quot;TestBatch_Jmeter.bat&quot;+&quot;\&quot;&quot;);
localbatText.append(&quot;\nPAUSE&quot;);

String localbatFile= vars.get(&quot;PSToolPath&quot;) + &quot;\\LocalBatchFile.bat&quot;;
File localFile = new File(localbatFile);

FileWriter fwr = new FileWriter(localFile.getAbsoluteFile(),false);
BufferedWriter bwr = new BufferedWriter(fwr);
bwr.write(localbatText.toString());
bwr.close();
//------End: Create local batch file to run server batch file-------//

//send batchfile path to variable 
//String batchPath = &quot;C:\\Users\\pd185161\\OneDrive - NCR Corporation\\Desktop\\LP\\apache-jmeter-5.4.1\\PSTools\\PSTools\\LMSBatchInitiator.bat&quot;;
vars.put(&quot;LocalBatchFile&quot;,localbatFile);
log.info(&quot;PreProcessor OSbatch run ended&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Login" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;UserLogin xmlns=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
      &lt;in_UserName&gt;${RetailerUserID}&lt;/in_UserName&gt;&#xd;
      &lt;in_Password&gt;${RetailerPassword}&lt;/in_Password&gt;&#xd;
    &lt;/UserLogin&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Authorization/Login.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">${session}</stringProp>
            <stringProp name="XPathExtractor.refname">session</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_SessionKey</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable">sKey</stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Create SI Promo" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
							&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;SIPromo${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;1&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,&#xd;
								&quot;Remarks&quot;: &quot;&quot;,&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;SIPromo${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;6&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;0&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;1&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
										&quot;Suspended&quot;: &quot;false&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;LimitItemCount&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;MSUQuantity&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}&#xd;
											]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
											{&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler- Export Promotion batch - Mode 2" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">CMD</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/C</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${LocalBatchFile}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${PSToolPath}</stringProp>
        </SystemSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
            <stringProp name="RegexExtractor.refname">PKStatus</stringProp>
            <stringProp name="RegexExtractor.regex">(?&lt;=error code\s).*?(?=\.)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">${PKStatus}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor- Take RemoteBatchStatus" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">RemoteBatchStatus</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">error code </stringProp>
            <stringProp name="BoundaryExtractor.rboundary">.</stringProp>
            <stringProp name="BoundaryExtractor.default">99</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">0</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Verify Batch Status remotely" enabled="true">
            <stringProp name="BeanShellAssertion.query">String remoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);


if (remoteBatchStatus.equals(&quot;0&quot;))
{
	Failure = false;
}
else 
{
	Failure = true; 
	FailureMessage = &quot; Error in remote batchrun. Error Code: &quot; + remoteBatchStatus;

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor- Read Files" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;



String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;

//log.info (prevRemoteBatchStatus.toString());
if (prevRemoteBatchStatus.equals(&quot;0&quot;))
{
	filename = vars.get(&quot;LogFile&quot;);
	log.info (filename);
	log.info (&quot;-----------------------------------------------&quot;);
	log.info (&quot;No error in batch run. Reading out log file is in process.....&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
}
else if (prevRemoteBatchStatus.equals(&quot;99&quot;))
{
	filename = vars.get(&quot;ErrorFile&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
	log.info(&quot;There is error in batch run. Error code : &quot; + prevRemoteBatchStatus.toString());
	log.info(&quot;Starting to readout error log file&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
}

else
{
	log.info (&quot;-----------------------------------------------&quot;);
	log.info(&quot;Different error appeared. Error code : &quot; + prevRemoteBatchStatus.toString() + &quot; Please restart batch manager service&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
	return;
}

//log.info (filename);
//log.info(&quot;File name is &quot;+ filename);

String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+filename.replace(&quot;:&quot;,&quot;$&quot;);
log.info (fileNameUp);

File file = new File(fileNameUp);

String str;
FileReader fr = new FileReader(file);
BufferedReader br= new BufferedReader(fr);

int startlinenumber=0;
int endlinenumber=0;
int linecounter=1;
while((str=br.readLine())!=null)
{
	
	if (str.contains(&quot;======================Start&quot;))
	{
		startlinenumber=linecounter;	
	}
	if (str.contains(&quot;==============End&quot;))
	{
		endlinenumber=linecounter;	
	}
	linecounter++;
}

String logFileText = &quot;&quot;;

String line;
for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
   {
  	 	FileReader fr1 = new FileReader(file);
    		BufferedReader br1 = new BufferedReader(fr1);
  	    for (int i = 1; i &lt; j; i++)
       {
           br1.readLine();
       }
  	    line = br1.readLine();
  	    logFileText = logFileText.concat(&quot;\n&quot;+line);
    }
   
log.info(&quot;-------------------------File data starts here----------------------------&quot;);
log.info(logFileText);
log.info(&quot;-------------------------File data ends here----------------------------&quot;);

/*---------------------------------- Starting checking the exported files----------------------------------*/
if (prevRemoteBatchStatus.equals(&quot;99&quot;)) //If error is there below will not be executed 
{
	return;
}
String[] lines = logFileText.split(System.getProperty(&quot;line.separator&quot;));

ArrayList sList = new ArrayList();

for(int i=0;i&lt;lines.length;i++)
{
	//System.out.println(lines[i]);
	if(lines[i].contains(&quot;Start write promotion export data to file&quot;))
	{
		//sList.add();
		String regPattern=&quot;export data to file (.*).;&quot;;
		
		Pattern r =Pattern.compile(regPattern);
		Matcher m= r.matcher(lines[i]);
		if (m.find( )) 
		{
	      sList.add(m.group(1));
		}
		else
		{
	         log.info(&quot;NO MATCH. No File exported&quot;);
	    }
		
	}
	if(lines[i].contains(&quot;is empty. Trying to delete.&quot;))
	{
		//sList.add();
		String regPattern=&quot;Description : File (.*) is empty.&quot;;
		
		Pattern r =Pattern.compile(regPattern);
		Matcher m= r.matcher(lines[i]);
		if (m.find( )) 
		{
	      sList.remove(m.group(1));
		}
		
	}
	
}


/*---------Start: Code to copy files from one place to another-----------*/
private static void copyFileUsingStream(File source, File dest) throws IOException {
  InputStream is = null;
  OutputStream os = null;
  try {
      is = new FileInputStream(source);
      os = new FileOutputStream(dest);
      byte[] buffer = new byte[1024];
      int length;
      while ((length = is.read(buffer)) &gt; 0) {
          os.write(buffer, 0, length);
      }
  } finally {
      is.close();
      os.close();
  }
}
/*---------End: Code to copy files from one place to another-----------*/

ArrayList copiedFiles = new ArrayList();


for (int i = 0; i &lt; sList.size(); i++) {
	 //System.out.println(sList.get(i));
	 
	 String serverFilePath = &quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+ ((String) sList.get(i)).replace(&quot;:&quot;,&quot;&quot;);

	 File file= new File(serverFilePath);
	 if(file.exists())
	 {
	 log.info(&quot;File &quot; + (String) sList.get(i) + &quot; exists&quot;);
	 
	 copiedFiles.add(vars.get(&quot;ExportFileLocalPath&quot;)+&quot;/&quot;+file.getName());
	 File destfile= new File(vars.get(&quot;ExportFileLocalPath&quot;)+&quot;/&quot;+file.getName());
	 try {
			copyFileUsingStream(file,destfile);
			log.info(&quot;file is getting copied&quot;);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			
		}
	 }
	 else 
		log.info(&quot;File &quot; + (String) sList.get(i) + &quot; does not exist&quot; );
	}
//Add exported file names to a variable	
vars.putObject(&quot;CopiedFilesNames&quot;, copiedFiles);
/*---------------------------------- Ending checking the exported files----------------------------------*/</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.*;

import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.google.common.io.Files;


ArrayList copiedFileNames= vars.getObject(&quot;CopiedFilesNames&quot;); 

/*Start: Find attibute value in xml based on input xPath */
private static boolean CompareXMLValue(String xmlFilePath, String xPath, String expectedValue)
	{
		

		try {
			
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document doc = builder.parse(xmlFilePath);
			XPathFactory xPathfactory = XPathFactory.newInstance();
			XPath xpath = xPathfactory.newXPath();
			XPathExpression expr = xpath.compile(xPath);
			NodeList nl = (NodeList) expr.evaluate(doc, XPathConstants.NODESET);
			
			int flag=0;
			for (int i = 0; i &lt; nl.getLength(); i++)
			{
			    org.w3c.dom.Node currentItem = nl.item(i);
			    String key = currentItem.getNodeValue();
			    //System.out.println(key);
			    if (key.equals(expectedValue))
			    {
			    	flag=1;
			    	
			    	return true;
			    }
			    else {		    	
			    	flag=0;
			    }
			}
			if (flag==0)
			{
				return false;
			}
		} catch (IOException e) {
			log.error(e.getMessage());
		}
		 catch (XPathExpressionException e) {
			log.error(e.getMessage());
		}
		 catch (DOMException e) {
			log.error(e.getMessage());
		}
		 catch (ParserConfigurationException e) {
			log.error(e.getMessage());
		}
		 catch (SAXException e) {
			log.error(e.getMessage());
		}
		return false;
	}
/*End: Find attibute value in xml based on input xPath */


		boolean value=false;
		for(int i=0; i&lt;copiedFileNames.size();i++)
		{
			String xmlFilePath = (String) copiedFileNames.get(i);
			String xPath= &quot;//HQL_Promotion_Interface//Retailer//Promotions//Promotion//@PromotionInternalKey&quot;;
			String expectedValue= &quot;${PromotionHeaderID_1}&quot;;
			log.info (&quot;Expected promotion is &quot;+expectedValue);
			
			value= CompareXMLValue(xmlFilePath, xPath,expectedValue);
			
		}
		 
		
		if (value==true)
		{
			AssertionResult.setFailure(false);
			log.info(&quot;Promotion found in export XML&quot;);
		}
		else
			{
				AssertionResult.setFailure(true);
				log.error(&quot;The created promotion is not exported&quot;);
			}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group- Export Promotion Batch Run- Mode 3" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Promotions updated since last Mode 2 Export</stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-XML" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">LmsSession ${session}</stringProp>
            </elementProp>
            <elementProp name="DebugLevel" elementType="Header">
              <stringProp name="Header.name">DebugLevel</stringProp>
              <stringProp name="Header.value">Info</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

log.info(&quot;PreProcessor OSbatch run started&quot;);
//Create remote batch file
String batName = &quot;PROMOTIONEXPORT&quot;;
String inputFileformat = &quot;&quot;;
String outputFilePath =&quot;C:\\Retalix\\LPBatchExportOp\\Out\\&quot;;
String workFilePath = &quot;C:\\Retalix\\LPBatchExportOp\\Wrk\\&quot;;
String logFile = &quot;C:\\Retalix\\LPBatchExportOp\\Log\\PromotionExport.log&quot;;
String errorFile = &quot;C:\\Retalix\\LPBatchExportOp\\Err\\PromotionExport.err&quot;;
String retailerID = vars.get(&quot;RetailerID&quot;);
String otherCriteria = &quot;/Mode=2&quot;;

//UPload to variable
vars.put(&quot;OutputPath&quot;,outputFilePath);
vars.put(&quot;LogFile&quot;,logFile);
vars.put(&quot;ErrorFile&quot;,errorFile);

StringBuilder batFileText = new StringBuilder(&quot;ReMABatchManager.exe&quot;);
batFileText.append(&quot; -A&quot;+ batName);
if (inputFileformat != &quot;&quot; &amp;&amp; inputFileformat != null )
{
	batFileText.append(&quot; -N*&quot;+ inputFileformat);
}
batFileText.append(&quot; -O&quot;+ outputFilePath);
batFileText.append(&quot; -W&quot;+ workFilePath);
batFileText.append(&quot; -L&quot;+ logFile);
batFileText.append(&quot; -E&quot;+ errorFile);
batFileText.append(&quot; -R&quot;+ retailerID);
batFileText.append(&quot; &quot;+ otherCriteria);

//String batFileText = &quot;ReMABatchManager.exe&quot;+&quot; &quot;+ &quot;-A&quot; + batName.toUpperCase()+&quot; &quot;+&quot;-O&quot;+outputFilePath+&quot; &quot;+&quot;-W&quot;+workFilePath+&quot; &quot; + &quot;-L&quot; + logFile + &quot; &quot; + &quot;-E&quot;+errorFile+ &quot; &quot; +&quot;-R&quot;+retailerID+ &quot; &quot;+ otherCriteria;

String serverIP = vars.get(&quot;serverIP&quot;);
String serverUserName = &quot;s_raa_appadmin&quot;;
String serverPassword = &quot;HAha123!&quot;;
String batchManagerPath = vars.get(&quot;batchManagerPath&quot;);

String remoteBatchFilePath=&quot;\\\\&quot;+serverIP+&quot;\\&quot;+batchManagerPath.replace(&quot;:&quot;,&quot;&quot;);
String remoteBatchFile = remoteBatchFilePath+&quot;\\TestBatch_Jmeter.bat&quot;;
File file = new File(remoteBatchFile);

FileWriter fw = new FileWriter(file.getAbsoluteFile(),false);
BufferedWriter bw = new BufferedWriter(fw);
bw.write(batFileText.toString());
bw.close();


//------Start: Create local batch file to run server batch file-------//
StringBuilder localbatText = new StringBuilder(&quot;@ECHO OFF&quot;);
localbatText.append(&quot;\nPsExec.exe&quot;);
localbatText.append(&quot; \\\\&quot;+ serverIP );
localbatText.append(&quot; -u HQL\\&quot;+serverUserName);
localbatText.append(&quot; -p &quot;+serverPassword);
localbatText.append(&quot; cmd /c &quot;);
localbatText.append(&quot;\&quot;cd /d &quot; + batchManagerPath +&quot; &amp;&amp; &quot;);
localbatText.append(&quot;TestBatch_Jmeter.bat&quot;+&quot;\&quot;&quot;);
localbatText.append(&quot;\nPAUSE&quot;);

String localbatFile= vars.get(&quot;PSToolPath&quot;) + &quot;\\LocalBatchFile.bat&quot;;
File localFile = new File(localbatFile);

FileWriter fwr = new FileWriter(localFile.getAbsoluteFile(),false);
BufferedWriter bwr = new BufferedWriter(fwr);
bwr.write(localbatText.toString());
bwr.close();
//------End: Create local batch file to run server batch file-------//

//send batchfile path to variable 
//String batchPath = &quot;C:\\Users\\pd185161\\OneDrive - NCR Corporation\\Desktop\\LP\\apache-jmeter-5.4.1\\PSTools\\PSTools\\LMSBatchInitiator.bat&quot;;
vars.put(&quot;LocalBatchFile&quot;,localbatFile);
log.info(&quot;PreProcessor OSbatch run ended&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Login" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;UserLogin xmlns=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
      &lt;in_UserName&gt;${RetailerUserID}&lt;/in_UserName&gt;&#xd;
      &lt;in_Password&gt;${RetailerPassword}&lt;/in_Password&gt;&#xd;
    &lt;/UserLogin&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Authorization/Login.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">${session}</stringProp>
            <stringProp name="XPathExtractor.refname">session</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_SessionKey</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable">sKey</stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Create SI Promo" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
							&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;SIPromo${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;1&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,&#xd;
								&quot;Remarks&quot;: &quot;&quot;,&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;SIPromo${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;6&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;0&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;1&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
										&quot;Suspended&quot;: &quot;false&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;LimitItemCount&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;MSUQuantity&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}&#xd;
											]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
											{&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler- Export Promotion batch - Mode 3" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">CMD</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/C</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${LocalBatchFile}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${PSToolPath}</stringProp>
        </SystemSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
            <stringProp name="RegexExtractor.refname">PKStatus</stringProp>
            <stringProp name="RegexExtractor.regex">(?&lt;=error code\s).*?(?=\.)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">${PKStatus}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor- Take RemoteBatchStatus" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">RemoteBatchStatus</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">error code </stringProp>
            <stringProp name="BoundaryExtractor.rboundary">.</stringProp>
            <stringProp name="BoundaryExtractor.default">99</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">0</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Verify Batch Status remotely" enabled="true">
            <stringProp name="BeanShellAssertion.query">String remoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);


if (remoteBatchStatus.equals(&quot;0&quot;))
{
	Failure = false;
}
else 
{
	Failure = true; 
	FailureMessage = &quot; Error in remote batchrun. Error Code: &quot; + remoteBatchStatus;

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor- Read Files" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;



String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;

//log.info (prevRemoteBatchStatus.toString());
if (prevRemoteBatchStatus.equals(&quot;0&quot;))
{
	filename = vars.get(&quot;LogFile&quot;);
	log.info (filename);
	log.info (&quot;-----------------------------------------------&quot;);
	log.info (&quot;No error in batch run. Reading out log file is in process.....&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
}
else if (prevRemoteBatchStatus.equals(&quot;99&quot;))
{
	filename = vars.get(&quot;ErrorFile&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
	log.info(&quot;There is error in batch run. Error code : &quot; + prevRemoteBatchStatus.toString());
	log.info(&quot;Starting to readout error log file&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
}

else
{
	log.info (&quot;-----------------------------------------------&quot;);
	log.info(&quot;Different error appeared. Error code : &quot; + prevRemoteBatchStatus.toString() + &quot; Please restart batch manager service&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
	return;
}

//log.info (filename);
//log.info(&quot;File name is &quot;+ filename);

String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+filename.replace(&quot;:&quot;,&quot;$&quot;);
log.info (fileNameUp);

File file = new File(fileNameUp);

String str;
FileReader fr = new FileReader(file);
BufferedReader br= new BufferedReader(fr);

int startlinenumber=0;
int endlinenumber=0;
int linecounter=1;
while((str=br.readLine())!=null)
{
	
	if (str.contains(&quot;======================Start&quot;))
	{
		startlinenumber=linecounter;	
	}
	if (str.contains(&quot;==============End&quot;))
	{
		endlinenumber=linecounter;	
	}
	linecounter++;
}

String logFileText = &quot;&quot;;

String line;
for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
   {
  	 	FileReader fr1 = new FileReader(file);
    		BufferedReader br1 = new BufferedReader(fr1);
  	    for (int i = 1; i &lt; j; i++)
       {
           br1.readLine();
       }
  	    line = br1.readLine();
  	    logFileText = logFileText.concat(&quot;\n&quot;+line);
    }
   
log.info(&quot;-------------------------File data starts here----------------------------&quot;);
log.info(logFileText);
log.info(&quot;-------------------------File data ends here----------------------------&quot;);

/*---------------------------------- Starting checking the exported files----------------------------------*/
if (prevRemoteBatchStatus.equals(&quot;99&quot;)) //If error is there below will not be executed 
{
	return;
}
String[] lines = logFileText.split(System.getProperty(&quot;line.separator&quot;));

ArrayList sList = new ArrayList();

for(int i=0;i&lt;lines.length;i++)
{
	//System.out.println(lines[i]);
	if(lines[i].contains(&quot;Start write promotion export data to file&quot;))
	{
		//sList.add();
		String regPattern=&quot;export data to file (.*).;&quot;;
		
		Pattern r =Pattern.compile(regPattern);
		Matcher m= r.matcher(lines[i]);
		if (m.find( )) 
		{
	      sList.add(m.group(1));
		}
		else
		{
	         log.info(&quot;NO MATCH. No File exported&quot;);
	    }
		
	}
	if(lines[i].contains(&quot;is empty. Trying to delete.&quot;))
	{
		//sList.add();
		String regPattern=&quot;Description : File (.*) is empty.&quot;;
		
		Pattern r =Pattern.compile(regPattern);
		Matcher m= r.matcher(lines[i]);
		if (m.find( )) 
		{
	      sList.remove(m.group(1));
		}
		
	}
	
}


/*---------Start: Code to copy files from one place to another-----------*/
private static void copyFileUsingStream(File source, File dest) throws IOException {
  InputStream is = null;
  OutputStream os = null;
  try {
      is = new FileInputStream(source);
      os = new FileOutputStream(dest);
      byte[] buffer = new byte[1024];
      int length;
      while ((length = is.read(buffer)) &gt; 0) {
          os.write(buffer, 0, length);
      }
  } finally {
      is.close();
      os.close();
  }
}
/*---------End: Code to copy files from one place to another-----------*/

ArrayList copiedFiles = new ArrayList();


for (int i = 0; i &lt; sList.size(); i++) {
	 //System.out.println(sList.get(i));
	 
	 String serverFilePath = &quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+ ((String) sList.get(i)).replace(&quot;:&quot;,&quot;&quot;);

	 File file= new File(serverFilePath);
	 if(file.exists())
	 {
	 log.info(&quot;File &quot; + (String) sList.get(i) + &quot; exists&quot;);
	 
	 copiedFiles.add(vars.get(&quot;ExportFileLocalPath&quot;)+&quot;/&quot;+file.getName());
	 File destfile= new File(vars.get(&quot;ExportFileLocalPath&quot;)+&quot;/&quot;+file.getName());
	 try {
			copyFileUsingStream(file,destfile);
			log.info(&quot;file is getting copied&quot;);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			
		}
	 }
	 else 
		log.info(&quot;File &quot; + (String) sList.get(i) + &quot; does not exist&quot; );
	}
//Add exported file names to a variable	
vars.putObject(&quot;CopiedFilesNames&quot;, copiedFiles);
/*---------------------------------- Ending checking the exported files----------------------------------*/</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.*;

import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.google.common.io.Files;


ArrayList copiedFileNames= vars.getObject(&quot;CopiedFilesNames&quot;); 

/*Start: Find attibute value in xml based on input xPath */
private static boolean CompareXMLValue(String xmlFilePath, String xPath, String expectedValue)
	{
		

		try {
			
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document doc = builder.parse(xmlFilePath);
			XPathFactory xPathfactory = XPathFactory.newInstance();
			XPath xpath = xPathfactory.newXPath();
			XPathExpression expr = xpath.compile(xPath);
			NodeList nl = (NodeList) expr.evaluate(doc, XPathConstants.NODESET);
			
			int flag=0;
			for (int i = 0; i &lt; nl.getLength(); i++)
			{
			    org.w3c.dom.Node currentItem = nl.item(i);
			    String key = currentItem.getNodeValue();
			    //System.out.println(key);
			    if (key.equals(expectedValue))
			    {
			    	flag=1;
			    	
			    	return true;
			    }
			    else {		    	
			    	flag=0;
			    }
			}
			if (flag==0)
			{
				return false;
			}
		} catch (IOException e) {
			log.error(e.getMessage());
		}
		 catch (XPathExpressionException e) {
			log.error(e.getMessage());
		}
		 catch (DOMException e) {
			log.error(e.getMessage());
		}
		 catch (ParserConfigurationException e) {
			log.error(e.getMessage());
		}
		 catch (SAXException e) {
			log.error(e.getMessage());
		}
		return false;
	}
/*End: Find attibute value in xml based on input xPath */


		boolean value=false;
		for(int i=0; i&lt;copiedFileNames.size();i++)
		{
			String xmlFilePath = (String) copiedFileNames.get(i);
			String xPath= &quot;//HQL_Promotion_Interface//Retailer//Promotions//Promotion//@PromotionInternalKey&quot;;
			String expectedValue= &quot;${PromotionHeaderID_1}&quot;;
			log.info (&quot;Expected promotion is &quot;+expectedValue);
			
			value= CompareXMLValue(xmlFilePath, xPath,expectedValue);
			
		}
		 
		
		if (value==true)
		{
			AssertionResult.setFailure(false);
			log.info(&quot;Promotion found in export XML&quot;);
		}
		else
			{
				AssertionResult.setFailure(true);
				log.error(&quot;The created promotion is not exported&quot;);
			}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group- Export Promotion Batch Run- Mode 4" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Promotions updated since last Mode 2 Export &amp; Active\Future Promotions that have at least one bucket entity that is non-item (Hierarchy, Supplier, Dynamic Attribute)</stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-XML" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">LmsSession ${session}</stringProp>
            </elementProp>
            <elementProp name="DebugLevel" elementType="Header">
              <stringProp name="Header.name">DebugLevel</stringProp>
              <stringProp name="Header.value">Info</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

log.info(&quot;PreProcessor OSbatch run started&quot;);
//Create remote batch file
String batName = &quot;PROMOTIONEXPORT&quot;;
String inputFileformat = &quot;&quot;;
String outputFilePath =&quot;C:\\Retalix\\LPBatchExportOp\\Out\\&quot;;
String workFilePath = &quot;C:\\Retalix\\LPBatchExportOp\\Wrk\\&quot;;
String logFile = &quot;C:\\Retalix\\LPBatchExportOp\\Log\\PromotionExport.log&quot;;
String errorFile = &quot;C:\\Retalix\\LPBatchExportOp\\Err\\PromotionExport.err&quot;;
String retailerID = vars.get(&quot;RetailerID&quot;);
String otherCriteria = &quot;/Mode=4&quot;;

//UPload to variable
vars.put(&quot;OutputPath&quot;,outputFilePath);
vars.put(&quot;LogFile&quot;,logFile);
vars.put(&quot;ErrorFile&quot;,errorFile);

StringBuilder batFileText = new StringBuilder(&quot;ReMABatchManager.exe&quot;);
batFileText.append(&quot; -A&quot;+ batName);
if (inputFileformat != &quot;&quot; &amp;&amp; inputFileformat != null )
{
	batFileText.append(&quot; -N*&quot;+ inputFileformat);
}
batFileText.append(&quot; -O&quot;+ outputFilePath);
batFileText.append(&quot; -W&quot;+ workFilePath);
batFileText.append(&quot; -L&quot;+ logFile);
batFileText.append(&quot; -E&quot;+ errorFile);
batFileText.append(&quot; -R&quot;+ retailerID);
batFileText.append(&quot; &quot;+ otherCriteria);

//String batFileText = &quot;ReMABatchManager.exe&quot;+&quot; &quot;+ &quot;-A&quot; + batName.toUpperCase()+&quot; &quot;+&quot;-O&quot;+outputFilePath+&quot; &quot;+&quot;-W&quot;+workFilePath+&quot; &quot; + &quot;-L&quot; + logFile + &quot; &quot; + &quot;-E&quot;+errorFile+ &quot; &quot; +&quot;-R&quot;+retailerID+ &quot; &quot;+ otherCriteria;

String serverIP = vars.get(&quot;serverIP&quot;);
String serverUserName = &quot;s_raa_appadmin&quot;;
String serverPassword = &quot;HAha123!&quot;;
String batchManagerPath = vars.get(&quot;batchManagerPath&quot;);

String remoteBatchFilePath=&quot;\\\\&quot;+serverIP+&quot;\\&quot;+batchManagerPath.replace(&quot;:&quot;,&quot;&quot;);
String remoteBatchFile = remoteBatchFilePath+&quot;\\TestBatch_Jmeter.bat&quot;;
File file = new File(remoteBatchFile);

FileWriter fw = new FileWriter(file.getAbsoluteFile(),false);
BufferedWriter bw = new BufferedWriter(fw);
bw.write(batFileText.toString());
bw.close();


//------Start: Create local batch file to run server batch file-------//
StringBuilder localbatText = new StringBuilder(&quot;@ECHO OFF&quot;);
localbatText.append(&quot;\nPsExec.exe&quot;);
localbatText.append(&quot; \\\\&quot;+ serverIP );
localbatText.append(&quot; -u HQL\\&quot;+serverUserName);
localbatText.append(&quot; -p &quot;+serverPassword);
localbatText.append(&quot; cmd /c &quot;);
localbatText.append(&quot;\&quot;cd /d &quot; + batchManagerPath +&quot; &amp;&amp; &quot;);
localbatText.append(&quot;TestBatch_Jmeter.bat&quot;+&quot;\&quot;&quot;);
localbatText.append(&quot;\nPAUSE&quot;);

String localbatFile= vars.get(&quot;PSToolPath&quot;) + &quot;\\LocalBatchFile.bat&quot;;
File localFile = new File(localbatFile);

FileWriter fwr = new FileWriter(localFile.getAbsoluteFile(),false);
BufferedWriter bwr = new BufferedWriter(fwr);
bwr.write(localbatText.toString());
bwr.close();
//------End: Create local batch file to run server batch file-------//

//send batchfile path to variable 
//String batchPath = &quot;C:\\Users\\pd185161\\OneDrive - NCR Corporation\\Desktop\\LP\\apache-jmeter-5.4.1\\PSTools\\PSTools\\LMSBatchInitiator.bat&quot;;
vars.put(&quot;LocalBatchFile&quot;,localbatFile);
log.info(&quot;PreProcessor OSbatch run ended&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Login" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;UserLogin xmlns=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
      &lt;in_UserName&gt;${RetailerUserID}&lt;/in_UserName&gt;&#xd;
      &lt;in_Password&gt;${RetailerPassword}&lt;/in_Password&gt;&#xd;
    &lt;/UserLogin&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Authorization/Login.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">${session}</stringProp>
            <stringProp name="XPathExtractor.refname">session</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_SessionKey</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable">sKey</stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= ${RetailerID})

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Create SI Promo" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
							&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;SIPromo${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;1&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,&#xd;
								&quot;Remarks&quot;: &quot;&quot;,&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;SIPromo${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;6&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;0&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;1&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
										&quot;Suspended&quot;: &quot;false&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;LimitItemCount&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;MSUQuantity&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}&#xd;
											]&#xd;
										},&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
											{&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						},&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromoDetails" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="-1168393829">PromotionHeaderId=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler- Export Promotion batch - Mode 4" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">CMD</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/C</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${LocalBatchFile}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${PSToolPath}</stringProp>
        </SystemSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
            <stringProp name="RegexExtractor.refname">PKStatus</stringProp>
            <stringProp name="RegexExtractor.regex">(?&lt;=error code\s).*?(?=\.)</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">${PKStatus}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor- Take RemoteBatchStatus" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">RemoteBatchStatus</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">error code </stringProp>
            <stringProp name="BoundaryExtractor.rboundary">.</stringProp>
            <stringProp name="BoundaryExtractor.default">99</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">0</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Verify Batch Status remotely" enabled="true">
            <stringProp name="BeanShellAssertion.query">String remoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);


if (remoteBatchStatus.equals(&quot;0&quot;))
{
	Failure = false;
}
else 
{
	Failure = true; 
	FailureMessage = &quot; Error in remote batchrun. Error Code: &quot; + remoteBatchStatus;

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor- Read Files" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;



String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;

//log.info (prevRemoteBatchStatus.toString());
if (prevRemoteBatchStatus.equals(&quot;0&quot;))
{
	filename = vars.get(&quot;LogFile&quot;);
	log.info (filename);
	log.info (&quot;-----------------------------------------------&quot;);
	log.info (&quot;No error in batch run. Reading out log file is in process.....&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
}
else if (prevRemoteBatchStatus.equals(&quot;99&quot;))
{
	filename = vars.get(&quot;ErrorFile&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
	log.info(&quot;There is error in batch run. Error code : &quot; + prevRemoteBatchStatus.toString());
	log.info(&quot;Starting to readout error log file&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
}

else
{
	log.info (&quot;-----------------------------------------------&quot;);
	log.info(&quot;Different error appeared. Error code : &quot; + prevRemoteBatchStatus.toString() + &quot; Please restart batch manager service&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
	return;
}

//log.info (filename);
//log.info(&quot;File name is &quot;+ filename);

String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+filename.replace(&quot;:&quot;,&quot;$&quot;);
log.info (fileNameUp);

File file = new File(fileNameUp);

String str;
FileReader fr = new FileReader(file);
BufferedReader br= new BufferedReader(fr);

int startlinenumber=0;
int endlinenumber=0;
int linecounter=1;
while((str=br.readLine())!=null)
{
	
	if (str.contains(&quot;======================Start&quot;))
	{
		startlinenumber=linecounter;	
	}
	if (str.contains(&quot;==============End&quot;))
	{
		endlinenumber=linecounter;	
	}
	linecounter++;
}

String logFileText = &quot;&quot;;

String line;
for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
   {
  	 	FileReader fr1 = new FileReader(file);
    		BufferedReader br1 = new BufferedReader(fr1);
  	    for (int i = 1; i &lt; j; i++)
       {
           br1.readLine();
       }
  	    line = br1.readLine();
  	    logFileText = logFileText.concat(&quot;\n&quot;+line);
    }
   
log.info(&quot;-------------------------File data starts here----------------------------&quot;);
log.info(logFileText);
log.info(&quot;-------------------------File data ends here----------------------------&quot;);

/*---------------------------------- Starting checking the exported files----------------------------------*/
if (prevRemoteBatchStatus.equals(&quot;99&quot;)) //If error is there below will not be executed 
{
	return;
}
String[] lines = logFileText.split(System.getProperty(&quot;line.separator&quot;));

ArrayList sList = new ArrayList();

for(int i=0;i&lt;lines.length;i++)
{
	//System.out.println(lines[i]);
	if(lines[i].contains(&quot;Start write promotion export data to file&quot;))
	{
		//sList.add();
		String regPattern=&quot;export data to file (.*).;&quot;;
		
		Pattern r =Pattern.compile(regPattern);
		Matcher m= r.matcher(lines[i]);
		if (m.find( )) 
		{
	      sList.add(m.group(1));
		}
		else
		{
	         log.info(&quot;NO MATCH. No File exported&quot;);
	    }
		
	}
	if(lines[i].contains(&quot;is empty. Trying to delete.&quot;))
	{
		//sList.add();
		String regPattern=&quot;Description : File (.*) is empty.&quot;;
		
		Pattern r =Pattern.compile(regPattern);
		Matcher m= r.matcher(lines[i]);
		if (m.find( )) 
		{
	      sList.remove(m.group(1));
		}
		
	}
	
}


/*---------Start: Code to copy files from one place to another-----------*/
private static void copyFileUsingStream(File source, File dest) throws IOException {
  InputStream is = null;
  OutputStream os = null;
  try {
      is = new FileInputStream(source);
      os = new FileOutputStream(dest);
      byte[] buffer = new byte[1024];
      int length;
      while ((length = is.read(buffer)) &gt; 0) {
          os.write(buffer, 0, length);
      }
  } finally {
      is.close();
      os.close();
  }
}
/*---------End: Code to copy files from one place to another-----------*/

ArrayList copiedFiles = new ArrayList();


for (int i = 0; i &lt; sList.size(); i++) {
	 //System.out.println(sList.get(i));
	 
	 String serverFilePath = &quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+ ((String) sList.get(i)).replace(&quot;:&quot;,&quot;&quot;);

	 File file= new File(serverFilePath);
	 if(file.exists())
	 {
	 log.info(&quot;File &quot; + (String) sList.get(i) + &quot; exists&quot;);
	 
	 copiedFiles.add(vars.get(&quot;ExportFileLocalPath&quot;)+&quot;/&quot;+file.getName());
	 File destfile= new File(vars.get(&quot;ExportFileLocalPath&quot;)+&quot;/&quot;+file.getName());
	 try {
			copyFileUsingStream(file,destfile);
			log.info(&quot;file is getting copied&quot;);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			
		}
	 }
	 else 
		log.info(&quot;File &quot; + (String) sList.get(i) + &quot; does not exist&quot; );
	}
//Add exported file names to a variable	
vars.putObject(&quot;CopiedFilesNames&quot;, copiedFiles);
/*---------------------------------- Ending checking the exported files----------------------------------*/</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.*;

import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.google.common.io.Files;


ArrayList copiedFileNames= vars.getObject(&quot;CopiedFilesNames&quot;); 

/*Start: Find attibute value in xml based on input xPath */
private static boolean CompareXMLValue(String xmlFilePath, String xPath, String expectedValue)
	{
		

		try {
			
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document doc = builder.parse(xmlFilePath);
			XPathFactory xPathfactory = XPathFactory.newInstance();
			XPath xpath = xPathfactory.newXPath();
			XPathExpression expr = xpath.compile(xPath);
			NodeList nl = (NodeList) expr.evaluate(doc, XPathConstants.NODESET);
			
			int flag=0;
			for (int i = 0; i &lt; nl.getLength(); i++)
			{
			    org.w3c.dom.Node currentItem = nl.item(i);
			    String key = currentItem.getNodeValue();
			    //System.out.println(key);
			    if (key.equals(expectedValue))
			    {
			    	flag=1;
			    	
			    	return true;
			    }
			    else {		    	
			    	flag=0;
			    }
			}
			if (flag==0)
			{
				return false;
			}
		} catch (IOException e) {
			log.error(e.getMessage());
		}
		 catch (XPathExpressionException e) {
			log.error(e.getMessage());
		}
		 catch (DOMException e) {
			log.error(e.getMessage());
		}
		 catch (ParserConfigurationException e) {
			log.error(e.getMessage());
		}
		 catch (SAXException e) {
			log.error(e.getMessage());
		}
		return false;
	}
/*End: Find attibute value in xml based on input xPath */


		boolean value=false;
		for(int i=0; i&lt;copiedFileNames.size();i++)
		{
			String xmlFilePath = (String) copiedFileNames.get(i);
			String xPath= &quot;//HQL_Promotion_Interface//Retailer//Promotions//Promotion//@PromotionInternalKey&quot;;
			String expectedValue= &quot;${PromotionHeaderID_1}&quot;;
			log.info (&quot;Expected promotion is &quot;+expectedValue);
			
			value= CompareXMLValue(xmlFilePath, xPath,expectedValue);
			
		}
		 
		
		if (value==true)
		{
			AssertionResult.setFailure(false);
			log.info(&quot;Promotion found in export XML&quot;);
		}
		else
			{
				AssertionResult.setFailure(true);
				log.error(&quot;The created promotion is not exported&quot;);
			}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group- Export Promotion Batch Run- Mode 5" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Promotions Filtered by PkgId parameter, usually triggered by Download for R10 sync</stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-XML" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">LmsSession ${session}</stringProp>
            </elementProp>
            <elementProp name="DebugLevel" elementType="Header">
              <stringProp name="Header.name">DebugLevel</stringProp>
              <stringProp name="Header.value">Info</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="ExportMode" elementType="Argument">
              <stringProp name="Argument.name">ExportMode</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Promotions for latest download PkgId" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_DownloadDB</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

Declare @pkgid int
Set @pkgid= (select top 1 E.pkgId from downloadevents E join DownloadPackages P 
on E.PkgId = P.PkgId where E.matrixmemberid=@matrixmemberid and E.EventStatusid=40 and EntityTypeId=8 order by P.startDate desc)

select distinct @pkgid as pkgid , EntityInternalKey as PromoID_DB from downloadevents where pkgid = @pkgid and Matrixmemberid=@matrixmemberid and entitytypeid=8 order by PromoID_DB</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">pkgid,PromoID_DB</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">Only active and future promotions having desired Store( will include store 0 also)</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

log.info(&quot;PreProcessor OSbatch run started&quot;);
//Create remote batch file
String batName = &quot;PROMOTIONEXPORT&quot;;
String inputFileformat = &quot;&quot;;
String outputFilePath =&quot;C:\\Retalix\\LPBatchExportOp\\Out\\&quot;;
String workFilePath = &quot;C:\\Retalix\\LPBatchExportOp\\Wrk\\&quot;;
String logFile = &quot;C:\\Retalix\\LPBatchExportOp\\Log\\PromotionExport.log&quot;;
String errorFile = &quot;C:\\Retalix\\LPBatchExportOp\\Err\\PromotionExport.err&quot;;
String retailerID = vars.get(&quot;RetailerID&quot;);
String exportMode = &quot;/Mode=&quot; + vars.get(&quot;ExportMode&quot;);
String otherCriteria = &quot;/PkgId=&quot; + vars.get(&quot;pkgid_1&quot;);

//UPload to variable
vars.put(&quot;OutputPath&quot;,outputFilePath);
vars.put(&quot;LogFile&quot;,logFile);
vars.put(&quot;ErrorFile&quot;,errorFile);

StringBuilder batFileText = new StringBuilder(&quot;ReMABatchManager.exe&quot;);
batFileText.append(&quot; -A&quot;+ batName);
if (inputFileformat != &quot;&quot; &amp;&amp; inputFileformat != null )
{
	batFileText.append(&quot; -N*&quot;+ inputFileformat);
}
batFileText.append(&quot; -O&quot;+ outputFilePath);
batFileText.append(&quot; -W&quot;+ workFilePath);
batFileText.append(&quot; -L&quot;+ logFile);
batFileText.append(&quot; -E&quot;+ errorFile);
batFileText.append(&quot; -R&quot;+ retailerID);
batFileText.append(&quot; &quot;+ exportMode);
batFileText.append(&quot; &quot;+ otherCriteria);

//String batFileText = &quot;ReMABatchManager.exe&quot;+&quot; &quot;+ &quot;-A&quot; + batName.toUpperCase()+&quot; &quot;+&quot;-O&quot;+outputFilePath+&quot; &quot;+&quot;-W&quot;+workFilePath+&quot; &quot; + &quot;-L&quot; + logFile + &quot; &quot; + &quot;-E&quot;+errorFile+ &quot; &quot; +&quot;-R&quot;+retailerID+ &quot; &quot;+ otherCriteria;

String serverIP = vars.get(&quot;serverIP&quot;);
String serverUserName = &quot;s_raa_appadmin&quot;;
String serverPassword = &quot;HAha123!&quot;;
String batchManagerPath = vars.get(&quot;batchManagerPath&quot;);

String remoteBatchFilePath=&quot;\\\\&quot;+serverIP+&quot;\\&quot;+batchManagerPath.replace(&quot;:&quot;,&quot;&quot;);
String remoteBatchFile = remoteBatchFilePath+&quot;\\TestBatch_Jmeter.bat&quot;;
File file = new File(remoteBatchFile);

FileWriter fw = new FileWriter(file.getAbsoluteFile(),false);
BufferedWriter bw = new BufferedWriter(fw);
bw.write(batFileText.toString());
bw.close();


//------Start: Create local batch file to run server batch file-------//
StringBuilder localbatText = new StringBuilder(&quot;@ECHO OFF&quot;);
localbatText.append(&quot;\nPsExec.exe&quot;);
localbatText.append(&quot; \\\\&quot;+ serverIP );
localbatText.append(&quot; -u HQL\\&quot;+serverUserName);
localbatText.append(&quot; -p &quot;+serverPassword);
localbatText.append(&quot; cmd /c &quot;);
localbatText.append(&quot;\&quot;cd /d &quot; + batchManagerPath +&quot; &amp;&amp; &quot;);
localbatText.append(&quot;TestBatch_Jmeter.bat&quot;+&quot;\&quot;&quot;);
localbatText.append(&quot;\nPAUSE&quot;);

String localbatFile= vars.get(&quot;PSToolPath&quot;) + &quot;\\LocalBatchFile.bat&quot;;
File localFile = new File(localbatFile);

FileWriter fwr = new FileWriter(localFile.getAbsoluteFile(),false);
BufferedWriter bwr = new BufferedWriter(fwr);
bwr.write(localbatText.toString());
bwr.close();
//------End: Create local batch file to run server batch file-------//

//send batchfile path to variable 
//String batchPath = &quot;C:\\Users\\pd185161\\OneDrive - NCR Corporation\\Desktop\\LP\\apache-jmeter-5.4.1\\PSTools\\PSTools\\LMSBatchInitiator.bat&quot;;
vars.put(&quot;LocalBatchFile&quot;,localbatFile);
log.info(&quot;PreProcessor OSbatch run ended&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler- Export Promotion batch - Mode 5" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">CMD</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/C</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${LocalBatchFile}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${PSToolPath}</stringProp>
        </SystemSampler>
        <hashTree>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor- Take RemoteBatchStatus" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">RemoteBatchStatus</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">error code </stringProp>
            <stringProp name="BoundaryExtractor.rboundary">.</stringProp>
            <stringProp name="BoundaryExtractor.default">99</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">0</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Verify Batch Status remotely" enabled="true">
            <stringProp name="BeanShellAssertion.query">String remoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);


if (remoteBatchStatus.equals(&quot;0&quot;))
{
	Failure = false;
}
else 
{
	Failure = true; 
	FailureMessage = &quot; Error in remote batchrun. Error Code: &quot; + remoteBatchStatus;

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor- Read Files" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;



String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;

//log.info (prevRemoteBatchStatus.toString());
if (prevRemoteBatchStatus.equals(&quot;0&quot;))
{
	filename = vars.get(&quot;LogFile&quot;);
	log.info (filename);
	log.info (&quot;-----------------------------------------------&quot;);
	log.info (&quot;No error in batch run. Reading out log file is in process.....&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
}
else if (prevRemoteBatchStatus.equals(&quot;99&quot;))
{
	filename = vars.get(&quot;ErrorFile&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
	log.info(&quot;There is error in batch run. Error code : &quot; + prevRemoteBatchStatus.toString());
	log.info(&quot;Starting to readout error log file&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
}

else
{
	log.info (&quot;-----------------------------------------------&quot;);
	log.info(&quot;Different error appeared. Error code : &quot; + prevRemoteBatchStatus.toString() + &quot; Please restart batch manager service&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
	return;
}

//log.info (filename);
//log.info(&quot;File name is &quot;+ filename);

String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+filename.replace(&quot;:&quot;,&quot;$&quot;);
log.info (fileNameUp);

File file = new File(fileNameUp);

String str;
FileReader fr = new FileReader(file);
BufferedReader br= new BufferedReader(fr);

int startlinenumber=0;
int endlinenumber=0;
int linecounter=1;
while((str=br.readLine())!=null)
{
	
	if (str.contains(&quot;======================Start&quot;))
	{
		startlinenumber=linecounter;	
	}
	if (str.contains(&quot;==============End&quot;))
	{
		endlinenumber=linecounter;	
	}
	linecounter++;
}

String logFileText = &quot;&quot;;

String line;
for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
   {
  	 	FileReader fr1 = new FileReader(file);
    		BufferedReader br1 = new BufferedReader(fr1);
  	    for (int i = 1; i &lt; j; i++)
       {
           br1.readLine();
       }
  	    line = br1.readLine();
  	    logFileText = logFileText.concat(&quot;\n&quot;+line);
    }
   
log.info(&quot;-------------------------File data starts here----------------------------&quot;);
log.info(logFileText);
log.info(&quot;-------------------------File data ends here----------------------------&quot;);

/*---------------------------------- Starting checking the exported files----------------------------------*/
if (prevRemoteBatchStatus.equals(&quot;99&quot;)) //If error is there below will not be executed 
{
	return;
}
String[] lines = logFileText.split(System.getProperty(&quot;line.separator&quot;));

ArrayList sList = new ArrayList();

for(int i=0;i&lt;lines.length;i++)
{
	//System.out.println(lines[i]);
	if(lines[i].contains(&quot;Start write promotion export data to file&quot;))
	{
		//sList.add();
		String regPattern=&quot;export data to file (.*).;&quot;;
		
		Pattern r =Pattern.compile(regPattern);
		Matcher m= r.matcher(lines[i]);
		if (m.find( )) 
		{
	      sList.add(m.group(1));
		}
		else
		{
	         log.info(&quot;NO MATCH. No File exported&quot;);
	    }
		
	}
	if(lines[i].contains(&quot;is empty. Trying to delete.&quot;))
	{
		//sList.add();
		String regPattern=&quot;Description : File (.*) is empty.&quot;;
		
		Pattern r =Pattern.compile(regPattern);
		Matcher m= r.matcher(lines[i]);
		if (m.find( )) 
		{
	      sList.remove(m.group(1));
		}
		
	}
	
}


/*---------Start: Code to copy files from one place to another-----------*/
private static void copyFileUsingStream(File source, File dest) throws IOException {
  InputStream is = null;
  OutputStream os = null;
  try {
      is = new FileInputStream(source);
      os = new FileOutputStream(dest);
      byte[] buffer = new byte[1024];
      int length;
      while ((length = is.read(buffer)) &gt; 0) {
          os.write(buffer, 0, length);
      }
  } finally {
      is.close();
      os.close();
  }
}
/*---------End: Code to copy files from one place to another-----------*/

ArrayList copiedFiles = new ArrayList();


for (int i = 0; i &lt; sList.size(); i++) {
	 //System.out.println(sList.get(i));
	 
	 String serverFilePath = &quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+ ((String) sList.get(i)).replace(&quot;:&quot;,&quot;&quot;);

	 File file= new File(serverFilePath);
	 if(file.exists())
	 {
	 log.info(&quot;File &quot; + (String) sList.get(i) + &quot; exists&quot;);
	 
	 copiedFiles.add(vars.get(&quot;ExportFileLocalPath&quot;)+&quot;/&quot;+file.getName());
	 File destfile= new File(vars.get(&quot;ExportFileLocalPath&quot;)+&quot;/&quot;+file.getName());
	 try {
			copyFileUsingStream(file,destfile);
			log.info(&quot;file is getting copied&quot;);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			
		}
	 }
	 else 
		log.info(&quot;File &quot; + (String) sList.get(i) + &quot; does not exist&quot; );
	}
//Add exported file names to a variable	
vars.putObject(&quot;CopiedFilesNames&quot;, copiedFiles);
/*---------------------------------- Ending checking the exported files----------------------------------*/</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion - Verify promotion count in export files" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.*;

import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.google.common.io.Files;

/*Start: Do not run this code if OS process sampler status is not 0*/
String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
if (!prevRemoteBatchStatus.equals(&quot;0&quot;))
{
	log.info(&quot;Stopping JSR223 assertion execution as batch run is not successful&quot;);
	return;
}
/*End: Do not run this code if OS process sampler status is not 0*/

ArrayList copiedFileNames= vars.getObject(&quot;CopiedFilesNames&quot;); 


/*Start: Find attibute values in xml based on input xPath */
private static ArrayList GetListOfxPathValuesfromXML(String xmlFilePath, String xPath)
	{
		ArrayList xpathValues = new ArrayList();

		try {
			
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document doc = builder.parse(xmlFilePath);
			XPathFactory xPathfactory = XPathFactory.newInstance();
			XPath xpath = xPathfactory.newXPath();
			XPathExpression expr = xpath.compile(xPath);
			NodeList nl = (NodeList) expr.evaluate(doc, XPathConstants.NODESET);
			
			for (int i = 0; i &lt; nl.getLength(); i++)
			{
			    org.w3c.dom.Node currentItem = nl.item(i);
			    String key = currentItem.getNodeValue();
			    xpathValues.add(key);
			}
			
			
		}  catch (IOException e) {
			System.out.println(e.getMessage());
		}
		 catch (XPathExpressionException e) {
			 System.out.println(e.getMessage());
		}
		 catch (DOMException e) {
			 System.out.println(e.getMessage());
		}
		 catch (ParserConfigurationException e) {
			System.out.println(e.getMessage());
		}
		 catch (SAXException e) {
			 System.out.println(e.getMessage());
		}
			
		
		return xpathValues;
	}
/*End: Find attibute values in xml based on input xPath */



ArrayList arr1 = new ArrayList();
for(int i=0; i&lt;copiedFileNames.size();i++)
{
	String xPath = &quot;//HQL_Promotion_Interface//Retailer//Promotions//Promotion//@PromotionInternalKey&quot;;
   	ArrayList arrlist = new ArrayList();
   	arrlist = GetListOfxPathValuesfromXML((String) copiedFileNames.get(i),&quot;//HQL_Promotion_Interface//Retailer//Promotions//Promotion//@PromotionInternalKey&quot;);
   	Collections.sort(arrlist);
   	arr1.addAll(arrlist);
}
   
   //System.out.println(arr1);
Object[] st = arr1.toArray();
for (Object s : st) 
{
	if (arr1.indexOf(s) != arr1.lastIndexOf(s)) 
	{
		arr1.remove(arr1.lastIndexOf(s));
	}
}
 Collections.sort(arr1);
 //System.out.println(arr1);
 
Integer[] ExportFilesPromotions= new Integer [arr1.size()];

 for(int i= 0 ; i&lt;ExportFilesPromotions.length;i++)
 {
	ExportFilesPromotions[i]=Integer.parseInt((String) arr1.get(i));
 }
	Arrays.sort(ExportFilesPromotions);
   
if(Integer.toString(ExportFilesPromotions.length).equals(&quot;${PromoID_DB_#}&quot;))
{
	log.info(&quot;Count of Promotions in both export xml and DB is matched&quot;);
	for (int i = 0; i&lt; ExportFilesPromotions.length; i++)
	{
		//log.info (ExportFilesPromotions[i].toString() + &quot; &quot; + vars.get(&quot;PromoID_DB_&quot;+(i+1)) );

		if (!ExportFilesPromotions[i].toString().equals(vars.get(&quot;PromoID_DB_&quot;+(i+1))))
		{
			AssertionResult.setFailureMessage(&quot;Promotion in DB is not matching with promotion in export file&quot;);
   			AssertionResult.setFailure(true);
		}
	}
}
else 
	log.error(&quot;Promotion count not matching in export files against DB&quot;);</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group- Export Promotion Batch Run- Mode 7" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Active\Future promotions filtered by store</stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-XML" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">LmsSession ${session}</stringProp>
            </elementProp>
            <elementProp name="DebugLevel" elementType="Header">
              <stringProp name="Header.name">DebugLevel</stringProp>
              <stringProp name="Header.value">Info</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="StoreId" elementType="Argument">
              <stringProp name="Argument.name">StoreId</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ExportMode" elementType="Argument">
              <stringProp name="Argument.name">ExportMode</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

log.info(&quot;PreProcessor OSbatch run started&quot;);
//Create remote batch file
String batName = &quot;PROMOTIONEXPORT&quot;;
String inputFileformat = &quot;&quot;;
String outputFilePath =&quot;C:\\Retalix\\LPBatchExportOp\\Out\\&quot;;
String workFilePath = &quot;C:\\Retalix\\LPBatchExportOp\\Wrk\\&quot;;
String logFile = &quot;C:\\Retalix\\LPBatchExportOp\\Log\\PromotionExport.log&quot;;
String errorFile = &quot;C:\\Retalix\\LPBatchExportOp\\Err\\PromotionExport.err&quot;;
String retailerID = vars.get(&quot;RetailerID&quot;);
String exportMode = &quot;/Mode=&quot; + vars.get(&quot;ExportMode&quot;);
String otherCriteria = &quot;-H&quot; + vars.get(&quot;StoreId&quot;);

//UPload to variable
vars.put(&quot;OutputPath&quot;,outputFilePath);
vars.put(&quot;LogFile&quot;,logFile);
vars.put(&quot;ErrorFile&quot;,errorFile);

StringBuilder batFileText = new StringBuilder(&quot;ReMABatchManager.exe&quot;);
batFileText.append(&quot; -A&quot;+ batName);
if (inputFileformat != &quot;&quot; &amp;&amp; inputFileformat != null )
{
	batFileText.append(&quot; -N*&quot;+ inputFileformat);
}
batFileText.append(&quot; -O&quot;+ outputFilePath);
batFileText.append(&quot; -W&quot;+ workFilePath);
batFileText.append(&quot; -L&quot;+ logFile);
batFileText.append(&quot; -E&quot;+ errorFile);
batFileText.append(&quot; -R&quot;+ retailerID);
batFileText.append(&quot; &quot;+ exportMode);
batFileText.append(&quot; &quot;+ otherCriteria);

//String batFileText = &quot;ReMABatchManager.exe&quot;+&quot; &quot;+ &quot;-A&quot; + batName.toUpperCase()+&quot; &quot;+&quot;-O&quot;+outputFilePath+&quot; &quot;+&quot;-W&quot;+workFilePath+&quot; &quot; + &quot;-L&quot; + logFile + &quot; &quot; + &quot;-E&quot;+errorFile+ &quot; &quot; +&quot;-R&quot;+retailerID+ &quot; &quot;+ otherCriteria;

String serverIP = vars.get(&quot;serverIP&quot;);
String serverUserName = &quot;s_raa_appadmin&quot;;
String serverPassword = &quot;HAha123!&quot;;
String batchManagerPath = vars.get(&quot;batchManagerPath&quot;);

String remoteBatchFilePath=&quot;\\\\&quot;+serverIP+&quot;\\&quot;+batchManagerPath.replace(&quot;:&quot;,&quot;&quot;);
String remoteBatchFile = remoteBatchFilePath+&quot;\\TestBatch_Jmeter.bat&quot;;
File file = new File(remoteBatchFile);

FileWriter fw = new FileWriter(file.getAbsoluteFile(),false);
BufferedWriter bw = new BufferedWriter(fw);
bw.write(batFileText.toString());
bw.close();


//------Start: Create local batch file to run server batch file-------//
StringBuilder localbatText = new StringBuilder(&quot;@ECHO OFF&quot;);
localbatText.append(&quot;\nPsExec.exe&quot;);
localbatText.append(&quot; \\\\&quot;+ serverIP );
localbatText.append(&quot; -u HQL\\&quot;+serverUserName);
localbatText.append(&quot; -p &quot;+serverPassword);
localbatText.append(&quot; cmd /c &quot;);
localbatText.append(&quot;\&quot;cd /d &quot; + batchManagerPath +&quot; &amp;&amp; &quot;);
localbatText.append(&quot;TestBatch_Jmeter.bat&quot;+&quot;\&quot;&quot;);
localbatText.append(&quot;\nPAUSE&quot;);

String localbatFile= vars.get(&quot;PSToolPath&quot;) + &quot;\\LocalBatchFile.bat&quot;;
File localFile = new File(localbatFile);

FileWriter fwr = new FileWriter(localFile.getAbsoluteFile(),false);
BufferedWriter bwr = new BufferedWriter(fwr);
bwr.write(localbatText.toString());
bwr.close();
//------End: Create local batch file to run server batch file-------//

//send batchfile path to variable 
//String batchPath = &quot;C:\\Users\\pd185161\\OneDrive - NCR Corporation\\Desktop\\LP\\apache-jmeter-5.4.1\\PSTools\\PSTools\\LMSBatchInitiator.bat&quot;;
vars.put(&quot;LocalBatchFile&quot;,localbatFile);
log.info(&quot;PreProcessor OSbatch run ended&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get total Promotions count" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)


declare  @currDate  Date 
set @currDate = CAST( GETDATE() AS Date )

declare @storeInternalKey int
set @storeInternalKey = (select StoreInternalKey from StoreCode_MP where Matrixmemberid= @matrixmemberid and StoreID= &apos;${StoreId}&apos;)

SELECT distinct(A.promotionheaderid) as DBPromotionID  FROM (
(select * from PromotionHeader where Matrixmemberid=@matrixmemberid and PromotionHeaderStartDate &gt; @currDate 
UNION
select * from PromotionHeader where Matrixmemberid= @matrixmemberid and PromotionHeaderEndDate &gt;@currDate)
except
(select * from PromotionHeader where Matrixmemberid=@matrixmemberid and CancelDate is not null)) AS A
JOIN
PromotionDistribution AS B
ON A. promotionheaderid=B.promotionheaderid AND A.MatrixMemberId=B.MatrixMemberId and B.EndDate&gt; @currDate

AND B.DistributedStoreInternalKey in (&apos;0&apos;, @storeInternalKey) order by A.promotionheaderid asc</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">DBPromotionID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">Only active and future promotions having desired Store( will include store 0 also)</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler- Export Promotion batch - Mode 7" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">CMD</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/C</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${LocalBatchFile}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${PSToolPath}</stringProp>
        </SystemSampler>
        <hashTree>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor- Take RemoteBatchStatus" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">RemoteBatchStatus</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">error code </stringProp>
            <stringProp name="BoundaryExtractor.rboundary">.</stringProp>
            <stringProp name="BoundaryExtractor.default">99</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">0</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Verify Batch Status remotely" enabled="true">
            <stringProp name="BeanShellAssertion.query">String remoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);


if (remoteBatchStatus.equals(&quot;0&quot;))
{
	Failure = false;
}
else 
{
	Failure = true; 
	FailureMessage = &quot; Error in remote batchrun. Error Code: &quot; + remoteBatchStatus;

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor- Read Files" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;



String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;

//log.info (prevRemoteBatchStatus.toString());
if (prevRemoteBatchStatus.equals(&quot;0&quot;))
{
	filename = vars.get(&quot;LogFile&quot;);
	log.info (filename);
	log.info (&quot;-----------------------------------------------&quot;);
	log.info (&quot;No error in batch run. Reading out log file is in process.....&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
}
else if (prevRemoteBatchStatus.equals(&quot;99&quot;))
{
	filename = vars.get(&quot;ErrorFile&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
	log.info(&quot;There is error in batch run. Error code : &quot; + prevRemoteBatchStatus.toString());
	log.info(&quot;Starting to readout error log file&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
}

else
{
	log.info (&quot;-----------------------------------------------&quot;);
	log.info(&quot;Different error appeared. Error code : &quot; + prevRemoteBatchStatus.toString() + &quot; Please restart batch manager service&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
	return;
}

//log.info (filename);
//log.info(&quot;File name is &quot;+ filename);

String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+filename.replace(&quot;:&quot;,&quot;$&quot;);
log.info (fileNameUp);

File file = new File(fileNameUp);

String str;
FileReader fr = new FileReader(file);
BufferedReader br= new BufferedReader(fr);

int startlinenumber=0;
int endlinenumber=0;
int linecounter=1;
while((str=br.readLine())!=null)
{
	
	if (str.contains(&quot;======================Start&quot;))
	{
		startlinenumber=linecounter;	
	}
	if (str.contains(&quot;==============End&quot;))
	{
		endlinenumber=linecounter;	
	}
	linecounter++;
}

String logFileText = &quot;&quot;;

String line;
for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
   {
  	 	FileReader fr1 = new FileReader(file);
    		BufferedReader br1 = new BufferedReader(fr1);
  	    for (int i = 1; i &lt; j; i++)
       {
           br1.readLine();
       }
  	    line = br1.readLine();
  	    logFileText = logFileText.concat(&quot;\n&quot;+line);
    }
   
log.info(&quot;-------------------------File data starts here----------------------------&quot;);
log.info(logFileText);
log.info(&quot;-------------------------File data ends here----------------------------&quot;);

/*---------------------------------- Starting checking the exported files----------------------------------*/
if (prevRemoteBatchStatus.equals(&quot;99&quot;)) //If error is there below will not be executed 
{
	return;
}
String[] lines = logFileText.split(System.getProperty(&quot;line.separator&quot;));

ArrayList sList = new ArrayList();

for(int i=0;i&lt;lines.length;i++)
{
	//System.out.println(lines[i]);
	if(lines[i].contains(&quot;Start write promotion export data to file&quot;))
	{
		//sList.add();
		String regPattern=&quot;export data to file (.*).;&quot;;
		
		Pattern r =Pattern.compile(regPattern);
		Matcher m= r.matcher(lines[i]);
		if (m.find( )) 
		{
	      sList.add(m.group(1));
		}
		else
		{
	         log.info(&quot;NO MATCH. No File exported&quot;);
	    }
		
	}
	if(lines[i].contains(&quot;is empty. Trying to delete.&quot;))
	{
		//sList.add();
		String regPattern=&quot;Description : File (.*) is empty.&quot;;
		
		Pattern r =Pattern.compile(regPattern);
		Matcher m= r.matcher(lines[i]);
		if (m.find( )) 
		{
	      sList.remove(m.group(1));
		}
		
	}
	
}


/*---------Start: Code to copy files from one place to another-----------*/
private static void copyFileUsingStream(File source, File dest) throws IOException {
  InputStream is = null;
  OutputStream os = null;
  try {
      is = new FileInputStream(source);
      os = new FileOutputStream(dest);
      byte[] buffer = new byte[1024];
      int length;
      while ((length = is.read(buffer)) &gt; 0) {
          os.write(buffer, 0, length);
      }
  } finally {
      is.close();
      os.close();
  }
}
/*---------End: Code to copy files from one place to another-----------*/

ArrayList copiedFiles = new ArrayList();


for (int i = 0; i &lt; sList.size(); i++) {
	 //System.out.println(sList.get(i));
	 
	 String serverFilePath = &quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+ ((String) sList.get(i)).replace(&quot;:&quot;,&quot;&quot;);

	 File file= new File(serverFilePath);
	 if(file.exists())
	 {
	 log.info(&quot;File &quot; + (String) sList.get(i) + &quot; exists&quot;);
	 
	 copiedFiles.add(vars.get(&quot;ExportFileLocalPath&quot;)+&quot;/&quot;+file.getName());
	 File destfile= new File(vars.get(&quot;ExportFileLocalPath&quot;)+&quot;/&quot;+file.getName());
	 try {
			copyFileUsingStream(file,destfile);
			log.info(&quot;file is getting copied&quot;);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			
		}
	 }
	 else 
		log.info(&quot;File &quot; + (String) sList.get(i) + &quot; does not exist&quot; );
	}
//Add exported file names to a variable	
vars.putObject(&quot;CopiedFilesNames&quot;, copiedFiles);
/*---------------------------------- Ending checking the exported files----------------------------------*/</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion - Verify promotion count in export files" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.*;

import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.google.common.io.Files;


/*Start: Do not run this code if OS process sampler status is not 0*/
String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
if (!prevRemoteBatchStatus.equals(&quot;0&quot;))
{
	log.info(&quot;Stopping JSR223 assertion execution as batch run is not successful&quot;);
	return;
}
/*End: Do not run this code if OS process sampler status is not 0*/



ArrayList copiedFileNames= vars.getObject(&quot;CopiedFilesNames&quot;); 


/*Start: Find attibute values in xml based on input xPath */
private static ArrayList GetListOfxPathValuesfromXML(String xmlFilePath, String xPath)
	{
		ArrayList xpathValues = new ArrayList();

		try {
			
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document doc = builder.parse(xmlFilePath);
			XPathFactory xPathfactory = XPathFactory.newInstance();
			XPath xpath = xPathfactory.newXPath();
			XPathExpression expr = xpath.compile(xPath);
			NodeList nl = (NodeList) expr.evaluate(doc, XPathConstants.NODESET);
			
			for (int i = 0; i &lt; nl.getLength(); i++)
			{
			    org.w3c.dom.Node currentItem = nl.item(i);
			    String key = currentItem.getNodeValue();
			    xpathValues.add(key);
			}
			
			
		}  catch (IOException e) {
			System.out.println(e.getMessage());
		}
		 catch (XPathExpressionException e) {
			 System.out.println(e.getMessage());
		}
		 catch (DOMException e) {
			 System.out.println(e.getMessage());
		}
		 catch (ParserConfigurationException e) {
			System.out.println(e.getMessage());
		}
		 catch (SAXException e) {
			 System.out.println(e.getMessage());
		}
			
		
		return xpathValues;
	}
/*End: Find attibute values in xml based on input xPath */



ArrayList arr1 = new ArrayList();
for(int i=0; i&lt;copiedFileNames.size();i++)
{
	String xPath = &quot;//HQL_Promotion_Interface//Retailer//Promotions//Promotion//@PromotionInternalKey&quot;;
   	ArrayList arrlist = new ArrayList();
   	arrlist = GetListOfxPathValuesfromXML((String) copiedFileNames.get(i),&quot;//HQL_Promotion_Interface//Retailer//Promotions//Promotion//@PromotionInternalKey&quot;);
   	Collections.sort(arrlist);
   	arr1.addAll(arrlist);
}
   
   //System.out.println(arr1);
Object[] st = arr1.toArray();
for (Object s : st) 
{
	if (arr1.indexOf(s) != arr1.lastIndexOf(s)) 
	{
		arr1.remove(arr1.lastIndexOf(s));
	}
}
 Collections.sort(arr1);
 //System.out.println(arr1);
 
Integer[] ExportFilesPromotions= new Integer [arr1.size()];

 for(int i= 0 ; i&lt;ExportFilesPromotions.length;i++)
 {
	ExportFilesPromotions[i]=Integer.parseInt((String) arr1.get(i));
 }
	Arrays.sort(ExportFilesPromotions);


   
if(Integer.toString(ExportFilesPromotions.length).equals(&quot;${DBPromotionID_#}&quot;))
{
	int failure= 0;
	log.info(&quot;Count of Promotions in both export xml and DB is matched. Validating Promotion IDs...&quot;);
	for (int i = 0; i&lt; ExportFilesPromotions.length; i++)
	{
		//log.info (ExportFilesPromotions[i].toString() + &quot; &quot; + vars.get(&quot;DBPromotionID_&quot;+(i+1)) );
		
		if (!ExportFilesPromotions[i].toString().equals(vars.get(&quot;DBPromotionID_&quot;+(i+1))))
		{
			AssertionResult.setFailureMessage(&quot;Promotion in DB is not matching with promotion in export file. Promotion in export file is:&quot;+ExportFilesPromotions[i].toString()+&quot; Promotion in DB is &quot;+vars.get(&quot;DBPromotionID_&quot;+(i+1)));
  			AssertionResult.setFailure(true);
			failure= 1;
		}
	}
	if (failure==0)
		{
			log.info(&quot;Promotion ids matched in both export files and DB result&quot;);
		}
}
else
{
	log.error(&quot;Promotion count in export files: &quot; +Integer.toString(ExportFilesPromotions.length)+ &quot; not matching against DB promotion count. &quot;+vars.get(&quot;DBPromotionID_#&quot;));
	AssertionResult.setFailureMessage(&quot;Promotion count in export files: &quot; +Integer.toString(ExportFilesPromotions.length)+ &quot; not matching against DB promotion count. &quot;+vars.get(&quot;DBPromotionID_#&quot;));
   	AssertionResult.setFailure(true);
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group- Export Promotion Batch Run- Mode 8" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Returns Active\Future filtered by &quot;Member Registration Required&quot; flag</stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-XML" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">LmsSession ${session}</stringProp>
            </elementProp>
            <elementProp name="DebugLevel" elementType="Header">
              <stringProp name="Header.name">DebugLevel</stringProp>
              <stringProp name="Header.value">Info</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">SampleResult.setIgnore();   //This will ignore the sampler in result

log.info(&quot;PreProcessor OSbatch run started&quot;);
//Create remote batch file
String batName = &quot;PROMOTIONEXPORT&quot;;
String inputFileformat = &quot;&quot;;
String outputFilePath =&quot;C:\\Retalix\\LPBatchExportOp\\Out\\&quot;;
String workFilePath = &quot;C:\\Retalix\\LPBatchExportOp\\Wrk\\&quot;;
String logFile = &quot;C:\\Retalix\\LPBatchExportOp\\Log\\PromotionExport.log&quot;;
String errorFile = &quot;C:\\Retalix\\LPBatchExportOp\\Err\\PromotionExport.err&quot;;
String retailerID = vars.get(&quot;RetailerID&quot;);
String otherCriteria = &quot;/Mode=8&quot;;

//UPload to variable
vars.put(&quot;OutputPath&quot;,outputFilePath);
vars.put(&quot;LogFile&quot;,logFile);
vars.put(&quot;ErrorFile&quot;,errorFile);

StringBuilder batFileText = new StringBuilder(&quot;ReMABatchManager.exe&quot;);
batFileText.append(&quot; -A&quot;+ batName);
if (inputFileformat != &quot;&quot; &amp;&amp; inputFileformat != null )
{
	batFileText.append(&quot; -N*&quot;+ inputFileformat);
}
batFileText.append(&quot; -O&quot;+ outputFilePath);
batFileText.append(&quot; -W&quot;+ workFilePath);
batFileText.append(&quot; -L&quot;+ logFile);
batFileText.append(&quot; -E&quot;+ errorFile);
batFileText.append(&quot; -R&quot;+ retailerID);
batFileText.append(&quot; &quot;+ otherCriteria);

//String batFileText = &quot;ReMABatchManager.exe&quot;+&quot; &quot;+ &quot;-A&quot; + batName.toUpperCase()+&quot; &quot;+&quot;-O&quot;+outputFilePath+&quot; &quot;+&quot;-W&quot;+workFilePath+&quot; &quot; + &quot;-L&quot; + logFile + &quot; &quot; + &quot;-E&quot;+errorFile+ &quot; &quot; +&quot;-R&quot;+retailerID+ &quot; &quot;+ otherCriteria;

String serverIP = vars.get(&quot;serverIP&quot;);
String serverUserName = &quot;s_raa_appadmin&quot;;
String serverPassword = &quot;HAha123!&quot;;
String batchManagerPath = vars.get(&quot;batchManagerPath&quot;);

String remoteBatchFilePath=&quot;\\\\&quot;+serverIP+&quot;\\&quot;+batchManagerPath.replace(&quot;:&quot;,&quot;&quot;);
String remoteBatchFile = remoteBatchFilePath+&quot;\\TestBatch_Jmeter.bat&quot;;
File file = new File(remoteBatchFile);

FileWriter fw = new FileWriter(file.getAbsoluteFile(),false);
BufferedWriter bw = new BufferedWriter(fw);
bw.write(batFileText.toString());
bw.close();


//------Start: Create local batch file to run server batch file-------//
StringBuilder localbatText = new StringBuilder(&quot;@ECHO OFF&quot;);
localbatText.append(&quot;\nPsExec.exe&quot;);
localbatText.append(&quot; \\\\&quot;+ serverIP );
localbatText.append(&quot; -u HQL\\&quot;+serverUserName);
localbatText.append(&quot; -p &quot;+serverPassword);
localbatText.append(&quot; cmd /c &quot;);
localbatText.append(&quot;\&quot;cd /d &quot; + batchManagerPath +&quot; &amp;&amp; &quot;);
localbatText.append(&quot;TestBatch_Jmeter.bat&quot;+&quot;\&quot;&quot;);
localbatText.append(&quot;\nPAUSE&quot;);

String localbatFile= vars.get(&quot;PSToolPath&quot;) + &quot;\\LocalBatchFile.bat&quot;;
File localFile = new File(localbatFile);

FileWriter fwr = new FileWriter(localFile.getAbsoluteFile(),false);
BufferedWriter bwr = new BufferedWriter(fwr);
bwr.write(localbatText.toString());
bwr.close();
//------End: Create local batch file to run server batch file-------//

//send batchfile path to variable 
//String batchPath = &quot;C:\\Users\\pd185161\\OneDrive - NCR Corporation\\Desktop\\LP\\apache-jmeter-5.4.1\\PSTools\\PSTools\\LMSBatchInitiator.bat&quot;;
vars.put(&quot;LocalBatchFile&quot;,localbatFile);
log.info(&quot;PreProcessor OSbatch run ended&quot;);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get total Promotions count" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

declare  @currDate  Date 
set @currDate = CAST( GETDATE() AS Date )

SELECT  A.PromotionHeaderId
FROM (
(select * from PromotionHeader where Matrixmemberid=@matrixmemberid and PromotionHeaderStartDate &gt; @currDate 
UNION
select * from PromotionHeader where Matrixmemberid= @matrixmemberid and PromotionHeaderEndDate &gt;@currDate)
except
(select * from PromotionHeader where Matrixmemberid=@matrixmemberid and CancelDate is not null)) AS A
JOIN
 PromotionRegistration AS B
ON A.promotionheaderid=B.promotionheaderid AND A.MatrixMemberId=B.MatrixMemberId
AND A.MatrixMemberId=@matrixmemberid order by A.PromotionHeaderid asc</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">DBPromotionID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">Only active and future promotions having &quot;Member Registration Required&quot; flag</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler- Export Promotion batch - Mode 8" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">CMD</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/C</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${LocalBatchFile}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${PSToolPath}</stringProp>
        </SystemSampler>
        <hashTree>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor- Take RemoteBatchStatus" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">RemoteBatchStatus</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">error code </stringProp>
            <stringProp name="BoundaryExtractor.rboundary">.</stringProp>
            <stringProp name="BoundaryExtractor.default">99</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">0</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion - Verify Batch Status remotely" enabled="true">
            <stringProp name="BeanShellAssertion.query">String remoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);


if (remoteBatchStatus.equals(&quot;0&quot;))
{
	Failure = false;
}
else 
{
	Failure = true; 
	FailureMessage = &quot; Error in remote batchrun. Error Code: &quot; + remoteBatchStatus;
	
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor- Read Files" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;



String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
String filename= &quot;&quot;;

//log.info (prevRemoteBatchStatus.toString());
if (prevRemoteBatchStatus.equals(&quot;0&quot;))
{
	filename = vars.get(&quot;LogFile&quot;);
	log.info (filename);
	log.info (&quot;-----------------------------------------------&quot;);
	log.info (&quot;No error in batch run. Reading out log file is in process.....&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
}
else if (prevRemoteBatchStatus.equals(&quot;99&quot;))
{
	filename = vars.get(&quot;ErrorFile&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
	log.info(&quot;There is error in batch run. Error code : &quot; + prevRemoteBatchStatus.toString());
	log.info(&quot;Starting to readout error log file&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
}

else
{
	log.info (&quot;-----------------------------------------------&quot;);
	log.info(&quot;Different error appeared. Error code : &quot; + prevRemoteBatchStatus.toString() + &quot; Please restart batch manager service&quot;);
	log.info (&quot;-----------------------------------------------&quot;);
	return;
}

//log.info (filename);
//log.info(&quot;File name is &quot;+ filename);

String fileNameUp=&quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+filename.replace(&quot;:&quot;,&quot;$&quot;);
log.info (fileNameUp);

File file = new File(fileNameUp);

String str;
FileReader fr = new FileReader(file);
BufferedReader br= new BufferedReader(fr);

int startlinenumber=0;
int endlinenumber=0;
int linecounter=1;
while((str=br.readLine())!=null)
{
	
	if (str.contains(&quot;======================Start&quot;))
	{
		startlinenumber=linecounter;	
	}
	if (str.contains(&quot;==============End&quot;))
	{
		endlinenumber=linecounter;	
	}
	linecounter++;
}

String logFileText = &quot;&quot;;

String line;
for (int j=startlinenumber+1;j&lt;endlinenumber;j++)
   {
  	 	FileReader fr1 = new FileReader(file);
    		BufferedReader br1 = new BufferedReader(fr1);
  	    for (int i = 1; i &lt; j; i++)
       {
           br1.readLine();
       }
  	    line = br1.readLine();
  	    logFileText = logFileText.concat(&quot;\n&quot;+line);
    }
   
log.info(&quot;-------------------------File data starts here----------------------------&quot;);
log.info(logFileText);
log.info(&quot;-------------------------File data ends here----------------------------&quot;);

/*---------------------------------- Starting checking the exported files----------------------------------*/
if (prevRemoteBatchStatus.equals(&quot;99&quot;)) //If error is there below will not be executed 
{
	return;
}
String[] lines = logFileText.split(System.getProperty(&quot;line.separator&quot;));

ArrayList sList = new ArrayList();

for(int i=0;i&lt;lines.length;i++)
{
	//System.out.println(lines[i]);
	if(lines[i].contains(&quot;Start write promotion export data to file&quot;))
	{
		//sList.add();
		String regPattern=&quot;export data to file (.*).;&quot;;
		
		Pattern r =Pattern.compile(regPattern);
		Matcher m= r.matcher(lines[i]);
		if (m.find( )) 
		{
	      sList.add(m.group(1));
		}
		else
		{
	         log.info(&quot;NO MATCH. No File exported&quot;);
	    }
		
	}
	if(lines[i].contains(&quot;is empty. Trying to delete.&quot;))
	{
		//sList.add();
		String regPattern=&quot;Description : File (.*) is empty.&quot;;
		
		Pattern r =Pattern.compile(regPattern);
		Matcher m= r.matcher(lines[i]);
		if (m.find( )) 
		{
	      sList.remove(m.group(1));
		}
		
	}
	
}


/*---------Start: Code to copy files from one place to another-----------*/
private static void copyFileUsingStream(File source, File dest) throws IOException {
  InputStream is = null;
  OutputStream os = null;
  try {
      is = new FileInputStream(source);
      os = new FileOutputStream(dest);
      byte[] buffer = new byte[1024];
      int length;
      while ((length = is.read(buffer)) &gt; 0) {
          os.write(buffer, 0, length);
      }
  } finally {
      is.close();
      os.close();
  }
}
/*---------End: Code to copy files from one place to another-----------*/

ArrayList copiedFiles = new ArrayList();


for (int i = 0; i &lt; sList.size(); i++) {
	 //System.out.println(sList.get(i));
	 
	 String serverFilePath = &quot;\\\\&quot;+vars.get(&quot;serverIP&quot;)+&quot;\\&quot;+ ((String) sList.get(i)).replace(&quot;:&quot;,&quot;&quot;);

	 File file= new File(serverFilePath);
	 if(file.exists())
	 {
	 log.info(&quot;File &quot; + (String) sList.get(i) + &quot; exists&quot;);
	 
	 copiedFiles.add(vars.get(&quot;ExportFileLocalPath&quot;)+&quot;/&quot;+file.getName());
	 File destfile= new File(vars.get(&quot;ExportFileLocalPath&quot;)+&quot;/&quot;+file.getName());
	 try {
			copyFileUsingStream(file,destfile);
			log.info(&quot;file is getting copied&quot;);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			
		}
	 }
	 else 
		log.info(&quot;File &quot; + (String) sList.get(i) + &quot; does not exist&quot; );
	}
//Add exported file names to a variable	
vars.putObject(&quot;CopiedFilesNames&quot;, copiedFiles);
/*---------------------------------- Ending checking the exported files----------------------------------*/</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion - Verify promotion count in export files" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.io.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.*;

import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.google.common.io.Files;


/*Start: Do not run this code if OS process sampler status is not 0*/
String prevRemoteBatchStatus = vars.get(&quot;RemoteBatchStatus&quot;);
if (!prevRemoteBatchStatus.equals(&quot;0&quot;))
{
	log.info(&quot;Stopping JSR223 assertion execution as batch run is not successful&quot;);
	return;
}
/*End: Do not run this code if OS process sampler status is not 0*/



ArrayList copiedFileNames= vars.getObject(&quot;CopiedFilesNames&quot;); 


/*Start: Find attibute values in xml based on input xPath */
private static ArrayList GetListOfxPathValuesfromXML(String xmlFilePath, String xPath)
	{
		ArrayList xpathValues = new ArrayList();

		try {
			
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document doc = builder.parse(xmlFilePath);
			XPathFactory xPathfactory = XPathFactory.newInstance();
			XPath xpath = xPathfactory.newXPath();
			XPathExpression expr = xpath.compile(xPath);
			NodeList nl = (NodeList) expr.evaluate(doc, XPathConstants.NODESET);
			
			for (int i = 0; i &lt; nl.getLength(); i++)
			{
			    org.w3c.dom.Node currentItem = nl.item(i);
			    String key = currentItem.getNodeValue();
			    xpathValues.add(key);
			}
			
			
		}  catch (IOException e) {
			System.out.println(e.getMessage());
		}
		 catch (XPathExpressionException e) {
			 System.out.println(e.getMessage());
		}
		 catch (DOMException e) {
			 System.out.println(e.getMessage());
		}
		 catch (ParserConfigurationException e) {
			System.out.println(e.getMessage());
		}
		 catch (SAXException e) {
			 System.out.println(e.getMessage());
		}
			
		
		return xpathValues;
	}
/*End: Find attibute values in xml based on input xPath */



ArrayList arr1 = new ArrayList();
for(int i=0; i&lt;copiedFileNames.size();i++)
{
	String xPath = &quot;//HQL_Promotion_Interface//Retailer//Promotions//Promotion//@PromotionInternalKey&quot;;
   	ArrayList arrlist = new ArrayList();
   	arrlist = GetListOfxPathValuesfromXML((String) copiedFileNames.get(i),&quot;//HQL_Promotion_Interface//Retailer//Promotions//Promotion//@PromotionInternalKey&quot;);
   	Collections.sort(arrlist);
   	arr1.addAll(arrlist);
}
   
   //System.out.println(arr1);
Object[] st = arr1.toArray();
for (Object s : st) 
{
	if (arr1.indexOf(s) != arr1.lastIndexOf(s)) 
	{
		arr1.remove(arr1.lastIndexOf(s));
	}
}
 Collections.sort(arr1);
 //System.out.println(arr1);
 
Integer[] ExportFilesPromotions= new Integer [arr1.size()];

 for(int i= 0 ; i&lt;ExportFilesPromotions.length;i++)
 {
	ExportFilesPromotions[i]=Integer.parseInt((String) arr1.get(i));
 }
	Arrays.sort(ExportFilesPromotions);


   
if(Integer.toString(ExportFilesPromotions.length).equals(&quot;${DBPromotionID_#}&quot;))
{
	int failure= 0;
	log.info(&quot;Count of Promotions in both export xml and DB is matched. Validating Promotion IDs...&quot;);
	for (int i = 0; i&lt; ExportFilesPromotions.length; i++)
	{
		//log.info (ExportFilesPromotions[i].toString() + &quot; &quot; + vars.get(&quot;DBPromotionID_&quot;+(i+1)) );
		
		if (!ExportFilesPromotions[i].toString().equals(vars.get(&quot;DBPromotionID_&quot;+(i+1))))
		{
			AssertionResult.setFailureMessage(&quot;Promotion in DB is not matching with promotion in export file. Promotion in export file is:&quot;+ExportFilesPromotions[i].toString()+&quot; Promotion in DB is &quot;+vars.get(&quot;DBPromotionID_&quot;+(i+1)));
  			AssertionResult.setFailure(true);
			failure= 1;
		}
	}
	if (failure==0)
		{
			log.info(&quot;Promotion ids matched in both export files and DB result&quot;);
		}
}
else
{
	log.error(&quot;Promotion count in export files: &quot; +Integer.toString(ExportFilesPromotions.length)+ &quot; not matching against DB promotion count. &quot;+vars.get(&quot;DBPromotionID_#&quot;));
	AssertionResult.setFailureMessage(&quot;Promotion count in export files: &quot; +Integer.toString(ExportFilesPromotions.length)+ &quot; not matching against DB promotion count. &quot;+vars.get(&quot;DBPromotionID_#&quot;));
   	AssertionResult.setFailure(true);
}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
