<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Epic 2438 - UseTimeZone Valiaton" enabled="true">
      <stringProp name="TestPlan.comments">Promotion Web Service Start and End by Time Zone
Make sure system paramter  
UseTimeZoneForStartDate =1 
ShowTimeZoneFlagInPromotionDistribution = 1</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables-Global" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="env" elementType="Argument">
            <stringProp name="Argument.name">env</stringProp>
            <stringProp name="Argument.value">SRRAADEVGUI</stringProp>
            <stringProp name="Argument.desc">Environment name to be used in the Endpoint URL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DBServer" elementType="Argument">
            <stringProp name="Argument.name">DBServer</stringProp>
            <stringProp name="Argument.value">153.77.180.130</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LoyaltyDBName" elementType="Argument">
            <stringProp name="Argument.name">LoyaltyDBName</stringProp>
            <stringProp name="Argument.value">Loyalty_LMS_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PromotionDBName" elementType="Argument">
            <stringProp name="Argument.name">PromotionDBName</stringProp>
            <stringProp name="Argument.value">Promotion_LMS_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MPDBName" elementType="Argument">
            <stringProp name="Argument.name">MPDBName</stringProp>
            <stringProp name="Argument.value">MP_LMS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HostDBName" elementType="Argument">
            <stringProp name="Argument.name">HostDBName</stringProp>
            <stringProp name="Argument.value">HOST_LMS_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RetailerID" elementType="Argument">
            <stringProp name="Argument.name">RetailerID</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RetailerUserID" elementType="Argument">
            <stringProp name="Argument.name">RetailerUserID</stringProp>
            <stringProp name="Argument.value">HQL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RetailerPassword" elementType="Argument">
            <stringProp name="Argument.name">RetailerPassword</stringProp>
            <stringProp name="Argument.value">Abcd1234</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CurrDate1" elementType="Argument">
            <stringProp name="Argument.name">CurrDate1</stringProp>
            <stringProp name="Argument.value">${__groovy(new Date().format(&apos;yyyy-MM-dd&apos;),)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CurrDate" elementType="Argument">
            <stringProp name="Argument.name">CurrDate</stringProp>
            <stringProp name="Argument.value">${__time(yyyy-MM-dd)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="transID" elementType="Argument">
            <stringProp name="Argument.name">transID</stringProp>
            <stringProp name="Argument.value">${__Random(5000000,6000000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ManagerUserID" elementType="Argument">
            <stringProp name="Argument.name">ManagerUserID</stringProp>
            <stringProp name="Argument.value">Manager</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ManagerPassword" elementType="Argument">
            <stringProp name="Argument.name">ManagerPassword</stringProp>
            <stringProp name="Argument.value">123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RandomString5Letter" elementType="Argument">
            <stringProp name="Argument.name">RandomString5Letter</stringProp>
            <stringProp name="Argument.value">${__RandomString(6,abcdefghijklmnopqrstuvwxyz,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-LoyaltyDB" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer};databaseName=${LoyaltyDBName}</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-Promotion DB" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer};databaseName=${PromotionDBName}</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-Loyalty Online" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_Loyalty_Online</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer};databaseName=LoyaltyOnline_LMS_1</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-MPDB" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_MP</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer};databaseName=${MPDBName}</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration-HostDB" enabled="true">
        <stringProp name="TestPlan.comments">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="dataSource">MS_Driver_Connection_Pool_Host</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${DBServer};databaseName=${HostDBName}</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">sa</stringProp>
        <stringProp name="password">Abcd1234@</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="UseTimeZone validation" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-XML" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">text/xml</stringProp>
            </elementProp>
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">LmsSession ${session}</stringProp>
            </elementProp>
            <elementProp name="DebugLevel" elementType="Header">
              <stringProp name="Header.name">DebugLevel</stringProp>
              <stringProp name="Header.value">Info</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Login" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;&#xd;
  &lt;soap:Body&gt;&#xd;
    &lt;UserLogin xmlns=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
      &lt;in_UserName&gt;${RetailerUserID}&lt;/in_UserName&gt;&#xd;
      &lt;in_Password&gt;${RetailerPassword}&lt;/in_Password&gt;&#xd;
    &lt;/UserLogin&gt;&#xd;
  &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Authorization/Login.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="742802223">Status=&quot;Ok&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">${session}</stringProp>
            <stringProp name="XPathExtractor.refname">session</stringProp>
            <stringProp name="XPathExtractor.matchNumber">0</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//out_SessionKey</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="Scope.variable">sKey</stringProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get Max PromotionID+1" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select(select max(cast(PromotionHeaderID AS INT ))FROM PromotionHeader
where matrixmemberid=@matrixmemberid)+1 AS PromotionHeaderID</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PromotionHeaderID</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.regex">PromotionHeaderID</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">${PromotionHeaderID}</stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-Create SC Promo" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;HQL_Promotion_Interface&quot;: {&#xd;
		&quot;Retailer&quot;: [&#xd;
			{&#xd;
				&quot;Id&quot;: &quot;${RetailerID}&quot;,&#xd;
				&quot;Promotions&quot;: {&#xd;
					&quot;Promotion&quot;: [&#xd;
						{&#xd;
							&quot;PromotionHeaderId&quot;: &quot;${PromotionHeaderID_1}&quot;,&#xd;
							&quot;PromotionActiveDays&quot;: {&#xd;
								&quot;ActiveOnSunday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnMonday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnTuesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnWednesday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnThursday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnFriday&quot;: &quot;true&quot;,&#xd;
								&quot;ActiveOnSaturday&quot;: &quot;true&quot;,&#xd;
								&quot;StartTime&quot;: &quot;00:00:00&quot;,&#xd;
								&quot;EndTime&quot;: &quot;23:59:00&quot;&#xd;
							},&#xd;
							&quot;PromotionDetails&quot;: {&#xd;
								&quot;HeaderDescription&quot;: &quot;SCPromo${PromotionHeaderID_1}&quot;,&#xd;
								&quot;Status&quot;: &quot;true&quot;,&#xd;
								&quot;TypeId&quot;: &quot;2&quot;,&#xd;
								&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
								&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
								&quot;TargetPopulationType&quot;: &quot;1&quot;,&#xd;
								&quot;Remarks&quot;: &quot;Test Remarks&quot;,&#xd;
								&quot;PromotionReceiptDescription&quot;: &quot;SCPromo${PromotionHeaderID_1}&quot;,&#xd;
								&quot;AdditionalTypeId&quot;: &quot;0&quot;,&#xd;
								&quot;ContinuityScope&quot;: &quot;1&quot;,&#xd;
								&quot;TriggerTiming&quot;: &quot;true&quot;,&#xd;
								&quot;DiscountAllocationScope&quot;: &quot;5&quot;,&#xd;
								&quot;PromotionFundingScope&quot;: &quot;1&quot;,&#xd;
								&quot;TicketPrintingScope&quot;: &quot;0&quot;,&#xd;
								&quot;MeanOfPaymentScope&quot;: &quot;2&quot;,&#xd;
								&quot;ConflictScope&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationLocalSegmentsOperator&quot;: &quot;1&quot;,&#xd;
								&quot;PopulationOfflineMode&quot;: &quot;1&quot;,&#xd;
								&quot;SegmentationMode&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionGroupId&quot;: &quot;0&quot;,&#xd;
								&quot;AccountingCode&quot;: &quot;&quot;,&#xd;
								&quot;AccountingSubCode&quot;: &quot;&quot;,&#xd;
								&quot;ReturnItemEligibility&quot;: &quot;0&quot;,&#xd;
								&quot;HomeStoreScope&quot;: &quot;1&quot;,&#xd;
								&quot;RedemptionLimitScope&quot;: &quot;0&quot;,&#xd;
								&quot;PromotionFlowStatus&quot;: &quot;1&quot;,&#xd;
								&quot;ExcludeItemsWithProhibitDiscount&quot;: &quot;0&quot;,&#xd;
								&quot;TriggerItemsExcludedFromOtherPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;0&quot;,&#xd;
								&quot;ExternalValidationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeRewardedItemsFromSpendConditionThreshold&quot;: &quot;0&quot;,&#xd;
								&quot;MemberRegistrationRequired&quot;: &quot;0&quot;,&#xd;
								&quot;DeductRegistrationCost&quot;: &quot;0&quot;,&#xd;
								&quot;ApplyPartialRewardWithOptimization&quot;: &quot;false&quot;,&#xd;
								&quot;PromotionRewardWillBeDisregardedByOtherPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;DisregardRewardOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
								&quot;MissedOffer&quot;: &quot;false&quot;,&#xd;
								&quot;DigitalCouponRequired&quot;: &quot;false&quot;,&#xd;
								&quot;ManualPriorityValue&quot;: &quot;0&quot;,&#xd;
								&quot;ExcludeFromPriceCompare&quot;: &quot;false&quot;,&#xd;
								&quot;AllowOmniChannelCoupon&quot;: &quot;0&quot;,&#xd;
								&quot;CalculatePromotionThresholdExcludeTax&quot;: &quot;0&quot;,&#xd;
								&quot;ItemRedemptionConfirmationRequired&quot;: &quot;false&quot;,&#xd;
								&quot;CalculatePromotionPostTax&quot;: &quot;false&quot;,&#xd;
								&quot;DiscountAllocationFlag&quot;: &quot;true&quot;,&#xd;
							},&#xd;
							&quot;Distribution&quot;: {&#xd;
								&quot;Store&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;0&quot;,&#xd;
										&quot;StartDate&quot;: &quot;${CurrDate}T00:00:00&quot;,&#xd;
										&quot;EndDate&quot;: &quot;2056-12-30T23:59:00&quot;,&#xd;
										&quot;Suspended&quot;: &quot;false&quot;&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsLevels&quot;: {&#xd;
								&quot;PromotionsLevel&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;Reward&quot;: {&#xd;
											&quot;RewardTemplateId&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValue&quot;: &quot;1&quot;,&#xd;
											&quot;RewardValueType&quot;: &quot;0&quot;,&#xd;
											&quot;LimitDiscountScope&quot;: &quot;0&quot;,&#xd;
											&quot;LimitItemScope&quot;: &quot;1&quot;,&#xd;
											&quot;LimitItemCount&quot;: &quot;1&quot;,&#xd;
											&quot;TimingScope&quot;: &quot;0&quot;,&#xd;
											&quot;MSUQuantity&quot;: &quot;0&quot;,&#xd;
											&quot;ReducePriceScope&quot;: &quot;0&quot;,&#xd;
											&quot;RewardEnteredByCashier&quot;: &quot;0&quot;,&#xd;
											&quot;AccumulateDiscountIntoMemberAccount&quot;: &quot;0&quot;&#xd;
										},&#xd;
										&quot;Thresholds&quot;: {&#xd;
											&quot;Threshold&quot;: [&#xd;
												{&#xd;
													&quot;BucketId&quot;: &quot;1&quot;,&#xd;
													&quot;ThresholdTypeId&quot;: &quot;2&quot;,&#xd;
													&quot;ThresholdValue&quot;: &quot;1&quot;&#xd;
												}&#xd;
											]&#xd;
										}&#xd;
									}&#xd;
								]&#xd;
							},&#xd;
							&quot;PromotionsBuckets&quot;: {&#xd;
								&quot;PromotionsBucket&quot;: [&#xd;
									{&#xd;
										&quot;Id&quot;: &quot;1&quot;,&#xd;
										&quot;QtySize&quot;: &quot;2&quot;,&#xd;
										&quot;QtySizeMinValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;QtySizeMaxValue&quot;: &quot;0.0000&quot;,&#xd;
										&quot;ThresholdAppliesTo&quot;: &quot;0&quot;,&#xd;
										&quot;ParticipateInReward&quot;: &quot;true&quot;,&#xd;
										&quot;RewardCalculationStartsFromMinValue&quot;: &quot;0&quot;,&#xd;
										&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
										&quot;AllocateDiscountBreakdown&quot;: &quot;true&quot;,&#xd;
										&quot;BucketTriggerItemsWillBeExcludedFromOtherPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketExcludeTriggerItemsOfMarkedPromotions&quot;: &quot;false&quot;,&#xd;
										&quot;BucketEntity&quot;: [&#xd;
											{&#xd;
												&quot;EntityId&quot;: &quot;1&quot;,&#xd;
												&quot;EntityType&quot;: &quot;0&quot;,&#xd;
												&quot;AndOrOperator&quot;: &quot;true&quot;,&#xd;
												&quot;Exclude&quot;: &quot;false&quot;&#xd;
											}&#xd;
										]&#xd;
									}&#xd;
								]&#xd;
							}&#xd;
						}&#xd;
					]&#xd;
				}&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/LoyaltyOnlineWS/REST/Promotion.ashx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Json Type" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">LmsSession ${session}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DebugLevel</stringProp>
                <stringProp name="Header.value">Info</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1996510747">&quot;TotalImportedPromotions&quot;:&quot;1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-UpdatePromotion for Store1" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:UpdatePromotion&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:PromotionInputXml&gt;&lt;![CDATA[&lt;HQL_Promotion_WS xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;file:///C:/Users/pd185161/OneDrive%20-%20NCR%20Corporation/Desktop/LP/XML%20schemas/HQL_Promotion_WS.xsd&quot;&gt;&#xd;
	&lt;Retailer Id=&quot;${RetailerID}&quot;&gt;&#xd;
		&lt;Promotion InternalPromotionId=&quot;${PromotionHeaderID_1}&quot;&gt;&#xd;
			&lt;PromotionDetails HeaderDescription=&quot;${PromotionHeaderID_1}_SC&quot;/&gt;&#xd;
			&lt;Distribution&gt;&#xd;
				&lt;Store Id=&quot;1&quot; StartDate=&quot;${CurrDate}T00:00:00&quot; EndDate=&quot;2056-12-30T23:59:00&quot; UseTimeZone=&quot;1&quot;/&gt;&#xd;
			&lt;/Distribution&gt;&#xd;
			&lt;PromotionsLevels&gt;&#xd;
			&lt;PromotionsLevel Id=&quot;1&quot;&gt;&#xd;
			&lt;Reward  RewardValue=&quot;8.00&quot;/&gt;&#xd;
			&lt;/PromotionsLevel&gt;&#xd;
			&lt;/PromotionsLevels&gt;&#xd;
		&lt;/Promotion&gt;&#xd;
	&lt;/Retailer&gt;&#xd;
&lt;/HQL_Promotion_WS&gt;]]&gt;&lt;/hql:PromotionInputXml&gt;&#xd;
      &lt;/hql:UpdatePromotion&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">UpdatePromotion for store 1 with UseTimeZone=&quot;1&quot;</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1149548672">Status=&quot;Ok&quot; /&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get UseTimeZone for Store1 and Promo" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select UseTimeZone from PromotionDistribution where Matrixmemberid=@matrixmemberid and promotionheaderid=&apos;${PromotionHeaderID_1}&apos; and DistributedStoreInternalKey = (select StoreInternalKey from [${HostDBName}].[dbo].[StoreCode] where Matrixmemberid=@matrixmemberid and storeId=&apos;1&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">UseTimeZone</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String actualUseTimeZone =&quot;${UseTimeZone_1}&quot;;


if(actualUseTimeZone.equals(&quot;true&quot;))
{
	Failure = false;
	log.info(&quot;UseTimeZone validated successfully for Store1 after UpdatePromotion &quot;);	
}
else
{
	Failure = true;
	log.info(&quot;UseTimeZone value is not as per UpdatePromotion WS request&quot;);	
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromotionByInternalId" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByInternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:int&gt;${PromotionHeaderID_1}&lt;/hql:int&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByInternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="573513831">PromotionInternalKey=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor - responseXMLDATA" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">responseXMLDATA</stringProp>
            <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//exportXml</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">//HQL_Promotion_Interface/Retailer/Promotions/Promotion/Distribution/Store[@StoreId=&apos;1&apos;]/@UseTimeZone = &apos;true&apos;</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">false</boolProp>
            <boolProp name="XPath.namespace">false</boolProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">responseXMLDATA</stringProp>
          </XPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-GetPromotionByExternalId" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionByExternalId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:promotions&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;hql:string&gt;${PromotionHeaderID_1}&lt;/hql:string&gt;&#xd;
         &lt;/hql:promotions&gt;&#xd;
      &lt;/hql:GetPromotionByExternalId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="573513831">PromotionInternalKey=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor - responseXMLDATA" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">responseXMLDATA</stringProp>
            <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//exportXml</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">//HQL_Promotion_Interface/Retailer/Promotions/Promotion/Distribution/Store[@StoreId=&apos;1&apos;]/@UseTimeZone = &apos;true&apos;</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">false</boolProp>
            <boolProp name="XPath.namespace">false</boolProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">responseXMLDATA</stringProp>
          </XPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - GetPromotionsByStoreId" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:GetPromotionsByStoreId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:retailerId&gt;${RetailerID}&lt;/hql:retailerId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:storeId&gt;1&lt;/hql:storeId&gt;&#xd;
      &lt;/hql:GetPromotionsByStoreId&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-88171113">Status=&quot;Ok&quot; /&gt;&lt;exportXml&gt;</stringProp>
              <stringProp name="573513831">PromotionInternalKey=&quot;${PromotionHeaderID_1}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor - responseXMLDATA" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">responseXMLDATA</stringProp>
            <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//exportXml</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">//HQL_Promotion_Interface/Retailer/Promotions/Promotion[@PromotionInternalKey=&apos;${PromotionHeaderID_1}&apos;]/Distribution/Store[@StoreId=&apos;1&apos;]/@UseTimeZone = &apos;true&apos;</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">false</boolProp>
            <boolProp name="XPath.namespace">false</boolProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">responseXMLDATA</stringProp>
          </XPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-CopyAndSuspendFromSource for Store2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:hql=&quot;http://www.retalix.com/HQLWebServices&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;hql:CopyAndSuspendFromSource&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;hql:PromotionInputXml&gt;&lt;![CDATA[&lt;HQL_Promotion_WS&gt;&lt;Retailer Id=&quot;${RetailerID}&quot;&gt;&#xd;
&lt;Promotion InternalPromotionId=&quot;${PromotionHeaderID_1}&quot;&gt;&#xd;
&lt;PromotionDetails HeaderDescription=&quot;suspend_${PromotionHeaderID_1}&quot; /&gt;&#xd;
&lt;Distribution&gt;&lt;Store Id=&quot;2&quot; StartDate=&quot;${CurrDate}T00:00:00+05:30&quot; EndDate=&quot;2056-12-30T00:00:00+05:30&quot; UseTimeZone=&quot;1&quot; /&gt;&lt;/Distribution&gt;&#xd;
&lt;PromotionsLevels&gt;&lt;PromotionsLevel Id=&quot;1&quot;&gt;&#xd;
&lt;Reward RewardValue=&quot;0.61&quot; /&gt;&#xd;
&lt;/PromotionsLevel&gt;&lt;/PromotionsLevels&gt;&#xd;
&lt;/Promotion&gt;&#xd;
&lt;/Retailer&gt;&lt;/HQL_Promotion_WS&gt;]]&gt;&lt;/hql:PromotionInputXml&gt;&#xd;
      &lt;/hql:CopyAndSuspendFromSource&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">LoyaltyOnlineWS/Promotion/Promotion.asmx?sk=${session}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-773095601">Status=&quot;Ok&quot; /&gt;&lt;PromotionOutputXml&gt;</stringProp>
              <stringProp name="-1993357183">NewInternalPromotionId</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor- New Promotion id" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">NewPromotionID</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">NewInternalPromotionId=&apos;</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">&apos;</stringProp>
            <stringProp name="BoundaryExtractor.default"></stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number"></stringProp>
          </BoundaryExtractor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get UseTimeZone, Suspended for Store2 in old Promo" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select Suspended, UseTimeZone from PromotionDistribution where Matrixmemberid=@matrixmemberid and promotionheaderid=&apos;${PromotionHeaderID_1}&apos; and DistributedStoreInternalKey = (select StoreInternalKey from [${HostDBName}].[dbo].[StoreCode] where Matrixmemberid=@matrixmemberid and storeId=&apos;2&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">Suspended,UseTimeZone</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String actualUseTimeZone =&quot;${UseTimeZone_1}&quot;;
String actualSuspended =&quot;${Suspended_1}&quot;;


if(actualUseTimeZone.equals(&quot;true&quot;) &amp;&amp; actualSuspended.equals(&quot;true&quot;))
{
	Failure = false;
	log.info(&quot;UseTimeZone and suspended columns validated successfully for Store2 after CopyAndSuspendFromSource WS &quot;);	
}
else
{
	Failure = true;
	log.info(&quot;UseTimeZone and Suspened columns are not as exepected for Store2&quot;);	
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Get UseTimeZone, Suspended for Store2 in new Promo" enabled="true">
          <stringProp name="dataSource">MS_Driver_Connection_Pool_Promotion</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">Declare @matrixmemberid varchar(50)
set @matrixmemberid = (select MatrixMemberId from RetailerCode_MP where RetailerID= &apos;${RetailerID}&apos;)

select Suspended, UseTimeZone from PromotionDistribution where Matrixmemberid=@matrixmemberid and promotionheaderid=&apos;${NewPromotionID}&apos; and DistributedStoreInternalKey = (select StoreInternalKey from [${HostDBName}].[dbo].[StoreCode] where Matrixmemberid=@matrixmemberid and storeId=&apos;2&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">Suspended1,UseTimeZone1</stringProp>
          <stringProp name="resultVariable">resultSet1</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String actualUseTimeZone =&quot;${UseTimeZone1_1}&quot;;
String actualSuspended =&quot;${Suspended1_1}&quot;;


if(actualUseTimeZone.equals(&quot;true&quot;) &amp;&amp; actualSuspended.equals(&quot;false&quot;))
{
	Failure = false;
	log.info(&quot;UseTimeZone and suspended columns validated successfully for Store2 after CopyAndSuspendFromSource WS &quot;);	
}
else
{
	Failure = true;
	log.info(&quot;UseTimeZone and Suspened columns are not as exepected for Store2&quot;);	
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
